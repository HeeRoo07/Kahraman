{
	"info": {
		"_postman_id": "fff16644-8a18-40fc-a216-531561e9e3a2",
		"name": "Veeam Backup & Replication REST API",
		"description": "This document lists paths (endpoints) of the Veeam Backup & Replication REST API and operations that you can perform by sending HTTP requests to the paths.<br>\nRequests can contain parameters in their path, query and header. POST and PUT requests can include a request body with resource payload. In response, you receive a conventional HTTP response code, HTTP response header and an optional response body schema that contains a result model.<br>\nParameters, request bodies, and response bodies are defined inline or refer to schemas defined globally. Some schemas are polymorphic.\n\n\nContact Support:\n Email: support@veeam.com",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "26447944",
		"_collection_link": "https://www.postman.com/ExHoward/workspace/ed-howard-s-public-workspace/collection/6167780-fff16644-8a18-40fc-a216-531561e9e3a2?action=share&source=collection_link&creator=26447944"
	},
	"item": [
		{
			"name": "api",
			"item": [
				{
					"name": "v1",
					"item": [
						{
							"name": "traffic Rules",
							"item": [
								{
									"name": "Get Traffic Rules",
									"request": {
										"method": "GET",
										"header": [
											{
												"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
												"key": "x-api-version",
												"value": "1.0-rev1"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": "{{baseUrl}}/api/v1/trafficRules",
										"description": "The HTTP GET request to the `/api/v1/trafficRules` path allows you to get network traffic rules that control traffic transferred between backup infrastructure components."
									},
									"response": [
										{
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													},
													{
														"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
														"key": "x-api-version",
														"value": "1.0-rev1"
													}
												],
												"url": "{{baseUrl}}/api/v1/trafficRules"
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"useMultipleStreamsPerJob\": false,\n  \"uploadStreamsCount\": -44309884,\n  \"trafficRules\": [\n    {\n      \"name\": \"consequat ut aute\",\n      \"sourceIPStart\": \"ali\",\n      \"sourceIPEnd\": \"laboris officia\",\n      \"targetIPStart\": \"tempor in Excepteur\",\n      \"targetIPEnd\": \"dolor fugiat\",\n      \"id\": \"urn:uuid:c339c6d1-5658-3f1b-901a-fc77b5491688\",\n      \"encryptionEnabled\": false,\n      \"throttlingEnabled\": false,\n      \"throttlingUnit\": \"KbytePerSec\",\n      \"throttlingValue\": -44078454,\n      \"throttlingWindowEnabled\": false,\n      \"throttlingWindowOptions\": {\n        \"days\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      }\n    },\n    {\n      \"name\": \"sunt\",\n      \"sourceIPStart\": \"Lorem do nostrud id\",\n      \"sourceIPEnd\": \"dolore nulla\",\n      \"targetIPStart\": \"fugiat sed eu\",\n      \"targetIPEnd\": \"sit\",\n      \"id\": \"08215c62-2f3f-109a-7849-3c2944499814\",\n      \"encryptionEnabled\": true,\n      \"throttlingEnabled\": true,\n      \"throttlingUnit\": \"KbytePerSec\",\n      \"throttlingValue\": 68485711,\n      \"throttlingWindowEnabled\": true,\n      \"throttlingWindowOptions\": {\n        \"days\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      }\n    }\n  ],\n  \"preferredNetworks\": {\n    \"isEnabled\": false,\n    \"networks\": [\n      {\n        \"ipAddress\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"subnetMask\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"cidrNotation\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      {\n        \"ipAddress\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"subnetMask\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"cidrNotation\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      }\n    ]\n  }\n}"
										},
										{
											"name": "Unauthorized. The authorization header has been expected but not found (or found but is expired).",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													},
													{
														"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
														"key": "x-api-version",
														"value": "1.0-rev1"
													}
												],
												"url": "{{baseUrl}}/api/v1/trafficRules"
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
										},
										{
											"name": "Forbidden. The user sending the request does not have adequate privileges to access one or more objects specified in the request.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													},
													{
														"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
														"key": "x-api-version",
														"value": "1.0-rev1"
													}
												],
												"url": "{{baseUrl}}/api/v1/trafficRules"
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
										},
										{
											"name": "Internal server error. The request has been received but could not be completed because of an internal error at the server side.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													},
													{
														"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
														"key": "x-api-version",
														"value": "1.0-rev1"
													}
												],
												"url": "{{baseUrl}}/api/v1/trafficRules"
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
										}
									]
								},
								{
									"name": "Edit Traffic Rules",
									"request": {
										"method": "PUT",
										"header": [
											{
												"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
												"key": "x-api-version",
												"value": "1.0-rev1"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"useMultipleStreamsPerJob\": true,\n  \"uploadStreamsCount\": -11003122,\n  \"trafficRules\": [\n    {\n      \"name\": \"aliqua consectetur eiusmod\",\n      \"sourceIPStart\": \"esse elit irure in\",\n      \"sourceIPEnd\": \"Ut ipsum\",\n      \"targetIPStart\": \"enim commodo\",\n      \"targetIPEnd\": \"amet elit eu\",\n      \"id\": \"urn:uuid:835ff542-cca6-9730-8df0-e2bc1f827285\",\n      \"encryptionEnabled\": true,\n      \"throttlingEnabled\": true,\n      \"throttlingUnit\": \"MbitPerSpec\",\n      \"throttlingValue\": 56635301,\n      \"throttlingWindowEnabled\": false,\n      \"throttlingWindowOptions\": {\n        \"days\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      }\n    },\n    {\n      \"name\": \"tempor consectetur esse\",\n      \"sourceIPStart\": \"eiusmod\",\n      \"sourceIPEnd\": \"tempor aliqua officia irure\",\n      \"targetIPStart\": \"Duis\",\n      \"targetIPEnd\": \"exercitation aliqua\",\n      \"id\": \"urn:uuid:81e9fcb3-30c3-f47c-0c61-eaf40c28cf19\",\n      \"encryptionEnabled\": false,\n      \"throttlingEnabled\": true,\n      \"throttlingUnit\": \"MbytePerSec\",\n      \"throttlingValue\": -40363658,\n      \"throttlingWindowEnabled\": true,\n      \"throttlingWindowOptions\": {\n        \"days\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      }\n    }\n  ],\n  \"preferredNetworks\": {\n    \"isEnabled\": true,\n    \"networks\": [\n      {\n        \"ipAddress\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"subnetMask\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"cidrNotation\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      {\n        \"ipAddress\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"subnetMask\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"cidrNotation\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      }\n    ]\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{baseUrl}}/api/v1/trafficRules",
										"description": "The HTTP PUT request to the `/api/v1/trafficRules` path allows you to edit network traffic rules that are configured on the backup server."
									},
									"response": [
										{
											"name": "Infrastructure session has been created to edit the traffic rules. To check the progress, track the session `state`.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													},
													{
														"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
														"key": "x-api-version",
														"value": "1.0-rev1"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"useMultipleStreamsPerJob\": true,\n  \"uploadStreamsCount\": -11003122,\n  \"trafficRules\": [\n    {\n      \"name\": \"aliqua consectetur eiusmod\",\n      \"sourceIPStart\": \"esse elit irure in\",\n      \"sourceIPEnd\": \"Ut ipsum\",\n      \"targetIPStart\": \"enim commodo\",\n      \"targetIPEnd\": \"amet elit eu\",\n      \"id\": \"urn:uuid:835ff542-cca6-9730-8df0-e2bc1f827285\",\n      \"encryptionEnabled\": true,\n      \"throttlingEnabled\": true,\n      \"throttlingUnit\": \"MbitPerSpec\",\n      \"throttlingValue\": 56635301,\n      \"throttlingWindowEnabled\": false,\n      \"throttlingWindowOptions\": {\n        \"days\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      }\n    },\n    {\n      \"name\": \"tempor consectetur esse\",\n      \"sourceIPStart\": \"eiusmod\",\n      \"sourceIPEnd\": \"tempor aliqua officia irure\",\n      \"targetIPStart\": \"Duis\",\n      \"targetIPEnd\": \"exercitation aliqua\",\n      \"id\": \"urn:uuid:81e9fcb3-30c3-f47c-0c61-eaf40c28cf19\",\n      \"encryptionEnabled\": false,\n      \"throttlingEnabled\": true,\n      \"throttlingUnit\": \"MbytePerSec\",\n      \"throttlingValue\": -40363658,\n      \"throttlingWindowEnabled\": true,\n      \"throttlingWindowOptions\": {\n        \"days\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      }\n    }\n  ],\n  \"preferredNetworks\": {\n    \"isEnabled\": true,\n    \"networks\": [\n      {\n        \"ipAddress\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"subnetMask\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"cidrNotation\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      {\n        \"ipAddress\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"subnetMask\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"cidrNotation\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      }\n    ]\n  }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{baseUrl}}/api/v1/trafficRules"
											},
											"status": "Created",
											"code": 201,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"useMultipleStreamsPerJob\": true,\n  \"uploadStreamsCount\": -11003122,\n  \"trafficRules\": [\n    {\n      \"name\": \"aliqua consectetur eiusmod\",\n      \"sourceIPStart\": \"esse elit irure in\",\n      \"sourceIPEnd\": \"Ut ipsum\",\n      \"targetIPStart\": \"enim commodo\",\n      \"targetIPEnd\": \"amet elit eu\",\n      \"id\": \"urn:uuid:835ff542-cca6-9730-8df0-e2bc1f827285\",\n      \"encryptionEnabled\": true,\n      \"throttlingEnabled\": true,\n      \"throttlingUnit\": \"MbitPerSpec\",\n      \"throttlingValue\": 56635301,\n      \"throttlingWindowEnabled\": false,\n      \"throttlingWindowOptions\": {\n        \"days\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      }\n    },\n    {\n      \"name\": \"tempor consectetur esse\",\n      \"sourceIPStart\": \"eiusmod\",\n      \"sourceIPEnd\": \"tempor aliqua officia irure\",\n      \"targetIPStart\": \"Duis\",\n      \"targetIPEnd\": \"exercitation aliqua\",\n      \"id\": \"urn:uuid:81e9fcb3-30c3-f47c-0c61-eaf40c28cf19\",\n      \"encryptionEnabled\": false,\n      \"throttlingEnabled\": true,\n      \"throttlingUnit\": \"MbytePerSec\",\n      \"throttlingValue\": -40363658,\n      \"throttlingWindowEnabled\": true,\n      \"throttlingWindowOptions\": {\n        \"days\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      }\n    }\n  ],\n  \"preferredNetworks\": {\n    \"isEnabled\": true,\n    \"networks\": [\n      {\n        \"ipAddress\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"subnetMask\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"cidrNotation\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      {\n        \"ipAddress\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"subnetMask\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"cidrNotation\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      }\n    ]\n  }\n}"
										},
										{
											"name": "Bad request. This error is related to POST/PUT requests. The request body is malformed, incomplete or otherwise invalid.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													},
													{
														"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
														"key": "x-api-version",
														"value": "1.0-rev1"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"useMultipleStreamsPerJob\": true,\n  \"uploadStreamsCount\": -11003122,\n  \"trafficRules\": [\n    {\n      \"name\": \"aliqua consectetur eiusmod\",\n      \"sourceIPStart\": \"esse elit irure in\",\n      \"sourceIPEnd\": \"Ut ipsum\",\n      \"targetIPStart\": \"enim commodo\",\n      \"targetIPEnd\": \"amet elit eu\",\n      \"id\": \"urn:uuid:835ff542-cca6-9730-8df0-e2bc1f827285\",\n      \"encryptionEnabled\": true,\n      \"throttlingEnabled\": true,\n      \"throttlingUnit\": \"MbitPerSpec\",\n      \"throttlingValue\": 56635301,\n      \"throttlingWindowEnabled\": false,\n      \"throttlingWindowOptions\": {\n        \"days\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      }\n    },\n    {\n      \"name\": \"tempor consectetur esse\",\n      \"sourceIPStart\": \"eiusmod\",\n      \"sourceIPEnd\": \"tempor aliqua officia irure\",\n      \"targetIPStart\": \"Duis\",\n      \"targetIPEnd\": \"exercitation aliqua\",\n      \"id\": \"urn:uuid:81e9fcb3-30c3-f47c-0c61-eaf40c28cf19\",\n      \"encryptionEnabled\": false,\n      \"throttlingEnabled\": true,\n      \"throttlingUnit\": \"MbytePerSec\",\n      \"throttlingValue\": -40363658,\n      \"throttlingWindowEnabled\": true,\n      \"throttlingWindowOptions\": {\n        \"days\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      }\n    }\n  ],\n  \"preferredNetworks\": {\n    \"isEnabled\": true,\n    \"networks\": [\n      {\n        \"ipAddress\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"subnetMask\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"cidrNotation\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      {\n        \"ipAddress\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"subnetMask\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"cidrNotation\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      }\n    ]\n  }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{baseUrl}}/api/v1/trafficRules"
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
										},
										{
											"name": "Unauthorized. The authorization header has been expected but not found (or found but is expired).",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													},
													{
														"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
														"key": "x-api-version",
														"value": "1.0-rev1"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"useMultipleStreamsPerJob\": true,\n  \"uploadStreamsCount\": -11003122,\n  \"trafficRules\": [\n    {\n      \"name\": \"aliqua consectetur eiusmod\",\n      \"sourceIPStart\": \"esse elit irure in\",\n      \"sourceIPEnd\": \"Ut ipsum\",\n      \"targetIPStart\": \"enim commodo\",\n      \"targetIPEnd\": \"amet elit eu\",\n      \"id\": \"urn:uuid:835ff542-cca6-9730-8df0-e2bc1f827285\",\n      \"encryptionEnabled\": true,\n      \"throttlingEnabled\": true,\n      \"throttlingUnit\": \"MbitPerSpec\",\n      \"throttlingValue\": 56635301,\n      \"throttlingWindowEnabled\": false,\n      \"throttlingWindowOptions\": {\n        \"days\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      }\n    },\n    {\n      \"name\": \"tempor consectetur esse\",\n      \"sourceIPStart\": \"eiusmod\",\n      \"sourceIPEnd\": \"tempor aliqua officia irure\",\n      \"targetIPStart\": \"Duis\",\n      \"targetIPEnd\": \"exercitation aliqua\",\n      \"id\": \"urn:uuid:81e9fcb3-30c3-f47c-0c61-eaf40c28cf19\",\n      \"encryptionEnabled\": false,\n      \"throttlingEnabled\": true,\n      \"throttlingUnit\": \"MbytePerSec\",\n      \"throttlingValue\": -40363658,\n      \"throttlingWindowEnabled\": true,\n      \"throttlingWindowOptions\": {\n        \"days\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      }\n    }\n  ],\n  \"preferredNetworks\": {\n    \"isEnabled\": true,\n    \"networks\": [\n      {\n        \"ipAddress\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"subnetMask\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"cidrNotation\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      {\n        \"ipAddress\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"subnetMask\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"cidrNotation\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      }\n    ]\n  }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{baseUrl}}/api/v1/trafficRules"
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
										},
										{
											"name": "Forbidden. The user sending the request does not have adequate privileges to access one or more objects specified in the request.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													},
													{
														"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
														"key": "x-api-version",
														"value": "1.0-rev1"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"useMultipleStreamsPerJob\": true,\n  \"uploadStreamsCount\": -11003122,\n  \"trafficRules\": [\n    {\n      \"name\": \"aliqua consectetur eiusmod\",\n      \"sourceIPStart\": \"esse elit irure in\",\n      \"sourceIPEnd\": \"Ut ipsum\",\n      \"targetIPStart\": \"enim commodo\",\n      \"targetIPEnd\": \"amet elit eu\",\n      \"id\": \"urn:uuid:835ff542-cca6-9730-8df0-e2bc1f827285\",\n      \"encryptionEnabled\": true,\n      \"throttlingEnabled\": true,\n      \"throttlingUnit\": \"MbitPerSpec\",\n      \"throttlingValue\": 56635301,\n      \"throttlingWindowEnabled\": false,\n      \"throttlingWindowOptions\": {\n        \"days\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      }\n    },\n    {\n      \"name\": \"tempor consectetur esse\",\n      \"sourceIPStart\": \"eiusmod\",\n      \"sourceIPEnd\": \"tempor aliqua officia irure\",\n      \"targetIPStart\": \"Duis\",\n      \"targetIPEnd\": \"exercitation aliqua\",\n      \"id\": \"urn:uuid:81e9fcb3-30c3-f47c-0c61-eaf40c28cf19\",\n      \"encryptionEnabled\": false,\n      \"throttlingEnabled\": true,\n      \"throttlingUnit\": \"MbytePerSec\",\n      \"throttlingValue\": -40363658,\n      \"throttlingWindowEnabled\": true,\n      \"throttlingWindowOptions\": {\n        \"days\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      }\n    }\n  ],\n  \"preferredNetworks\": {\n    \"isEnabled\": true,\n    \"networks\": [\n      {\n        \"ipAddress\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"subnetMask\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"cidrNotation\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      {\n        \"ipAddress\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"subnetMask\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"cidrNotation\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      }\n    ]\n  }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{baseUrl}}/api/v1/trafficRules"
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
										},
										{
											"name": "Internal server error. The request has been received but could not be completed because of an internal error at the server side.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													},
													{
														"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
														"key": "x-api-version",
														"value": "1.0-rev1"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"useMultipleStreamsPerJob\": true,\n  \"uploadStreamsCount\": -11003122,\n  \"trafficRules\": [\n    {\n      \"name\": \"aliqua consectetur eiusmod\",\n      \"sourceIPStart\": \"esse elit irure in\",\n      \"sourceIPEnd\": \"Ut ipsum\",\n      \"targetIPStart\": \"enim commodo\",\n      \"targetIPEnd\": \"amet elit eu\",\n      \"id\": \"urn:uuid:835ff542-cca6-9730-8df0-e2bc1f827285\",\n      \"encryptionEnabled\": true,\n      \"throttlingEnabled\": true,\n      \"throttlingUnit\": \"MbitPerSpec\",\n      \"throttlingValue\": 56635301,\n      \"throttlingWindowEnabled\": false,\n      \"throttlingWindowOptions\": {\n        \"days\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      }\n    },\n    {\n      \"name\": \"tempor consectetur esse\",\n      \"sourceIPStart\": \"eiusmod\",\n      \"sourceIPEnd\": \"tempor aliqua officia irure\",\n      \"targetIPStart\": \"Duis\",\n      \"targetIPEnd\": \"exercitation aliqua\",\n      \"id\": \"urn:uuid:81e9fcb3-30c3-f47c-0c61-eaf40c28cf19\",\n      \"encryptionEnabled\": false,\n      \"throttlingEnabled\": true,\n      \"throttlingUnit\": \"MbytePerSec\",\n      \"throttlingValue\": -40363658,\n      \"throttlingWindowEnabled\": true,\n      \"throttlingWindowOptions\": {\n        \"days\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      }\n    }\n  ],\n  \"preferredNetworks\": {\n    \"isEnabled\": true,\n    \"networks\": [\n      {\n        \"ipAddress\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"subnetMask\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"cidrNotation\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      {\n        \"ipAddress\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"subnetMask\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"cidrNotation\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      }\n    ]\n  }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{baseUrl}}/api/v1/trafficRules"
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
										}
									]
								}
							]
						},
						{
							"name": "general Options",
							"item": [
								{
									"name": "Get General Options",
									"request": {
										"method": "GET",
										"header": [
											{
												"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
												"key": "x-api-version",
												"value": "1.0-rev1"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": "{{baseUrl}}/api/v1/generalOptions",
										"description": "The HTTP GET request to the `/api/v1/generalOptions` path allows you to get general options of Veeam Backup & Replication."
									},
									"response": [
										{
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													},
													{
														"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
														"key": "x-api-version",
														"value": "1.0-rev1"
													}
												],
												"url": "{{baseUrl}}/api/v1/generalOptions"
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"emailSettings\": {\n    \"isEnabled\": true,\n    \"smtpServerName\": \"laboris\",\n    \"advancedSmtpOptions\": {\n      \"port\": -4104865,\n      \"timeoutMs\": 55458754,\n      \"SSLEnabled\": true,\n      \"authRequred\": true,\n      \"credentialsId\": \"dbcc0531-28da-928e-107d-63461ea3fb09\"\n    },\n    \"from\": \"exercitation nostrud labore sit aute\",\n    \"to\": \"ullamco\",\n    \"subject\": \"culpa aliqua ipsum mollit\",\n    \"sendDailyReportsAt\": \"1983-03-30T08:58:45.980Z\",\n    \"notifyOnSuccess\": true,\n    \"notifyOnWarning\": false,\n    \"notifyOnFailure\": true,\n    \"notifyOnLastRetry\": false\n  },\n  \"notifications\": {\n    \"storageSpaceThresholdEnabled\": false,\n    \"storageSpaceThreshold\": -84564856,\n    \"datastoreSpaceThresholdEnabled\": true,\n    \"datastoreSpaceThreshold\": -82988834,\n    \"skipVMSpaceThresholdEnabled\": false,\n    \"skipVMSpaceThreshold\": 93152047,\n    \"notifyOnSupportExpiration\": false,\n    \"notifyOnUpdates\": true\n  }\n}"
										},
										{
											"name": "Unauthorized. The authorization header has been expected but not found (or found but is expired).",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													},
													{
														"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
														"key": "x-api-version",
														"value": "1.0-rev1"
													}
												],
												"url": "{{baseUrl}}/api/v1/generalOptions"
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
										},
										{
											"name": "Forbidden. The user sending the request does not have adequate privileges to access one or more objects specified in the request.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													},
													{
														"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
														"key": "x-api-version",
														"value": "1.0-rev1"
													}
												],
												"url": "{{baseUrl}}/api/v1/generalOptions"
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
										},
										{
											"name": "Not found. No object was found with the path parameter specified in the request.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													},
													{
														"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
														"key": "x-api-version",
														"value": "1.0-rev1"
													}
												],
												"url": "{{baseUrl}}/api/v1/generalOptions"
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
										},
										{
											"name": "Internal server error. The request has been received but could not be completed because of an internal error at the server side.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													},
													{
														"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
														"key": "x-api-version",
														"value": "1.0-rev1"
													}
												],
												"url": "{{baseUrl}}/api/v1/generalOptions"
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
										}
									]
								},
								{
									"name": "Edit General Options",
									"request": {
										"method": "PUT",
										"header": [
											{
												"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
												"key": "x-api-version",
												"value": "1.0-rev1"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"emailSettings\": {\n    \"isEnabled\": true,\n    \"smtpServerName\": \"laboris\",\n    \"advancedSmtpOptions\": {\n      \"port\": -4104865,\n      \"timeoutMs\": 55458754,\n      \"SSLEnabled\": true,\n      \"authRequred\": true,\n      \"credentialsId\": \"dbcc0531-28da-928e-107d-63461ea3fb09\"\n    },\n    \"from\": \"exercitation nostrud labore sit aute\",\n    \"to\": \"ullamco\",\n    \"subject\": \"culpa aliqua ipsum mollit\",\n    \"sendDailyReportsAt\": \"1983-03-30T08:58:45.980Z\",\n    \"notifyOnSuccess\": true,\n    \"notifyOnWarning\": false,\n    \"notifyOnFailure\": true,\n    \"notifyOnLastRetry\": false\n  },\n  \"notifications\": {\n    \"storageSpaceThresholdEnabled\": false,\n    \"storageSpaceThreshold\": -84564856,\n    \"datastoreSpaceThresholdEnabled\": true,\n    \"datastoreSpaceThreshold\": -82988834,\n    \"skipVMSpaceThresholdEnabled\": false,\n    \"skipVMSpaceThreshold\": 93152047,\n    \"notifyOnSupportExpiration\": false,\n    \"notifyOnUpdates\": true\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{baseUrl}}/api/v1/generalOptions",
										"description": "The HTTP PUT request to the `/api/v1/generalOptions` path allows you to edit general options of Veeam Backup & Replication."
									},
									"response": [
										{
											"name": "General options have been updated.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													},
													{
														"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
														"key": "x-api-version",
														"value": "1.0-rev1"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"emailSettings\": {\n    \"isEnabled\": true,\n    \"smtpServerName\": \"laboris\",\n    \"advancedSmtpOptions\": {\n      \"port\": -4104865,\n      \"timeoutMs\": 55458754,\n      \"SSLEnabled\": true,\n      \"authRequred\": true,\n      \"credentialsId\": \"dbcc0531-28da-928e-107d-63461ea3fb09\"\n    },\n    \"from\": \"exercitation nostrud labore sit aute\",\n    \"to\": \"ullamco\",\n    \"subject\": \"culpa aliqua ipsum mollit\",\n    \"sendDailyReportsAt\": \"1983-03-30T08:58:45.980Z\",\n    \"notifyOnSuccess\": true,\n    \"notifyOnWarning\": false,\n    \"notifyOnFailure\": true,\n    \"notifyOnLastRetry\": false\n  },\n  \"notifications\": {\n    \"storageSpaceThresholdEnabled\": false,\n    \"storageSpaceThreshold\": -84564856,\n    \"datastoreSpaceThresholdEnabled\": true,\n    \"datastoreSpaceThreshold\": -82988834,\n    \"skipVMSpaceThresholdEnabled\": false,\n    \"skipVMSpaceThreshold\": 93152047,\n    \"notifyOnSupportExpiration\": false,\n    \"notifyOnUpdates\": true\n  }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{baseUrl}}/api/v1/generalOptions"
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"emailSettings\": {\n    \"isEnabled\": true,\n    \"smtpServerName\": \"laboris\",\n    \"advancedSmtpOptions\": {\n      \"port\": -4104865,\n      \"timeoutMs\": 55458754,\n      \"SSLEnabled\": true,\n      \"authRequred\": true,\n      \"credentialsId\": \"dbcc0531-28da-928e-107d-63461ea3fb09\"\n    },\n    \"from\": \"exercitation nostrud labore sit aute\",\n    \"to\": \"ullamco\",\n    \"subject\": \"culpa aliqua ipsum mollit\",\n    \"sendDailyReportsAt\": \"1983-03-30T08:58:45.980Z\",\n    \"notifyOnSuccess\": true,\n    \"notifyOnWarning\": false,\n    \"notifyOnFailure\": true,\n    \"notifyOnLastRetry\": false\n  },\n  \"notifications\": {\n    \"storageSpaceThresholdEnabled\": false,\n    \"storageSpaceThreshold\": -84564856,\n    \"datastoreSpaceThresholdEnabled\": true,\n    \"datastoreSpaceThreshold\": -82988834,\n    \"skipVMSpaceThresholdEnabled\": false,\n    \"skipVMSpaceThreshold\": 93152047,\n    \"notifyOnSupportExpiration\": false,\n    \"notifyOnUpdates\": true\n  }\n}"
										},
										{
											"name": "Bad request. This error is related to POST/PUT requests. The request body is malformed, incomplete or otherwise invalid.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													},
													{
														"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
														"key": "x-api-version",
														"value": "1.0-rev1"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"emailSettings\": {\n    \"isEnabled\": true,\n    \"smtpServerName\": \"laboris\",\n    \"advancedSmtpOptions\": {\n      \"port\": -4104865,\n      \"timeoutMs\": 55458754,\n      \"SSLEnabled\": true,\n      \"authRequred\": true,\n      \"credentialsId\": \"dbcc0531-28da-928e-107d-63461ea3fb09\"\n    },\n    \"from\": \"exercitation nostrud labore sit aute\",\n    \"to\": \"ullamco\",\n    \"subject\": \"culpa aliqua ipsum mollit\",\n    \"sendDailyReportsAt\": \"1983-03-30T08:58:45.980Z\",\n    \"notifyOnSuccess\": true,\n    \"notifyOnWarning\": false,\n    \"notifyOnFailure\": true,\n    \"notifyOnLastRetry\": false\n  },\n  \"notifications\": {\n    \"storageSpaceThresholdEnabled\": false,\n    \"storageSpaceThreshold\": -84564856,\n    \"datastoreSpaceThresholdEnabled\": true,\n    \"datastoreSpaceThreshold\": -82988834,\n    \"skipVMSpaceThresholdEnabled\": false,\n    \"skipVMSpaceThreshold\": 93152047,\n    \"notifyOnSupportExpiration\": false,\n    \"notifyOnUpdates\": true\n  }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{baseUrl}}/api/v1/generalOptions"
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
										},
										{
											"name": "Unauthorized. The authorization header has been expected but not found (or found but is expired).",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													},
													{
														"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
														"key": "x-api-version",
														"value": "1.0-rev1"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"emailSettings\": {\n    \"isEnabled\": true,\n    \"smtpServerName\": \"laboris\",\n    \"advancedSmtpOptions\": {\n      \"port\": -4104865,\n      \"timeoutMs\": 55458754,\n      \"SSLEnabled\": true,\n      \"authRequred\": true,\n      \"credentialsId\": \"dbcc0531-28da-928e-107d-63461ea3fb09\"\n    },\n    \"from\": \"exercitation nostrud labore sit aute\",\n    \"to\": \"ullamco\",\n    \"subject\": \"culpa aliqua ipsum mollit\",\n    \"sendDailyReportsAt\": \"1983-03-30T08:58:45.980Z\",\n    \"notifyOnSuccess\": true,\n    \"notifyOnWarning\": false,\n    \"notifyOnFailure\": true,\n    \"notifyOnLastRetry\": false\n  },\n  \"notifications\": {\n    \"storageSpaceThresholdEnabled\": false,\n    \"storageSpaceThreshold\": -84564856,\n    \"datastoreSpaceThresholdEnabled\": true,\n    \"datastoreSpaceThreshold\": -82988834,\n    \"skipVMSpaceThresholdEnabled\": false,\n    \"skipVMSpaceThreshold\": 93152047,\n    \"notifyOnSupportExpiration\": false,\n    \"notifyOnUpdates\": true\n  }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{baseUrl}}/api/v1/generalOptions"
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
										},
										{
											"name": "Forbidden. The user sending the request does not have adequate privileges to access one or more objects specified in the request.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													},
													{
														"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
														"key": "x-api-version",
														"value": "1.0-rev1"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"emailSettings\": {\n    \"isEnabled\": true,\n    \"smtpServerName\": \"laboris\",\n    \"advancedSmtpOptions\": {\n      \"port\": -4104865,\n      \"timeoutMs\": 55458754,\n      \"SSLEnabled\": true,\n      \"authRequred\": true,\n      \"credentialsId\": \"dbcc0531-28da-928e-107d-63461ea3fb09\"\n    },\n    \"from\": \"exercitation nostrud labore sit aute\",\n    \"to\": \"ullamco\",\n    \"subject\": \"culpa aliqua ipsum mollit\",\n    \"sendDailyReportsAt\": \"1983-03-30T08:58:45.980Z\",\n    \"notifyOnSuccess\": true,\n    \"notifyOnWarning\": false,\n    \"notifyOnFailure\": true,\n    \"notifyOnLastRetry\": false\n  },\n  \"notifications\": {\n    \"storageSpaceThresholdEnabled\": false,\n    \"storageSpaceThreshold\": -84564856,\n    \"datastoreSpaceThresholdEnabled\": true,\n    \"datastoreSpaceThreshold\": -82988834,\n    \"skipVMSpaceThresholdEnabled\": false,\n    \"skipVMSpaceThreshold\": 93152047,\n    \"notifyOnSupportExpiration\": false,\n    \"notifyOnUpdates\": true\n  }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{baseUrl}}/api/v1/generalOptions"
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
										},
										{
											"name": "Not found. No object was found with the path parameter specified in the request.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													},
													{
														"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
														"key": "x-api-version",
														"value": "1.0-rev1"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"emailSettings\": {\n    \"isEnabled\": true,\n    \"smtpServerName\": \"laboris\",\n    \"advancedSmtpOptions\": {\n      \"port\": -4104865,\n      \"timeoutMs\": 55458754,\n      \"SSLEnabled\": true,\n      \"authRequred\": true,\n      \"credentialsId\": \"dbcc0531-28da-928e-107d-63461ea3fb09\"\n    },\n    \"from\": \"exercitation nostrud labore sit aute\",\n    \"to\": \"ullamco\",\n    \"subject\": \"culpa aliqua ipsum mollit\",\n    \"sendDailyReportsAt\": \"1983-03-30T08:58:45.980Z\",\n    \"notifyOnSuccess\": true,\n    \"notifyOnWarning\": false,\n    \"notifyOnFailure\": true,\n    \"notifyOnLastRetry\": false\n  },\n  \"notifications\": {\n    \"storageSpaceThresholdEnabled\": false,\n    \"storageSpaceThreshold\": -84564856,\n    \"datastoreSpaceThresholdEnabled\": true,\n    \"datastoreSpaceThreshold\": -82988834,\n    \"skipVMSpaceThresholdEnabled\": false,\n    \"skipVMSpaceThreshold\": 93152047,\n    \"notifyOnSupportExpiration\": false,\n    \"notifyOnUpdates\": true\n  }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{baseUrl}}/api/v1/generalOptions"
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
										},
										{
											"name": "Internal server error. The request has been received but could not be completed because of an internal error at the server side.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													},
													{
														"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
														"key": "x-api-version",
														"value": "1.0-rev1"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"emailSettings\": {\n    \"isEnabled\": true,\n    \"smtpServerName\": \"laboris\",\n    \"advancedSmtpOptions\": {\n      \"port\": -4104865,\n      \"timeoutMs\": 55458754,\n      \"SSLEnabled\": true,\n      \"authRequred\": true,\n      \"credentialsId\": \"dbcc0531-28da-928e-107d-63461ea3fb09\"\n    },\n    \"from\": \"exercitation nostrud labore sit aute\",\n    \"to\": \"ullamco\",\n    \"subject\": \"culpa aliqua ipsum mollit\",\n    \"sendDailyReportsAt\": \"1983-03-30T08:58:45.980Z\",\n    \"notifyOnSuccess\": true,\n    \"notifyOnWarning\": false,\n    \"notifyOnFailure\": true,\n    \"notifyOnLastRetry\": false\n  },\n  \"notifications\": {\n    \"storageSpaceThresholdEnabled\": false,\n    \"storageSpaceThreshold\": -84564856,\n    \"datastoreSpaceThresholdEnabled\": true,\n    \"datastoreSpaceThreshold\": -82988834,\n    \"skipVMSpaceThresholdEnabled\": false,\n    \"skipVMSpaceThreshold\": 93152047,\n    \"notifyOnSupportExpiration\": false,\n    \"notifyOnUpdates\": true\n  }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{baseUrl}}/api/v1/generalOptions"
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
										}
									]
								}
							]
						},
						{
							"name": "config Backup",
							"item": [
								{
									"name": "Get Configuration Backup",
									"request": {
										"method": "GET",
										"header": [
											{
												"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
												"key": "x-api-version",
												"value": "1.0-rev1"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": "{{baseUrl}}/api/v1/configBackup",
										"description": "The HTTP GET request to the `/api/v1/configBackup` path allows you to get configuration backup of the backup server."
									},
									"response": [
										{
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													},
													{
														"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
														"key": "x-api-version",
														"value": "1.0-rev1"
													}
												],
												"url": "https://your-address:9194/api/v1/configBackup"
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"isEnabled\": true,\n  \"backupRepositoryId\": \"urn:uuid:35c555cc-beb6-7f71-385f-81771aa8069f\",\n  \"restorePointsToKeep\": -8734664,\n  \"notifications\": {\n    \"SNMPEnabled\": false,\n    \"SMTPSettings\": {\n      \"isEnabled\": false,\n      \"recipients\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"settingsType\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"subject\": \"eiusmod aliqua\",\n      \"notifyOnSuccess\": false,\n      \"notifyOnWarning\": false,\n      \"notifyOnError\": true\n    }\n  },\n  \"schedule\": {\n    \"isEnabled\": true,\n    \"daily\": {\n      \"isEnabled\": true,\n      \"localTime\": \"09:56:34.181Z\",\n      \"dailyKind\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"days\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ]\n    },\n    \"monthly\": {\n      \"isEnabled\": false,\n      \"localTime\": \"17:58:20.045Z\",\n      \"dayOfWeek\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"dayNumberInMonth\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"dayOfMonth\": -41615181,\n      \"months\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ]\n    }\n  },\n  \"lastSuccessfulBackup\": {\n    \"lastSuccessfulTime\": \"1983-03-20T23:27:40.592Z\",\n    \"sessionId\": \"urn:uuid:6afd6a88-4391-d282-c579-3f41ea7ac509\"\n  },\n  \"encryption\": {\n    \"isEnabled\": true,\n    \"passwordId\": \"urn:uuid:455aeedb-6496-99dc-0b7c-cef2701147b5\"\n  }\n}"
										},
										{
											"name": "Unauthorized. The authorization header has been expected but not found (or found but is expired).",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													},
													{
														"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
														"key": "x-api-version",
														"value": "1.0-rev1"
													}
												],
												"url": "{{baseUrl}}/api/v1/configBackup"
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
										},
										{
											"name": "Forbidden. The user sending the request does not have adequate privileges to access one or more objects specified in the request.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													},
													{
														"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
														"key": "x-api-version",
														"value": "1.0-rev1"
													}
												],
												"url": "{{baseUrl}}/api/v1/configBackup"
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
										},
										{
											"name": "Not found. No object was found with the path parameter specified in the request.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													},
													{
														"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
														"key": "x-api-version",
														"value": "1.0-rev1"
													}
												],
												"url": "{{baseUrl}}/api/v1/configBackup"
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
										},
										{
											"name": "Internal server error. The request has been received but could not be completed because of an internal error at the server side.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													},
													{
														"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
														"key": "x-api-version",
														"value": "1.0-rev1"
													}
												],
												"url": "{{baseUrl}}/api/v1/configBackup"
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
										}
									]
								},
								{
									"name": "Edit Configuration Backup",
									"request": {
										"method": "PUT",
										"header": [
											{
												"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
												"key": "x-api-version",
												"value": "1.0-rev1"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"isEnabled\": true,\n  \"backupRepositoryId\": \"urn:uuid:35c555cc-beb6-7f71-385f-81771aa8069f\",\n  \"restorePointsToKeep\": -8734664,\n  \"notifications\": {\n    \"SNMPEnabled\": false,\n    \"SMTPSettings\": {\n      \"isEnabled\": false,\n      \"recipients\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"settingsType\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"subject\": \"eiusmod aliqua\",\n      \"notifyOnSuccess\": false,\n      \"notifyOnWarning\": false,\n      \"notifyOnError\": true\n    }\n  },\n  \"schedule\": {\n    \"isEnabled\": true,\n    \"daily\": {\n      \"isEnabled\": true,\n      \"localTime\": \"09:56:34.181Z\",\n      \"dailyKind\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"days\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ]\n    },\n    \"monthly\": {\n      \"isEnabled\": false,\n      \"localTime\": \"17:58:20.045Z\",\n      \"dayOfWeek\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"dayNumberInMonth\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"dayOfMonth\": -41615181,\n      \"months\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ]\n    }\n  },\n  \"lastSuccessfulBackup\": {\n    \"lastSuccessfulTime\": \"1983-03-20T23:27:40.592Z\",\n    \"sessionId\": \"urn:uuid:6afd6a88-4391-d282-c579-3f41ea7ac509\"\n  },\n  \"encryption\": {\n    \"isEnabled\": true,\n    \"passwordId\": \"urn:uuid:455aeedb-6496-99dc-0b7c-cef2701147b5\"\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{baseUrl}}/api/v1/configBackup",
										"description": "The HTTP PUT request to the `/api/v1/configBackup` path allows you to edit configuration backup of the backup server."
									},
									"response": [
										{
											"name": "Configuration backup settings have been updated.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													},
													{
														"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
														"key": "x-api-version",
														"value": "1.0-rev1"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"isEnabled\": true,\n  \"backupRepositoryId\": \"urn:uuid:35c555cc-beb6-7f71-385f-81771aa8069f\",\n  \"restorePointsToKeep\": -8734664,\n  \"notifications\": {\n    \"SNMPEnabled\": false,\n    \"SMTPSettings\": {\n      \"isEnabled\": false,\n      \"recipients\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"settingsType\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"subject\": \"eiusmod aliqua\",\n      \"notifyOnSuccess\": false,\n      \"notifyOnWarning\": false,\n      \"notifyOnError\": true\n    }\n  },\n  \"schedule\": {\n    \"isEnabled\": true,\n    \"daily\": {\n      \"isEnabled\": true,\n      \"localTime\": \"09:56:34.181Z\",\n      \"dailyKind\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"days\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ]\n    },\n    \"monthly\": {\n      \"isEnabled\": false,\n      \"localTime\": \"17:58:20.045Z\",\n      \"dayOfWeek\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"dayNumberInMonth\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"dayOfMonth\": -41615181,\n      \"months\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ]\n    }\n  },\n  \"lastSuccessfulBackup\": {\n    \"lastSuccessfulTime\": \"1983-03-20T23:27:40.592Z\",\n    \"sessionId\": \"urn:uuid:6afd6a88-4391-d282-c579-3f41ea7ac509\"\n  },\n  \"encryption\": {\n    \"isEnabled\": true,\n    \"passwordId\": \"urn:uuid:455aeedb-6496-99dc-0b7c-cef2701147b5\"\n  }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{baseUrl}}/api/v1/configBackup"
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"isEnabled\": true,\n  \"backupRepositoryId\": \"urn:uuid:35c555cc-beb6-7f71-385f-81771aa8069f\",\n  \"restorePointsToKeep\": -8734664,\n  \"notifications\": {\n    \"SNMPEnabled\": false,\n    \"SMTPSettings\": {\n      \"isEnabled\": false,\n      \"recipients\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"settingsType\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"subject\": \"eiusmod aliqua\",\n      \"notifyOnSuccess\": false,\n      \"notifyOnWarning\": false,\n      \"notifyOnError\": true\n    }\n  },\n  \"schedule\": {\n    \"isEnabled\": true,\n    \"daily\": {\n      \"isEnabled\": true,\n      \"localTime\": \"09:56:34.181Z\",\n      \"dailyKind\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"days\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ]\n    },\n    \"monthly\": {\n      \"isEnabled\": false,\n      \"localTime\": \"17:58:20.045Z\",\n      \"dayOfWeek\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"dayNumberInMonth\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"dayOfMonth\": -41615181,\n      \"months\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ]\n    }\n  },\n  \"lastSuccessfulBackup\": {\n    \"lastSuccessfulTime\": \"1983-03-20T23:27:40.592Z\",\n    \"sessionId\": \"urn:uuid:6afd6a88-4391-d282-c579-3f41ea7ac509\"\n  },\n  \"encryption\": {\n    \"isEnabled\": true,\n    \"passwordId\": \"urn:uuid:455aeedb-6496-99dc-0b7c-cef2701147b5\"\n  }\n}"
										},
										{
											"name": "Bad request. This error is related to POST/PUT requests. The request body is malformed, incomplete or otherwise invalid.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													},
													{
														"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
														"key": "x-api-version",
														"value": "1.0-rev1"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"isEnabled\": true,\n  \"backupRepositoryId\": \"urn:uuid:35c555cc-beb6-7f71-385f-81771aa8069f\",\n  \"restorePointsToKeep\": -8734664,\n  \"notifications\": {\n    \"SNMPEnabled\": false,\n    \"SMTPSettings\": {\n      \"isEnabled\": false,\n      \"recipients\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"settingsType\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"subject\": \"eiusmod aliqua\",\n      \"notifyOnSuccess\": false,\n      \"notifyOnWarning\": false,\n      \"notifyOnError\": true\n    }\n  },\n  \"schedule\": {\n    \"isEnabled\": true,\n    \"daily\": {\n      \"isEnabled\": true,\n      \"localTime\": \"09:56:34.181Z\",\n      \"dailyKind\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"days\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ]\n    },\n    \"monthly\": {\n      \"isEnabled\": false,\n      \"localTime\": \"17:58:20.045Z\",\n      \"dayOfWeek\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"dayNumberInMonth\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"dayOfMonth\": -41615181,\n      \"months\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ]\n    }\n  },\n  \"lastSuccessfulBackup\": {\n    \"lastSuccessfulTime\": \"1983-03-20T23:27:40.592Z\",\n    \"sessionId\": \"urn:uuid:6afd6a88-4391-d282-c579-3f41ea7ac509\"\n  },\n  \"encryption\": {\n    \"isEnabled\": true,\n    \"passwordId\": \"urn:uuid:455aeedb-6496-99dc-0b7c-cef2701147b5\"\n  }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{baseUrl}}/api/v1/configBackup"
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
										},
										{
											"name": "Unauthorized. The authorization header has been expected but not found (or found but is expired).",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													},
													{
														"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
														"key": "x-api-version",
														"value": "1.0-rev1"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"isEnabled\": true,\n  \"backupRepositoryId\": \"urn:uuid:35c555cc-beb6-7f71-385f-81771aa8069f\",\n  \"restorePointsToKeep\": -8734664,\n  \"notifications\": {\n    \"SNMPEnabled\": false,\n    \"SMTPSettings\": {\n      \"isEnabled\": false,\n      \"recipients\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"settingsType\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"subject\": \"eiusmod aliqua\",\n      \"notifyOnSuccess\": false,\n      \"notifyOnWarning\": false,\n      \"notifyOnError\": true\n    }\n  },\n  \"schedule\": {\n    \"isEnabled\": true,\n    \"daily\": {\n      \"isEnabled\": true,\n      \"localTime\": \"09:56:34.181Z\",\n      \"dailyKind\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"days\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ]\n    },\n    \"monthly\": {\n      \"isEnabled\": false,\n      \"localTime\": \"17:58:20.045Z\",\n      \"dayOfWeek\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"dayNumberInMonth\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"dayOfMonth\": -41615181,\n      \"months\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ]\n    }\n  },\n  \"lastSuccessfulBackup\": {\n    \"lastSuccessfulTime\": \"1983-03-20T23:27:40.592Z\",\n    \"sessionId\": \"urn:uuid:6afd6a88-4391-d282-c579-3f41ea7ac509\"\n  },\n  \"encryption\": {\n    \"isEnabled\": true,\n    \"passwordId\": \"urn:uuid:455aeedb-6496-99dc-0b7c-cef2701147b5\"\n  }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{baseUrl}}/api/v1/configBackup"
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
										},
										{
											"name": "Forbidden. The user sending the request does not have adequate privileges to access one or more objects specified in the request.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													},
													{
														"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
														"key": "x-api-version",
														"value": "1.0-rev1"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"isEnabled\": true,\n  \"backupRepositoryId\": \"urn:uuid:35c555cc-beb6-7f71-385f-81771aa8069f\",\n  \"restorePointsToKeep\": -8734664,\n  \"notifications\": {\n    \"SNMPEnabled\": false,\n    \"SMTPSettings\": {\n      \"isEnabled\": false,\n      \"recipients\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"settingsType\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"subject\": \"eiusmod aliqua\",\n      \"notifyOnSuccess\": false,\n      \"notifyOnWarning\": false,\n      \"notifyOnError\": true\n    }\n  },\n  \"schedule\": {\n    \"isEnabled\": true,\n    \"daily\": {\n      \"isEnabled\": true,\n      \"localTime\": \"09:56:34.181Z\",\n      \"dailyKind\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"days\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ]\n    },\n    \"monthly\": {\n      \"isEnabled\": false,\n      \"localTime\": \"17:58:20.045Z\",\n      \"dayOfWeek\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"dayNumberInMonth\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"dayOfMonth\": -41615181,\n      \"months\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ]\n    }\n  },\n  \"lastSuccessfulBackup\": {\n    \"lastSuccessfulTime\": \"1983-03-20T23:27:40.592Z\",\n    \"sessionId\": \"urn:uuid:6afd6a88-4391-d282-c579-3f41ea7ac509\"\n  },\n  \"encryption\": {\n    \"isEnabled\": true,\n    \"passwordId\": \"urn:uuid:455aeedb-6496-99dc-0b7c-cef2701147b5\"\n  }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{baseUrl}}/api/v1/configBackup"
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
										},
										{
											"name": "Not found. No object was found with the path parameter specified in the request.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													},
													{
														"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
														"key": "x-api-version",
														"value": "1.0-rev1"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"isEnabled\": true,\n  \"backupRepositoryId\": \"urn:uuid:35c555cc-beb6-7f71-385f-81771aa8069f\",\n  \"restorePointsToKeep\": -8734664,\n  \"notifications\": {\n    \"SNMPEnabled\": false,\n    \"SMTPSettings\": {\n      \"isEnabled\": false,\n      \"recipients\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"settingsType\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"subject\": \"eiusmod aliqua\",\n      \"notifyOnSuccess\": false,\n      \"notifyOnWarning\": false,\n      \"notifyOnError\": true\n    }\n  },\n  \"schedule\": {\n    \"isEnabled\": true,\n    \"daily\": {\n      \"isEnabled\": true,\n      \"localTime\": \"09:56:34.181Z\",\n      \"dailyKind\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"days\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ]\n    },\n    \"monthly\": {\n      \"isEnabled\": false,\n      \"localTime\": \"17:58:20.045Z\",\n      \"dayOfWeek\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"dayNumberInMonth\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"dayOfMonth\": -41615181,\n      \"months\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ]\n    }\n  },\n  \"lastSuccessfulBackup\": {\n    \"lastSuccessfulTime\": \"1983-03-20T23:27:40.592Z\",\n    \"sessionId\": \"urn:uuid:6afd6a88-4391-d282-c579-3f41ea7ac509\"\n  },\n  \"encryption\": {\n    \"isEnabled\": true,\n    \"passwordId\": \"urn:uuid:455aeedb-6496-99dc-0b7c-cef2701147b5\"\n  }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{baseUrl}}/api/v1/configBackup"
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
										},
										{
											"name": "Internal server error. The request has been received but could not be completed because of an internal error at the server side.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													},
													{
														"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
														"key": "x-api-version",
														"value": "1.0-rev1"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"isEnabled\": true,\n  \"backupRepositoryId\": \"urn:uuid:35c555cc-beb6-7f71-385f-81771aa8069f\",\n  \"restorePointsToKeep\": -8734664,\n  \"notifications\": {\n    \"SNMPEnabled\": false,\n    \"SMTPSettings\": {\n      \"isEnabled\": false,\n      \"recipients\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"settingsType\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"subject\": \"eiusmod aliqua\",\n      \"notifyOnSuccess\": false,\n      \"notifyOnWarning\": false,\n      \"notifyOnError\": true\n    }\n  },\n  \"schedule\": {\n    \"isEnabled\": true,\n    \"daily\": {\n      \"isEnabled\": true,\n      \"localTime\": \"09:56:34.181Z\",\n      \"dailyKind\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"days\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ]\n    },\n    \"monthly\": {\n      \"isEnabled\": false,\n      \"localTime\": \"17:58:20.045Z\",\n      \"dayOfWeek\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"dayNumberInMonth\": {\n        \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n      },\n      \"dayOfMonth\": -41615181,\n      \"months\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ]\n    }\n  },\n  \"lastSuccessfulBackup\": {\n    \"lastSuccessfulTime\": \"1983-03-20T23:27:40.592Z\",\n    \"sessionId\": \"urn:uuid:6afd6a88-4391-d282-c579-3f41ea7ac509\"\n  },\n  \"encryption\": {\n    \"isEnabled\": true,\n    \"passwordId\": \"urn:uuid:455aeedb-6496-99dc-0b7c-cef2701147b5\"\n  }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{baseUrl}}/api/v1/configBackup"
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
										}
									]
								},
								{
									"name": "Start Configuration Backup",
									"request": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
												"key": "x-api-version",
												"value": "1.0-rev1"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": "{{baseUrl}}/api/v1/configBackup/backup",
										"description": "The HTTP POST request to the `/api/v1/configBackup` path allows you to start configuration backup."
									},
									"response": [
										{
											"name": "Configuration backup has been started.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													},
													{
														"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
														"key": "x-api-version",
														"value": "1.0-rev1"
													}
												],
												"url": "{{baseUrl}}/api/v1/configBackup/backup"
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"activityId\": \"urn:uuid:ff04bc79-41c7-abe9-79b9-32b72d0d8ebe\",\n  \"creationTime\": \"1976-08-31T07:10:18.372Z\",\n  \"id\": \"6b97bae8-5d34-c1c8-6373-25234a7b2678\",\n  \"name\": \"Ut pariatur do commodo\",\n  \"sessionType\": \"Automation\",\n  \"state\": \"Starting\",\n  \"usn\": -68197960,\n  \"endTime\": \"1998-06-07T18:50:39.738Z\",\n  \"progressPercent\": -52750286,\n  \"result\": {\n    \"result\": \"None\",\n    \"message\": \"deserunt commodo eu\",\n    \"isCanceled\": true\n  },\n  \"resourceId\": \"af28d036-9436-ab07-5749-6bc82423562b\",\n  \"resourceReference\": \"Ut\",\n  \"parentSessionId\": \"urn:uuid:017adbc7-e2d7-b332-dd71-9fa6701d99bb\"\n}"
										},
										{
											"name": "Bad request. This error is related to POST/PUT requests. The request body is malformed, incomplete or otherwise invalid.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													},
													{
														"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
														"key": "x-api-version",
														"value": "1.0-rev1"
													}
												],
												"url": "{{baseUrl}}/api/v1/configBackup/backup"
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
										},
										{
											"name": "Unauthorized. The authorization header has been expected but not found (or found but is expired).",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													},
													{
														"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
														"key": "x-api-version",
														"value": "1.0-rev1"
													}
												],
												"url": "{{baseUrl}}/api/v1/configBackup/backup"
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
										},
										{
											"name": "Forbidden. The user sending the request does not have adequate privileges to access one or more objects specified in the request.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													},
													{
														"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
														"key": "x-api-version",
														"value": "1.0-rev1"
													}
												],
												"url": "{{baseUrl}}/api/v1/configBackup/backup"
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
										},
										{
											"name": "Internal server error. The request has been received but could not be completed because of an internal error at the server side.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													},
													{
														"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
														"key": "x-api-version",
														"value": "1.0-rev1"
													}
												],
												"url": "{{baseUrl}}/api/v1/configBackup/backup"
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
										}
									]
								}
							]
						},
						{
							"name": "sessions",
							"item": [
								{
									"name": "{id}",
									"item": [
										{
											"name": "Get Session",
											"request": {
												"method": "GET",
												"header": [
													{
														"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
														"key": "x-api-version",
														"value": "1.0-rev1"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v1/sessions/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"sessions",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
															"description": "(Required) ID of the session."
														}
													]
												},
												"description": "The HTTP GET request to the `/api/v1/sessions/{id}` path allows you to get a session that has the specified `id`."
											},
											"response": [
												{
													"name": "OK",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v1/sessions/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"sessions",
																":id"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																	"description": "(Required) ID of the session."
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"activityId\": \"urn:uuid:ff04bc79-41c7-abe9-79b9-32b72d0d8ebe\",\n  \"creationTime\": \"1976-08-31T07:10:18.372Z\",\n  \"id\": \"6b97bae8-5d34-c1c8-6373-25234a7b2678\",\n  \"name\": \"Ut pariatur do commodo\",\n  \"sessionType\": \"Automation\",\n  \"state\": \"Starting\",\n  \"usn\": -68197960,\n  \"endTime\": \"1998-06-07T18:50:39.738Z\",\n  \"progressPercent\": -52750286,\n  \"result\": {\n    \"result\": \"None\",\n    \"message\": \"deserunt commodo eu\",\n    \"isCanceled\": true\n  },\n  \"resourceId\": \"af28d036-9436-ab07-5749-6bc82423562b\",\n  \"resourceReference\": \"Ut\",\n  \"parentSessionId\": \"urn:uuid:017adbc7-e2d7-b332-dd71-9fa6701d99bb\"\n}"
												},
												{
													"name": "Unauthorized. The authorization header has been expected but not found (or found but is expired).",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v1/sessions/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"sessions",
																":id"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																	"description": "(Required) ID of the session."
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												},
												{
													"name": "Forbidden. The user sending the request does not have adequate privileges to access one or more objects specified in the request.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v1/sessions/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"sessions",
																":id"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																	"description": "(Required) ID of the session."
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												},
												{
													"name": "Not found. No object was found with the path parameter specified in the request.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v1/sessions/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"sessions",
																":id"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																	"description": "(Required) ID of the session."
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												},
												{
													"name": "Internal server error. The request has been received but could not be completed because of an internal error at the server side.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v1/sessions/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"sessions",
																":id"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																	"description": "(Required) ID of the session."
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												}
											]
										},
										{
											"name": "Get Session Logs",
											"request": {
												"method": "GET",
												"header": [
													{
														"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
														"key": "x-api-version",
														"value": "1.0-rev1"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v1/sessions/:id/logs",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"sessions",
														":id",
														"logs"
													],
													"variable": [
														{
															"key": "id",
															"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
															"description": "(Required) ID of the session."
														}
													]
												},
												"description": "The HTTP GET request to the `/api/v1/sessions/{id}/logs` path allows you to get an array of log records of a session that has the specified `id`."
											},
											"response": [
												{
													"name": "OK",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v1/sessions/:id/logs",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"sessions",
																":id",
																"logs"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																	"description": "(Required) ID of the session."
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"totalRecords\": 67846836,\n  \"records\": [\n    {\n      \"id\": 66415051,\n      \"status\": \"None\",\n      \"startTime\": \"1951-12-08T13:14:29.231Z\",\n      \"updateTime\": \"1953-01-08T22:30:54.131Z\",\n      \"title\": \"sunt id pariatur consequat magna\",\n      \"description\": \"cons\"\n    },\n    {\n      \"id\": 61204178,\n      \"status\": \"Warning\",\n      \"startTime\": \"1965-05-30T19:48:12.684Z\",\n      \"updateTime\": \"1984-02-03T17:02:45.327Z\",\n      \"title\": \"nisi ut in Excepteur\",\n      \"description\": \"mollit pariatur ut ullamco enim\"\n    }\n  ]\n}"
												},
												{
													"name": "Unauthorized. The authorization header has been expected but not found (or found but is expired).",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v1/sessions/:id/logs",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"sessions",
																":id",
																"logs"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																	"description": "(Required) ID of the session."
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												},
												{
													"name": "Forbidden. The user sending the request does not have adequate privileges to access one or more objects specified in the request.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v1/sessions/:id/logs",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"sessions",
																":id",
																"logs"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																	"description": "(Required) ID of the session."
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												},
												{
													"name": "Not found. No object was found with the path parameter specified in the request.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v1/sessions/:id/logs",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"sessions",
																":id",
																"logs"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																	"description": "(Required) ID of the session."
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												},
												{
													"name": "Internal server error. The request has been received but could not be completed because of an internal error at the server side.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v1/sessions/:id/logs",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"sessions",
																":id",
																"logs"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																	"description": "(Required) ID of the session."
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												}
											]
										},
										{
											"name": "Stop Session",
											"request": {
												"method": "POST",
												"header": [
													{
														"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
														"key": "x-api-version",
														"value": "1.0-rev1"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v1/sessions/:id/stop",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"sessions",
														":id",
														"stop"
													],
													"variable": [
														{
															"key": "id",
															"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
															"description": "(Required) ID of the session."
														}
													]
												},
												"description": "The HTTP POST request to the `/api/v1/sessions/{id}/stop` path allows you to stop a session that has the specified `id`."
											},
											"response": [
												{
													"name": "OK",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v1/sessions/:id/stop",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"sessions",
																":id",
																"stop"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																	"description": "(Required) ID of the session."
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{}"
												},
												{
													"name": "Unauthorized. The authorization header has been expected but not found (or found but is expired).",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v1/sessions/:id/stop",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"sessions",
																":id",
																"stop"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																	"description": "(Required) ID of the session."
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												},
												{
													"name": "Forbidden. The user sending the request does not have adequate privileges to access one or more objects specified in the request.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v1/sessions/:id/stop",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"sessions",
																":id",
																"stop"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																	"description": "(Required) ID of the session."
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												},
												{
													"name": "Not found. No object was found with the path parameter specified in the request.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v1/sessions/:id/stop",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"sessions",
																":id",
																"stop"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																	"description": "(Required) ID of the session."
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												},
												{
													"name": "Internal server error. The request has been received but could not be completed because of an internal error at the server side.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v1/sessions/:id/stop",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"sessions",
																":id",
																"stop"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																	"description": "(Required) ID of the session."
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												}
											]
										}
									]
								},
								{
									"name": "Get All Sessions",
									"request": {
										"method": "GET",
										"header": [
											{
												"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
												"key": "x-api-version",
												"value": "1.0-rev1"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v1/sessions?skip=-10937892&limit=-10937892&orderColumn=CreationTime&orderAsc=true&nameFilter=irure in officia laborum&createdAfterFilter=1949-09-09T09:22:16.570Z&createdBeforeFilter=1949-09-09T09:22:16.570Z&endedAfterFilter=1949-09-09T09:22:16.570Z&endedBeforeFilter=1949-09-09T09:22:16.570Z&typeFilter=ConfigurationBackup&stateFilter=Working&resultFilter=Warning&jobIdFilter=urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"sessions"
											],
											"query": [
												{
													"key": "skip",
													"value": "-10937892",
													"description": "Number of sessions to skip."
												},
												{
													"key": "limit",
													"value": "-10937892",
													"description": "Maximum number of sessions to return."
												},
												{
													"key": "orderColumn",
													"value": "CreationTime",
													"description": "Sorts sessions by one of the session parameters."
												},
												{
													"key": "orderAsc",
													"value": "true",
													"description": "Sorts sessions in the ascending order by the `orderColumn` parameter."
												},
												{
													"key": "nameFilter",
													"value": "irure in officia laborum",
													"description": "Filters sessions by the `nameFilter` pattern. The pattern can match any session parameter. To substitute one or more characters, use the asterisk (*) character at the beginning and/or at the end."
												},
												{
													"key": "createdAfterFilter",
													"value": "1949-09-09T09:22:16.570Z",
													"description": "Returns sessions that are created after the specified date and time."
												},
												{
													"key": "createdBeforeFilter",
													"value": "1949-09-09T09:22:16.570Z",
													"description": "Returns sessions that are created before the specified date and time."
												},
												{
													"key": "endedAfterFilter",
													"value": "1949-09-09T09:22:16.570Z",
													"description": "Returns sessions that are finished after the specified date and time."
												},
												{
													"key": "endedBeforeFilter",
													"value": "1949-09-09T09:22:16.570Z",
													"description": "Returns sessions that are finished before the specified date and time."
												},
												{
													"key": "typeFilter",
													"value": "ConfigurationBackup",
													"description": "Filters sessions by session type."
												},
												{
													"key": "stateFilter",
													"value": "Working",
													"description": "Filters sessions by session state."
												},
												{
													"key": "resultFilter",
													"value": "Warning",
													"description": "Filters sessions by session result."
												},
												{
													"key": "jobIdFilter",
													"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
													"description": "Filters sessions by job ID."
												}
											]
										},
										"description": "The HTTP GET request to the `/api/v1/sessions` path allows you to get an array of sessions performed on the backup server."
									},
									"response": [
										{
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													},
													{
														"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
														"key": "x-api-version",
														"value": "1.0-rev1"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v1/sessions?skip=-10937892&limit=-10937892&orderColumn=CreationTime&orderAsc=true&nameFilter=irure in officia laborum&createdAfterFilter=1949-09-09T09:22:16.570Z&createdBeforeFilter=1949-09-09T09:22:16.570Z&endedAfterFilter=1949-09-09T09:22:16.570Z&endedBeforeFilter=1949-09-09T09:22:16.570Z&typeFilter=ConfigurationBackup&stateFilter=Working&resultFilter=Warning&jobIdFilter=urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"sessions"
													],
													"query": [
														{
															"key": "skip",
															"value": "-10937892"
														},
														{
															"key": "limit",
															"value": "-10937892"
														},
														{
															"key": "orderColumn",
															"value": "CreationTime"
														},
														{
															"key": "orderAsc",
															"value": "true"
														},
														{
															"key": "nameFilter",
															"value": "irure in officia laborum"
														},
														{
															"key": "createdAfterFilter",
															"value": "1949-09-09T09:22:16.570Z"
														},
														{
															"key": "createdBeforeFilter",
															"value": "1949-09-09T09:22:16.570Z"
														},
														{
															"key": "endedAfterFilter",
															"value": "1949-09-09T09:22:16.570Z"
														},
														{
															"key": "endedBeforeFilter",
															"value": "1949-09-09T09:22:16.570Z"
														},
														{
															"key": "typeFilter",
															"value": "ConfigurationBackup"
														},
														{
															"key": "stateFilter",
															"value": "Working"
														},
														{
															"key": "resultFilter",
															"value": "Warning"
														},
														{
															"key": "jobIdFilter",
															"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"data\": [\n    {\n      \"activityId\": \"bbd39828-7992-8968-5fc5-8ecce20c0ef2\",\n      \"creationTime\": \"1983-01-16T23:36:35.167Z\",\n      \"id\": \"urn:uuid:006b2a79-19b7-ed27-3e48-c2838b78bb17\",\n      \"name\": \"commodo enim\",\n      \"sessionType\": \"RepositoryMaintenance\",\n      \"state\": \"WaitingRepository\",\n      \"usn\": -8440030,\n      \"endTime\": \"1992-04-09T06:21:37.115Z\",\n      \"progressPercent\": 22303473,\n      \"result\": {\n        \"result\": \"Warning\",\n        \"message\": \"dolor sit\",\n        \"isCanceled\": false\n      },\n      \"resourceId\": \"fb2deb11-3c63-f9ea-a3e7-e9efcef90e62\",\n      \"resourceReference\": \"cupidatat id ad laborum\",\n      \"parentSessionId\": \"urn:uuid:a6145cae-c0fc-255a-321d-153aab2fbc64\"\n    },\n    {\n      \"activityId\": \"urn:uuid:67c6b6a6-0afd-c34b-a90d-77670453792d\",\n      \"creationTime\": \"1987-01-15T09:06:56.111Z\",\n      \"id\": \"urn:uuid:b8d2d9fa-df86-8955-ca7f-52c599d4f64c\",\n      \"name\": \"d\",\n      \"sessionType\": \"RepositoryEvacuate\",\n      \"state\": \"WaitingTape\",\n      \"usn\": 72602832,\n      \"endTime\": \"1982-06-04T05:18:12.846Z\",\n      \"progressPercent\": -7973224,\n      \"result\": {\n        \"result\": \"Warning\",\n        \"message\": \"irure\",\n        \"isCanceled\": true\n      },\n      \"resourceId\": \"urn:uuid:4c1705a5-eb9a-9391-ed17-fc1e00a9eadc\",\n      \"resourceReference\": \"adipisicing\",\n      \"parentSessionId\": \"urn:uuid:262778b3-79c2-b972-eaae-c3c8f31936db\"\n    }\n  ],\n  \"pagination\": {\n    \"total\": -58035494,\n    \"count\": -84888144,\n    \"skip\": -22675618,\n    \"limit\": 34077016\n  }\n}"
										},
										{
											"name": "Unauthorized. The authorization header has been expected but not found (or found but is expired).",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													},
													{
														"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
														"key": "x-api-version",
														"value": "1.0-rev1"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v1/sessions?skip=-10937892&limit=-10937892&orderColumn=CreationTime&orderAsc=true&nameFilter=irure in officia laborum&createdAfterFilter=1949-09-09T09:22:16.570Z&createdBeforeFilter=1949-09-09T09:22:16.570Z&endedAfterFilter=1949-09-09T09:22:16.570Z&endedBeforeFilter=1949-09-09T09:22:16.570Z&typeFilter=ConfigurationBackup&stateFilter=Working&resultFilter=Warning&jobIdFilter=urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"sessions"
													],
													"query": [
														{
															"key": "skip",
															"value": "-10937892"
														},
														{
															"key": "limit",
															"value": "-10937892"
														},
														{
															"key": "orderColumn",
															"value": "CreationTime"
														},
														{
															"key": "orderAsc",
															"value": "true"
														},
														{
															"key": "nameFilter",
															"value": "irure in officia laborum"
														},
														{
															"key": "createdAfterFilter",
															"value": "1949-09-09T09:22:16.570Z"
														},
														{
															"key": "createdBeforeFilter",
															"value": "1949-09-09T09:22:16.570Z"
														},
														{
															"key": "endedAfterFilter",
															"value": "1949-09-09T09:22:16.570Z"
														},
														{
															"key": "endedBeforeFilter",
															"value": "1949-09-09T09:22:16.570Z"
														},
														{
															"key": "typeFilter",
															"value": "ConfigurationBackup"
														},
														{
															"key": "stateFilter",
															"value": "Working"
														},
														{
															"key": "resultFilter",
															"value": "Warning"
														},
														{
															"key": "jobIdFilter",
															"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
										},
										{
											"name": "Forbidden. The user sending the request does not have adequate privileges to access one or more objects specified in the request.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													},
													{
														"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
														"key": "x-api-version",
														"value": "1.0-rev1"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v1/sessions?skip=-10937892&limit=-10937892&orderColumn=CreationTime&orderAsc=true&nameFilter=irure in officia laborum&createdAfterFilter=1949-09-09T09:22:16.570Z&createdBeforeFilter=1949-09-09T09:22:16.570Z&endedAfterFilter=1949-09-09T09:22:16.570Z&endedBeforeFilter=1949-09-09T09:22:16.570Z&typeFilter=ConfigurationBackup&stateFilter=Working&resultFilter=Warning&jobIdFilter=urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"sessions"
													],
													"query": [
														{
															"key": "skip",
															"value": "-10937892"
														},
														{
															"key": "limit",
															"value": "-10937892"
														},
														{
															"key": "orderColumn",
															"value": "CreationTime"
														},
														{
															"key": "orderAsc",
															"value": "true"
														},
														{
															"key": "nameFilter",
															"value": "irure in officia laborum"
														},
														{
															"key": "createdAfterFilter",
															"value": "1949-09-09T09:22:16.570Z"
														},
														{
															"key": "createdBeforeFilter",
															"value": "1949-09-09T09:22:16.570Z"
														},
														{
															"key": "endedAfterFilter",
															"value": "1949-09-09T09:22:16.570Z"
														},
														{
															"key": "endedBeforeFilter",
															"value": "1949-09-09T09:22:16.570Z"
														},
														{
															"key": "typeFilter",
															"value": "ConfigurationBackup"
														},
														{
															"key": "stateFilter",
															"value": "Working"
														},
														{
															"key": "resultFilter",
															"value": "Warning"
														},
														{
															"key": "jobIdFilter",
															"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
										},
										{
											"name": "Internal server error. The request has been received but could not be completed because of an internal error at the server side.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													},
													{
														"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
														"key": "x-api-version",
														"value": "1.0-rev1"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v1/sessions?skip=-10937892&limit=-10937892&orderColumn=CreationTime&orderAsc=true&nameFilter=irure in officia laborum&createdAfterFilter=1949-09-09T09:22:16.570Z&createdBeforeFilter=1949-09-09T09:22:16.570Z&endedAfterFilter=1949-09-09T09:22:16.570Z&endedBeforeFilter=1949-09-09T09:22:16.570Z&typeFilter=ConfigurationBackup&stateFilter=Working&resultFilter=Warning&jobIdFilter=urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"sessions"
													],
													"query": [
														{
															"key": "skip",
															"value": "-10937892"
														},
														{
															"key": "limit",
															"value": "-10937892"
														},
														{
															"key": "orderColumn",
															"value": "CreationTime"
														},
														{
															"key": "orderAsc",
															"value": "true"
														},
														{
															"key": "nameFilter",
															"value": "irure in officia laborum"
														},
														{
															"key": "createdAfterFilter",
															"value": "1949-09-09T09:22:16.570Z"
														},
														{
															"key": "createdBeforeFilter",
															"value": "1949-09-09T09:22:16.570Z"
														},
														{
															"key": "endedAfterFilter",
															"value": "1949-09-09T09:22:16.570Z"
														},
														{
															"key": "endedBeforeFilter",
															"value": "1949-09-09T09:22:16.570Z"
														},
														{
															"key": "typeFilter",
															"value": "ConfigurationBackup"
														},
														{
															"key": "stateFilter",
															"value": "Working"
														},
														{
															"key": "resultFilter",
															"value": "Warning"
														},
														{
															"key": "jobIdFilter",
															"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
										}
									]
								}
							]
						},
						{
							"name": "inventory/vmware/hosts",
							"item": [
								{
									"name": "Get All VMware vSphere Servers",
									"request": {
										"method": "GET",
										"header": [
											{
												"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
												"key": "x-api-version",
												"value": "1.0-rev1"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v1/inventory/vmware/hosts?skip=-10937892&limit=-10937892&orderColumn=Type&orderAsc=true&nameFilter=irure in officia laborum",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"inventory",
												"vmware",
												"hosts"
											],
											"query": [
												{
													"key": "skip",
													"value": "-10937892",
													"description": "Number of VMware vSphere servers to skip."
												},
												{
													"key": "limit",
													"value": "-10937892",
													"description": "Maximum number of VMware vSphere servers to return."
												},
												{
													"key": "orderColumn",
													"value": "Type",
													"description": "Sorts VMware vSphere servers by one of the VMware vSphere server parameters."
												},
												{
													"key": "orderAsc",
													"value": "true",
													"description": "Sorts VMware vSphere servers in the ascending order by the `orderColumn` parameter."
												},
												{
													"key": "nameFilter",
													"value": "irure in officia laborum",
													"description": "Filters VMware vSphere servers by the `nameFilter` pattern. The pattern can match any VMware vSphere server parameter. To substitute one or more characters, use the asterisk (*) character at the beginning and/or at the end."
												}
											]
										},
										"description": "The HTTP GET request to the `/api/v1/inventory/vmware/hosts` path allows you to get an array of all VMware vSphere servers added to the backup infrastructure."
									},
									"response": [
										{
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													},
													{
														"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
														"key": "x-api-version",
														"value": "1.0-rev1"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v1/inventory/vmware/hosts?skip=-10937892&limit=-10937892&orderColumn=Type&orderAsc=true&nameFilter=irure in officia laborum",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"inventory",
														"vmware",
														"hosts"
													],
													"query": [
														{
															"key": "skip",
															"value": "-10937892"
														},
														{
															"key": "limit",
															"value": "-10937892"
														},
														{
															"key": "orderColumn",
															"value": "Type"
														},
														{
															"key": "orderAsc",
															"value": "true"
														},
														{
															"key": "nameFilter",
															"value": "irure in officia laborum"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"data\": [\n    {\n      \"inventoryObject\": {\n        \"name\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"type\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"hostName\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"objectId\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"size\": \"proident consequat ut\"\n    },\n    {\n      \"inventoryObject\": {\n        \"name\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"type\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"hostName\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"objectId\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"size\": \"ad ut est aliquip\"\n    }\n  ],\n  \"pagination\": {\n    \"total\": -8058594,\n    \"count\": 24121423,\n    \"skip\": 57491594,\n    \"limit\": -91558715\n  }\n}"
										},
										{
											"name": "Unauthorized. The authorization header has been expected but not found (or found but is expired).",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													},
													{
														"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
														"key": "x-api-version",
														"value": "1.0-rev1"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v1/inventory/vmware/hosts?skip=-10937892&limit=-10937892&orderColumn=Type&orderAsc=true&nameFilter=irure in officia laborum",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"inventory",
														"vmware",
														"hosts"
													],
													"query": [
														{
															"key": "skip",
															"value": "-10937892"
														},
														{
															"key": "limit",
															"value": "-10937892"
														},
														{
															"key": "orderColumn",
															"value": "Type"
														},
														{
															"key": "orderAsc",
															"value": "true"
														},
														{
															"key": "nameFilter",
															"value": "irure in officia laborum"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
										},
										{
											"name": "Forbidden. The user sending the request does not have adequate privileges to access one or more objects specified in the request.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													},
													{
														"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
														"key": "x-api-version",
														"value": "1.0-rev1"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v1/inventory/vmware/hosts?skip=-10937892&limit=-10937892&orderColumn=Type&orderAsc=true&nameFilter=irure in officia laborum",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"inventory",
														"vmware",
														"hosts"
													],
													"query": [
														{
															"key": "skip",
															"value": "-10937892"
														},
														{
															"key": "limit",
															"value": "-10937892"
														},
														{
															"key": "orderColumn",
															"value": "Type"
														},
														{
															"key": "orderAsc",
															"value": "true"
														},
														{
															"key": "nameFilter",
															"value": "irure in officia laborum"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
										},
										{
											"name": "Internal server error. The request has been received but could not be completed because of an internal error at the server side.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													},
													{
														"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
														"key": "x-api-version",
														"value": "1.0-rev1"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v1/inventory/vmware/hosts?skip=-10937892&limit=-10937892&orderColumn=Type&orderAsc=true&nameFilter=irure in officia laborum",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"inventory",
														"vmware",
														"hosts"
													],
													"query": [
														{
															"key": "skip",
															"value": "-10937892"
														},
														{
															"key": "limit",
															"value": "-10937892"
														},
														{
															"key": "orderColumn",
															"value": "Type"
														},
														{
															"key": "orderAsc",
															"value": "true"
														},
														{
															"key": "nameFilter",
															"value": "irure in officia laborum"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
										}
									]
								},
								{
									"name": "Get VMware vSphere Server Objects",
									"request": {
										"method": "GET",
										"header": [
											{
												"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
												"key": "x-api-version",
												"value": "1.0-rev1"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v1/inventory/vmware/hosts/:name?skip=-10937892&limit=-10937892&orderColumn=ObjectId&orderAsc=true&objectIdFilter=irure in officia laborum&hierarchyTypeFilter=VmsAndTags&nameFilter=irure in officia laborum&typeFilter=Tag&parentContainerNameFilter=irure in officia laborum",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"inventory",
												"vmware",
												"hosts",
												":name"
											],
											"query": [
												{
													"key": "skip",
													"value": "-10937892",
													"description": "Number of objects to skip."
												},
												{
													"key": "limit",
													"value": "-10937892",
													"description": "Maximum number of objects to return."
												},
												{
													"key": "orderColumn",
													"value": "ObjectId",
													"description": "Sorts objects by one of the object parameters."
												},
												{
													"key": "orderAsc",
													"value": "true",
													"description": "Sorts objects in the ascending order by the `orderColumn` parameter."
												},
												{
													"key": "objectIdFilter",
													"value": "irure in officia laborum",
													"description": "Filters objects by object ID."
												},
												{
													"key": "hierarchyTypeFilter",
													"value": "VmsAndTags",
													"description": "Filters objects by hierarchy type."
												},
												{
													"key": "nameFilter",
													"value": "irure in officia laborum",
													"description": "Filters objects by the `nameFilter` pattern. The pattern can match any object parameter. To substitute one or more characters, use the asterisk (*) character at the beginning and/or at the end."
												},
												{
													"key": "typeFilter",
													"value": "Tag",
													"description": "Filters objects by virtual infrastructure type."
												},
												{
													"key": "parentContainerNameFilter",
													"value": "irure in officia laborum",
													"description": "Filters objects by name of the parent container."
												}
											],
											"variable": [
												{
													"key": "name",
													"value": "irure in officia laborum",
													"description": "(Required) Name of the VMware vSphere server."
												}
											]
										},
										"description": "The HTTP GET request to the `/api/v1/inventory/vmware/hosts/{name}` path allows you to get an array of virtual infrastructure objects of the VMware vSphere server that has the specified `name`."
									},
									"response": [
										{
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													},
													{
														"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
														"key": "x-api-version",
														"value": "1.0-rev1"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v1/inventory/vmware/hosts/:name?skip=-10937892&limit=-10937892&orderColumn=ObjectId&orderAsc=true&objectIdFilter=irure in officia laborum&hierarchyTypeFilter=VmsAndTags&nameFilter=irure in officia laborum&typeFilter=Tag&parentContainerNameFilter=irure in officia laborum",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"inventory",
														"vmware",
														"hosts",
														":name"
													],
													"query": [
														{
															"key": "skip",
															"value": "-10937892"
														},
														{
															"key": "limit",
															"value": "-10937892"
														},
														{
															"key": "orderColumn",
															"value": "ObjectId"
														},
														{
															"key": "orderAsc",
															"value": "true"
														},
														{
															"key": "objectIdFilter",
															"value": "irure in officia laborum"
														},
														{
															"key": "hierarchyTypeFilter",
															"value": "VmsAndTags"
														},
														{
															"key": "nameFilter",
															"value": "irure in officia laborum"
														},
														{
															"key": "typeFilter",
															"value": "Tag"
														},
														{
															"key": "parentContainerNameFilter",
															"value": "irure in officia laborum"
														}
													],
													"variable": [
														{
															"key": "name",
															"value": "irure in officia laborum",
															"description": "(Required) Name of the VMware vSphere server."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"data\": [\n    {\n      \"inventoryObject\": {\n        \"name\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"type\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"hostName\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"objectId\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"size\": \"nostrud velit veniam\"\n    },\n    {\n      \"inventoryObject\": {\n        \"name\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"type\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"hostName\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"objectId\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"size\": \"sed nisi culpa\"\n    }\n  ],\n  \"pagination\": {\n    \"total\": -78955480,\n    \"count\": 98603331,\n    \"skip\": 42077454,\n    \"limit\": -12280456\n  }\n}"
										},
										{
											"name": "Unauthorized. The authorization header has been expected but not found (or found but is expired).",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													},
													{
														"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
														"key": "x-api-version",
														"value": "1.0-rev1"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v1/inventory/vmware/hosts/:name?skip=-10937892&limit=-10937892&orderColumn=ObjectId&orderAsc=true&objectIdFilter=irure in officia laborum&hierarchyTypeFilter=VmsAndTags&nameFilter=irure in officia laborum&typeFilter=Tag&parentContainerNameFilter=irure in officia laborum",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"inventory",
														"vmware",
														"hosts",
														":name"
													],
													"query": [
														{
															"key": "skip",
															"value": "-10937892"
														},
														{
															"key": "limit",
															"value": "-10937892"
														},
														{
															"key": "orderColumn",
															"value": "ObjectId"
														},
														{
															"key": "orderAsc",
															"value": "true"
														},
														{
															"key": "objectIdFilter",
															"value": "irure in officia laborum"
														},
														{
															"key": "hierarchyTypeFilter",
															"value": "VmsAndTags"
														},
														{
															"key": "nameFilter",
															"value": "irure in officia laborum"
														},
														{
															"key": "typeFilter",
															"value": "Tag"
														},
														{
															"key": "parentContainerNameFilter",
															"value": "irure in officia laborum"
														}
													],
													"variable": [
														{
															"key": "name",
															"value": "irure in officia laborum",
															"description": "(Required) Name of the VMware vSphere server."
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
										},
										{
											"name": "Forbidden. The user sending the request does not have adequate privileges to access one or more objects specified in the request.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													},
													{
														"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
														"key": "x-api-version",
														"value": "1.0-rev1"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v1/inventory/vmware/hosts/:name?skip=-10937892&limit=-10937892&orderColumn=ObjectId&orderAsc=true&objectIdFilter=irure in officia laborum&hierarchyTypeFilter=VmsAndTags&nameFilter=irure in officia laborum&typeFilter=Tag&parentContainerNameFilter=irure in officia laborum",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"inventory",
														"vmware",
														"hosts",
														":name"
													],
													"query": [
														{
															"key": "skip",
															"value": "-10937892"
														},
														{
															"key": "limit",
															"value": "-10937892"
														},
														{
															"key": "orderColumn",
															"value": "ObjectId"
														},
														{
															"key": "orderAsc",
															"value": "true"
														},
														{
															"key": "objectIdFilter",
															"value": "irure in officia laborum"
														},
														{
															"key": "hierarchyTypeFilter",
															"value": "VmsAndTags"
														},
														{
															"key": "nameFilter",
															"value": "irure in officia laborum"
														},
														{
															"key": "typeFilter",
															"value": "Tag"
														},
														{
															"key": "parentContainerNameFilter",
															"value": "irure in officia laborum"
														}
													],
													"variable": [
														{
															"key": "name",
															"value": "irure in officia laborum",
															"description": "(Required) Name of the VMware vSphere server."
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
										},
										{
											"name": "Not found. No object was found with the path parameter specified in the request.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													},
													{
														"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
														"key": "x-api-version",
														"value": "1.0-rev1"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v1/inventory/vmware/hosts/:name?skip=-10937892&limit=-10937892&orderColumn=ObjectId&orderAsc=true&objectIdFilter=irure in officia laborum&hierarchyTypeFilter=VmsAndTags&nameFilter=irure in officia laborum&typeFilter=Tag&parentContainerNameFilter=irure in officia laborum",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"inventory",
														"vmware",
														"hosts",
														":name"
													],
													"query": [
														{
															"key": "skip",
															"value": "-10937892"
														},
														{
															"key": "limit",
															"value": "-10937892"
														},
														{
															"key": "orderColumn",
															"value": "ObjectId"
														},
														{
															"key": "orderAsc",
															"value": "true"
														},
														{
															"key": "objectIdFilter",
															"value": "irure in officia laborum"
														},
														{
															"key": "hierarchyTypeFilter",
															"value": "VmsAndTags"
														},
														{
															"key": "nameFilter",
															"value": "irure in officia laborum"
														},
														{
															"key": "typeFilter",
															"value": "Tag"
														},
														{
															"key": "parentContainerNameFilter",
															"value": "irure in officia laborum"
														}
													],
													"variable": [
														{
															"key": "name",
															"value": "irure in officia laborum",
															"description": "(Required) Name of the VMware vSphere server."
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
										},
										{
											"name": "Internal server error. The request has been received but could not be completed because of an internal error at the server side.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													},
													{
														"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
														"key": "x-api-version",
														"value": "1.0-rev1"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v1/inventory/vmware/hosts/:name?skip=-10937892&limit=-10937892&orderColumn=ObjectId&orderAsc=true&objectIdFilter=irure in officia laborum&hierarchyTypeFilter=VmsAndTags&nameFilter=irure in officia laborum&typeFilter=Tag&parentContainerNameFilter=irure in officia laborum",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"inventory",
														"vmware",
														"hosts",
														":name"
													],
													"query": [
														{
															"key": "skip",
															"value": "-10937892"
														},
														{
															"key": "limit",
															"value": "-10937892"
														},
														{
															"key": "orderColumn",
															"value": "ObjectId"
														},
														{
															"key": "orderAsc",
															"value": "true"
														},
														{
															"key": "objectIdFilter",
															"value": "irure in officia laborum"
														},
														{
															"key": "hierarchyTypeFilter",
															"value": "VmsAndTags"
														},
														{
															"key": "nameFilter",
															"value": "irure in officia laborum"
														},
														{
															"key": "typeFilter",
															"value": "Tag"
														},
														{
															"key": "parentContainerNameFilter",
															"value": "irure in officia laborum"
														}
													],
													"variable": [
														{
															"key": "name",
															"value": "irure in officia laborum",
															"description": "(Required) Name of the VMware vSphere server."
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
										}
									]
								}
							]
						},
						{
							"name": "backup Infrastructure",
							"item": [
								{
									"name": "managed Servers",
									"item": [
										{
											"name": "{id}",
											"item": [
												{
													"name": "Get Server",
													"request": {
														"method": "GET",
														"header": [
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v1/backupInfrastructure/managedServers/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"backupInfrastructure",
																"managedServers",
																":id"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																	"description": "(Required) ID of the managed server."
																}
															]
														},
														"description": "The HTTP GET request to the `/api/v1/backupInfrastructure/managedServers/{id}` path allows you to get a managed server that has the specified `id`."
													},
													"response": [
														{
															"name": "OK",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"description": "Added as a part of security scheme: apikey",
																		"key": "Authorization",
																		"value": "<API Key>"
																	},
																	{
																		"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																		"key": "x-api-version",
																		"value": "1.0-rev1"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/v1/backupInfrastructure/managedServers/:id",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v1",
																		"backupInfrastructure",
																		"managedServers",
																		":id"
																	],
																	"variable": [
																		{
																			"key": "id",
																			"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																			"description": "(Required) ID of the managed server."
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"networkSettings\": {\n    \"components\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"portRangeStart\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"portRangeEnd\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"serverThisSide\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  }\n}"
														},
														{
															"name": "Unauthorized. The authorization header has been expected but not found (or found but is expired).",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"description": "Added as a part of security scheme: apikey",
																		"key": "Authorization",
																		"value": "<API Key>"
																	},
																	{
																		"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																		"key": "x-api-version",
																		"value": "1.0-rev1"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/v1/backupInfrastructure/managedServers/:id",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v1",
																		"backupInfrastructure",
																		"managedServers",
																		":id"
																	],
																	"variable": [
																		{
																			"key": "id",
																			"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																			"description": "(Required) ID of the managed server."
																		}
																	]
																}
															},
															"status": "Unauthorized",
															"code": 401,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
														},
														{
															"name": "Forbidden. The user sending the request does not have adequate privileges to access one or more objects specified in the request.",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"description": "Added as a part of security scheme: apikey",
																		"key": "Authorization",
																		"value": "<API Key>"
																	},
																	{
																		"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																		"key": "x-api-version",
																		"value": "1.0-rev1"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/v1/backupInfrastructure/managedServers/:id",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v1",
																		"backupInfrastructure",
																		"managedServers",
																		":id"
																	],
																	"variable": [
																		{
																			"key": "id",
																			"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																			"description": "(Required) ID of the managed server."
																		}
																	]
																}
															},
															"status": "Forbidden",
															"code": 403,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
														},
														{
															"name": "Not found. No object was found with the path parameter specified in the request.",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"description": "Added as a part of security scheme: apikey",
																		"key": "Authorization",
																		"value": "<API Key>"
																	},
																	{
																		"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																		"key": "x-api-version",
																		"value": "1.0-rev1"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/v1/backupInfrastructure/managedServers/:id",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v1",
																		"backupInfrastructure",
																		"managedServers",
																		":id"
																	],
																	"variable": [
																		{
																			"key": "id",
																			"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																			"description": "(Required) ID of the managed server."
																		}
																	]
																}
															},
															"status": "Not Found",
															"code": 404,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
														},
														{
															"name": "Internal server error. The request has been received but could not be completed because of an internal error at the server side.",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"description": "Added as a part of security scheme: apikey",
																		"key": "Authorization",
																		"value": "<API Key>"
																	},
																	{
																		"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																		"key": "x-api-version",
																		"value": "1.0-rev1"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/v1/backupInfrastructure/managedServers/:id",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v1",
																		"backupInfrastructure",
																		"managedServers",
																		":id"
																	],
																	"variable": [
																		{
																			"key": "id",
																			"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																			"description": "(Required) ID of the managed server."
																		}
																	]
																}
															},
															"status": "Internal Server Error",
															"code": 500,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
														}
													]
												},
												{
													"name": "Edit Server",
													"request": {
														"method": "PUT",
														"header": [
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															},
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"networkSettings\": {\n    \"components\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"portRangeStart\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"portRangeEnd\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"serverThisSide\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/v1/backupInfrastructure/managedServers/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"backupInfrastructure",
																"managedServers",
																":id"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																	"description": "(Required) ID of the managed server."
																}
															]
														},
														"description": "The HTTP PUT request to the `/api/v1/backupInfrastructure/managedServers/{id}` path allows you to edit a managed server that has the specified `id`."
													},
													"response": [
														{
															"name": "Infrastructure session has been created to edit the server. To check the progress, track the session `state`.",
															"originalRequest": {
																"method": "PUT",
																"header": [
																	{
																		"description": "Added as a part of security scheme: apikey",
																		"key": "Authorization",
																		"value": "<API Key>"
																	},
																	{
																		"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																		"key": "x-api-version",
																		"value": "1.0-rev1"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"networkSettings\": {\n    \"components\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"portRangeStart\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"portRangeEnd\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"serverThisSide\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  }\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/api/v1/backupInfrastructure/managedServers/:id",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v1",
																		"backupInfrastructure",
																		"managedServers",
																		":id"
																	],
																	"variable": [
																		{
																			"key": "id",
																			"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																			"description": "(Required) ID of the managed server."
																		}
																	]
																}
															},
															"status": "Created",
															"code": 201,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"activityId\": \"urn:uuid:ff04bc79-41c7-abe9-79b9-32b72d0d8ebe\",\n  \"creationTime\": \"1976-08-31T07:10:18.372Z\",\n  \"id\": \"6b97bae8-5d34-c1c8-6373-25234a7b2678\",\n  \"name\": \"Ut pariatur do commodo\",\n  \"sessionType\": \"Automation\",\n  \"state\": \"Starting\",\n  \"usn\": -68197960,\n  \"endTime\": \"1998-06-07T18:50:39.738Z\",\n  \"progressPercent\": -52750286,\n  \"result\": {\n    \"result\": \"None\",\n    \"message\": \"deserunt commodo eu\",\n    \"isCanceled\": true\n  },\n  \"resourceId\": \"af28d036-9436-ab07-5749-6bc82423562b\",\n  \"resourceReference\": \"Ut\",\n  \"parentSessionId\": \"urn:uuid:017adbc7-e2d7-b332-dd71-9fa6701d99bb\"\n}"
														},
														{
															"name": "Bad request. This error is related to POST/PUT requests. The request body is malformed, incomplete or otherwise invalid.",
															"originalRequest": {
																"method": "PUT",
																"header": [
																	{
																		"description": "Added as a part of security scheme: apikey",
																		"key": "Authorization",
																		"value": "<API Key>"
																	},
																	{
																		"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																		"key": "x-api-version",
																		"value": "1.0-rev1"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"networkSettings\": {\n    \"components\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"portRangeStart\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"portRangeEnd\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"serverThisSide\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  }\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/api/v1/backupInfrastructure/managedServers/:id",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v1",
																		"backupInfrastructure",
																		"managedServers",
																		":id"
																	],
																	"variable": [
																		{
																			"key": "id",
																			"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																			"description": "(Required) ID of the managed server."
																		}
																	]
																}
															},
															"status": "Bad Request",
															"code": 400,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
														},
														{
															"name": "Unauthorized. The authorization header has been expected but not found (or found but is expired).",
															"originalRequest": {
																"method": "PUT",
																"header": [
																	{
																		"description": "Added as a part of security scheme: apikey",
																		"key": "Authorization",
																		"value": "<API Key>"
																	},
																	{
																		"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																		"key": "x-api-version",
																		"value": "1.0-rev1"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"networkSettings\": {\n    \"components\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"portRangeStart\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"portRangeEnd\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"serverThisSide\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  }\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/api/v1/backupInfrastructure/managedServers/:id",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v1",
																		"backupInfrastructure",
																		"managedServers",
																		":id"
																	],
																	"variable": [
																		{
																			"key": "id",
																			"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																			"description": "(Required) ID of the managed server."
																		}
																	]
																}
															},
															"status": "Unauthorized",
															"code": 401,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
														},
														{
															"name": "Forbidden. The user sending the request does not have adequate privileges to access one or more objects specified in the request.",
															"originalRequest": {
																"method": "PUT",
																"header": [
																	{
																		"description": "Added as a part of security scheme: apikey",
																		"key": "Authorization",
																		"value": "<API Key>"
																	},
																	{
																		"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																		"key": "x-api-version",
																		"value": "1.0-rev1"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"networkSettings\": {\n    \"components\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"portRangeStart\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"portRangeEnd\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"serverThisSide\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  }\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/api/v1/backupInfrastructure/managedServers/:id",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v1",
																		"backupInfrastructure",
																		"managedServers",
																		":id"
																	],
																	"variable": [
																		{
																			"key": "id",
																			"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																			"description": "(Required) ID of the managed server."
																		}
																	]
																}
															},
															"status": "Forbidden",
															"code": 403,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
														},
														{
															"name": "Not found. No object was found with the path parameter specified in the request.",
															"originalRequest": {
																"method": "PUT",
																"header": [
																	{
																		"description": "Added as a part of security scheme: apikey",
																		"key": "Authorization",
																		"value": "<API Key>"
																	},
																	{
																		"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																		"key": "x-api-version",
																		"value": "1.0-rev1"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"networkSettings\": {\n    \"components\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"portRangeStart\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"portRangeEnd\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"serverThisSide\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  }\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/api/v1/backupInfrastructure/managedServers/:id",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v1",
																		"backupInfrastructure",
																		"managedServers",
																		":id"
																	],
																	"variable": [
																		{
																			"key": "id",
																			"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																			"description": "(Required) ID of the managed server."
																		}
																	]
																}
															},
															"status": "Not Found",
															"code": 404,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
														},
														{
															"name": "Internal server error. The request has been received but could not be completed because of an internal error at the server side.",
															"originalRequest": {
																"method": "PUT",
																"header": [
																	{
																		"description": "Added as a part of security scheme: apikey",
																		"key": "Authorization",
																		"value": "<API Key>"
																	},
																	{
																		"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																		"key": "x-api-version",
																		"value": "1.0-rev1"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"networkSettings\": {\n    \"components\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"portRangeStart\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"portRangeEnd\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"serverThisSide\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  }\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/api/v1/backupInfrastructure/managedServers/:id",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v1",
																		"backupInfrastructure",
																		"managedServers",
																		":id"
																	],
																	"variable": [
																		{
																			"key": "id",
																			"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																			"description": "(Required) ID of the managed server."
																		}
																	]
																}
															},
															"status": "Internal Server Error",
															"code": 500,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
														}
													]
												},
												{
													"name": "Remove Server",
													"request": {
														"method": "DELETE",
														"header": [
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v1/backupInfrastructure/managedServers/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"backupInfrastructure",
																"managedServers",
																":id"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																	"description": "(Required) ID of the managed server."
																}
															]
														},
														"description": "The HTTP DELETE request to the `/api/v1/backupInfrastructure/managedServers/{id}` path allows you to remove a managed server that has the specified `id` from the backup infrastructure."
													},
													"response": [
														{
															"name": "Managed server has been removed.",
															"originalRequest": {
																"method": "DELETE",
																"header": [
																	{
																		"description": "Added as a part of security scheme: apikey",
																		"key": "Authorization",
																		"value": "<API Key>"
																	},
																	{
																		"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																		"key": "x-api-version",
																		"value": "1.0-rev1"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/v1/backupInfrastructure/managedServers/:id",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v1",
																		"backupInfrastructure",
																		"managedServers",
																		":id"
																	],
																	"variable": [
																		{
																			"key": "id",
																			"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																			"description": "(Required) ID of the managed server."
																		}
																	]
																}
															},
															"status": "Created",
															"code": 201,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"activityId\": \"urn:uuid:ff04bc79-41c7-abe9-79b9-32b72d0d8ebe\",\n  \"creationTime\": \"1976-08-31T07:10:18.372Z\",\n  \"id\": \"6b97bae8-5d34-c1c8-6373-25234a7b2678\",\n  \"name\": \"Ut pariatur do commodo\",\n  \"sessionType\": \"Automation\",\n  \"state\": \"Starting\",\n  \"usn\": -68197960,\n  \"endTime\": \"1998-06-07T18:50:39.738Z\",\n  \"progressPercent\": -52750286,\n  \"result\": {\n    \"result\": \"None\",\n    \"message\": \"deserunt commodo eu\",\n    \"isCanceled\": true\n  },\n  \"resourceId\": \"af28d036-9436-ab07-5749-6bc82423562b\",\n  \"resourceReference\": \"Ut\",\n  \"parentSessionId\": \"urn:uuid:017adbc7-e2d7-b332-dd71-9fa6701d99bb\"\n}"
														},
														{
															"name": "Unauthorized. The authorization header has been expected but not found (or found but is expired).",
															"originalRequest": {
																"method": "DELETE",
																"header": [
																	{
																		"description": "Added as a part of security scheme: apikey",
																		"key": "Authorization",
																		"value": "<API Key>"
																	},
																	{
																		"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																		"key": "x-api-version",
																		"value": "1.0-rev1"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/v1/backupInfrastructure/managedServers/:id",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v1",
																		"backupInfrastructure",
																		"managedServers",
																		":id"
																	],
																	"variable": [
																		{
																			"key": "id",
																			"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																			"description": "(Required) ID of the managed server."
																		}
																	]
																}
															},
															"status": "Unauthorized",
															"code": 401,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
														},
														{
															"name": "Forbidden. The user sending the request does not have adequate privileges to access one or more objects specified in the request.",
															"originalRequest": {
																"method": "DELETE",
																"header": [
																	{
																		"description": "Added as a part of security scheme: apikey",
																		"key": "Authorization",
																		"value": "<API Key>"
																	},
																	{
																		"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																		"key": "x-api-version",
																		"value": "1.0-rev1"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/v1/backupInfrastructure/managedServers/:id",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v1",
																		"backupInfrastructure",
																		"managedServers",
																		":id"
																	],
																	"variable": [
																		{
																			"key": "id",
																			"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																			"description": "(Required) ID of the managed server."
																		}
																	]
																}
															},
															"status": "Forbidden",
															"code": 403,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
														},
														{
															"name": "Not found. No object was found with the path parameter specified in the request.",
															"originalRequest": {
																"method": "DELETE",
																"header": [
																	{
																		"description": "Added as a part of security scheme: apikey",
																		"key": "Authorization",
																		"value": "<API Key>"
																	},
																	{
																		"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																		"key": "x-api-version",
																		"value": "1.0-rev1"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/v1/backupInfrastructure/managedServers/:id",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v1",
																		"backupInfrastructure",
																		"managedServers",
																		":id"
																	],
																	"variable": [
																		{
																			"key": "id",
																			"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																			"description": "(Required) ID of the managed server."
																		}
																	]
																}
															},
															"status": "Not Found",
															"code": 404,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
														},
														{
															"name": "Internal server error. The request has been received but could not be completed because of an internal error at the server side.",
															"originalRequest": {
																"method": "DELETE",
																"header": [
																	{
																		"description": "Added as a part of security scheme: apikey",
																		"key": "Authorization",
																		"value": "<API Key>"
																	},
																	{
																		"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																		"key": "x-api-version",
																		"value": "1.0-rev1"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/v1/backupInfrastructure/managedServers/:id",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v1",
																		"backupInfrastructure",
																		"managedServers",
																		":id"
																	],
																	"variable": [
																		{
																			"key": "id",
																			"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																			"description": "(Required) ID of the managed server."
																		}
																	]
																}
															},
															"status": "Internal Server Error",
															"code": 500,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
														}
													]
												}
											]
										},
										{
											"name": "Get All Servers",
											"request": {
												"method": "GET",
												"header": [
													{
														"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
														"key": "x-api-version",
														"value": "1.0-rev1"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v1/backupInfrastructure/managedServers?skip=-10937892&limit=-10937892&orderColumn=Type&orderAsc=true&nameFilter=irure in officia laborum&typeFilter=LinuxHost&viTypeFilter=ESX",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"backupInfrastructure",
														"managedServers"
													],
													"query": [
														{
															"key": "skip",
															"value": "-10937892",
															"description": "Number of servers to skip."
														},
														{
															"key": "limit",
															"value": "-10937892",
															"description": "Maximum number of servers to return."
														},
														{
															"key": "orderColumn",
															"value": "Type",
															"description": "Sorts servers by one of the server parameters."
														},
														{
															"key": "orderAsc",
															"value": "true",
															"description": "Sorts servers in the ascending order by the `orderColumn` parameter."
														},
														{
															"key": "nameFilter",
															"value": "irure in officia laborum",
															"description": "Filters servers by the `nameFilter` pattern. The pattern can match any server parameter. To substitute one or more characters, use the asterisk (*) character at the beginning and/or at the end."
														},
														{
															"key": "typeFilter",
															"value": "LinuxHost",
															"description": "Filters servers by server type."
														},
														{
															"key": "viTypeFilter",
															"value": "ESX",
															"description": "Filters servers by the type of VMware vSphere server."
														}
													]
												},
												"description": "The HTTP GET request to the `/api/v1/backupInfrastructure/managedServers` path allows you to get an array of all servers that are added to the backup infrastructure."
											},
											"response": [
												{
													"name": "OK",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v1/backupInfrastructure/managedServers?skip=-10937892&limit=-10937892&orderColumn=Type&orderAsc=true&nameFilter=irure in officia laborum&typeFilter=LinuxHost&viTypeFilter=ESX",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"backupInfrastructure",
																"managedServers"
															],
															"query": [
																{
																	"key": "skip",
																	"value": "-10937892"
																},
																{
																	"key": "limit",
																	"value": "-10937892"
																},
																{
																	"key": "orderColumn",
																	"value": "Type"
																},
																{
																	"key": "orderAsc",
																	"value": "true"
																},
																{
																	"key": "nameFilter",
																	"value": "irure in officia laborum"
																},
																{
																	"key": "typeFilter",
																	"value": "LinuxHost"
																},
																{
																	"key": "viTypeFilter",
																	"value": "ESX"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"data\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"pagination\": {\n    \"total\": -12142348,\n    \"count\": 60245863,\n    \"skip\": -19084571,\n    \"limit\": 25174697\n  }\n}"
												},
												{
													"name": "Unauthorized. The authorization header has been expected but not found (or found but is expired).",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v1/backupInfrastructure/managedServers?skip=-10937892&limit=-10937892&orderColumn=Type&orderAsc=true&nameFilter=irure in officia laborum&typeFilter=LinuxHost&viTypeFilter=ESX",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"backupInfrastructure",
																"managedServers"
															],
															"query": [
																{
																	"key": "skip",
																	"value": "-10937892"
																},
																{
																	"key": "limit",
																	"value": "-10937892"
																},
																{
																	"key": "orderColumn",
																	"value": "Type"
																},
																{
																	"key": "orderAsc",
																	"value": "true"
																},
																{
																	"key": "nameFilter",
																	"value": "irure in officia laborum"
																},
																{
																	"key": "typeFilter",
																	"value": "LinuxHost"
																},
																{
																	"key": "viTypeFilter",
																	"value": "ESX"
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												},
												{
													"name": "Forbidden. The user sending the request does not have adequate privileges to access one or more objects specified in the request.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v1/backupInfrastructure/managedServers?skip=-10937892&limit=-10937892&orderColumn=Type&orderAsc=true&nameFilter=irure in officia laborum&typeFilter=LinuxHost&viTypeFilter=ESX",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"backupInfrastructure",
																"managedServers"
															],
															"query": [
																{
																	"key": "skip",
																	"value": "-10937892"
																},
																{
																	"key": "limit",
																	"value": "-10937892"
																},
																{
																	"key": "orderColumn",
																	"value": "Type"
																},
																{
																	"key": "orderAsc",
																	"value": "true"
																},
																{
																	"key": "nameFilter",
																	"value": "irure in officia laborum"
																},
																{
																	"key": "typeFilter",
																	"value": "LinuxHost"
																},
																{
																	"key": "viTypeFilter",
																	"value": "ESX"
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												},
												{
													"name": "Internal server error. The request has been received but could not be completed because of an internal error at the server side.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v1/backupInfrastructure/managedServers?skip=-10937892&limit=-10937892&orderColumn=Type&orderAsc=true&nameFilter=irure in officia laborum&typeFilter=LinuxHost&viTypeFilter=ESX",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"backupInfrastructure",
																"managedServers"
															],
															"query": [
																{
																	"key": "skip",
																	"value": "-10937892"
																},
																{
																	"key": "limit",
																	"value": "-10937892"
																},
																{
																	"key": "orderColumn",
																	"value": "Type"
																},
																{
																	"key": "orderAsc",
																	"value": "true"
																},
																{
																	"key": "nameFilter",
																	"value": "irure in officia laborum"
																},
																{
																	"key": "typeFilter",
																	"value": "LinuxHost"
																},
																{
																	"key": "viTypeFilter",
																	"value": "ESX"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												}
											]
										},
										{
											"name": "Add Server",
											"request": {
												"method": "POST",
												"header": [
													{
														"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
														"key": "x-api-version",
														"value": "1.0-rev1"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"networkSettings\": {\n    \"components\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"portRangeStart\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"portRangeEnd\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"serverThisSide\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{baseUrl}}/api/v1/backupInfrastructure/managedServers",
												"description": "The HTTP POST request to the `/api/v1/backupInfrastructure/managedServers` path allows you to add a server to the backup infrastructure."
											},
											"response": [
												{
													"name": "Infrastructure session has been created to add the server. To check the progress, track the session `state`.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"networkSettings\": {\n    \"components\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"portRangeStart\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"portRangeEnd\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"serverThisSide\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": "{{baseUrl}}/api/v1/backupInfrastructure/managedServers"
													},
													"status": "Created",
													"code": 201,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"activityId\": \"urn:uuid:ff04bc79-41c7-abe9-79b9-32b72d0d8ebe\",\n  \"creationTime\": \"1976-08-31T07:10:18.372Z\",\n  \"id\": \"6b97bae8-5d34-c1c8-6373-25234a7b2678\",\n  \"name\": \"Ut pariatur do commodo\",\n  \"sessionType\": \"Automation\",\n  \"state\": \"Starting\",\n  \"usn\": -68197960,\n  \"endTime\": \"1998-06-07T18:50:39.738Z\",\n  \"progressPercent\": -52750286,\n  \"result\": {\n    \"result\": \"None\",\n    \"message\": \"deserunt commodo eu\",\n    \"isCanceled\": true\n  },\n  \"resourceId\": \"af28d036-9436-ab07-5749-6bc82423562b\",\n  \"resourceReference\": \"Ut\",\n  \"parentSessionId\": \"urn:uuid:017adbc7-e2d7-b332-dd71-9fa6701d99bb\"\n}"
												},
												{
													"name": "Bad request. This error is related to POST/PUT requests. The request body is malformed, incomplete or otherwise invalid.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"networkSettings\": {\n    \"components\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"portRangeStart\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"portRangeEnd\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"serverThisSide\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": "{{baseUrl}}/api/v1/backupInfrastructure/managedServers"
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												},
												{
													"name": "Unauthorized. The authorization header has been expected but not found (or found but is expired).",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"networkSettings\": {\n    \"components\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"portRangeStart\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"portRangeEnd\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"serverThisSide\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": "{{baseUrl}}/api/v1/backupInfrastructure/managedServers"
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												},
												{
													"name": "Forbidden. The user sending the request does not have adequate privileges to access one or more objects specified in the request.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"networkSettings\": {\n    \"components\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"portRangeStart\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"portRangeEnd\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"serverThisSide\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": "{{baseUrl}}/api/v1/backupInfrastructure/managedServers"
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												},
												{
													"name": "Internal server error. The request has been received but could not be completed because of an internal error at the server side.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"networkSettings\": {\n    \"components\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"portRangeStart\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"portRangeEnd\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"serverThisSide\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": "{{baseUrl}}/api/v1/backupInfrastructure/managedServers"
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												}
											]
										}
									]
								},
								{
									"name": "repositories",
									"item": [
										{
											"name": "{id}",
											"item": [
												{
													"name": "Get Repository",
													"request": {
														"method": "GET",
														"header": [
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v1/backupInfrastructure/repositories/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"backupInfrastructure",
																"repositories",
																":id"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																	"description": "(Required) ID of the backup repository."
																}
															]
														},
														"description": "The HTTP GET request to the `/api/v1/backupInfrastructure/repositories/{id}` path allows you to get a backup repository that has the specified `id`."
													},
													"response": [
														{
															"name": "OK",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"description": "Added as a part of security scheme: apikey",
																		"key": "Authorization",
																		"value": "<API Key>"
																	},
																	{
																		"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																		"key": "x-api-version",
																		"value": "1.0-rev1"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/v1/backupInfrastructure/repositories/:id",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v1",
																		"backupInfrastructure",
																		"repositories",
																		":id"
																	],
																	"variable": [
																		{
																			"key": "id",
																			"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																			"description": "(Required) ID of the backup repository."
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"hostId\": \"71556780-b1c7-7913-7965-6a02d170ee93\",\n  \"mountServer\": {\n    \"mountServerId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"vPowerNFSEnabled\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"writeCacheFolder\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"vPowerNFSPortSettings\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  \"repository\": {\n    \"path\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"maxTaskCount\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"readWriteRate\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"advancedSettings\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  }\n}"
														},
														{
															"name": "Unauthorized. The authorization header has been expected but not found (or found but is expired).",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"description": "Added as a part of security scheme: apikey",
																		"key": "Authorization",
																		"value": "<API Key>"
																	},
																	{
																		"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																		"key": "x-api-version",
																		"value": "1.0-rev1"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/v1/backupInfrastructure/repositories/:id",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v1",
																		"backupInfrastructure",
																		"repositories",
																		":id"
																	],
																	"variable": [
																		{
																			"key": "id",
																			"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																			"description": "(Required) ID of the backup repository."
																		}
																	]
																}
															},
															"status": "Unauthorized",
															"code": 401,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
														},
														{
															"name": "Forbidden. The user sending the request does not have adequate privileges to access one or more objects specified in the request.",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"description": "Added as a part of security scheme: apikey",
																		"key": "Authorization",
																		"value": "<API Key>"
																	},
																	{
																		"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																		"key": "x-api-version",
																		"value": "1.0-rev1"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/v1/backupInfrastructure/repositories/:id",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v1",
																		"backupInfrastructure",
																		"repositories",
																		":id"
																	],
																	"variable": [
																		{
																			"key": "id",
																			"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																			"description": "(Required) ID of the backup repository."
																		}
																	]
																}
															},
															"status": "Forbidden",
															"code": 403,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
														},
														{
															"name": "Not found. No object was found with the path parameter specified in the request.",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"description": "Added as a part of security scheme: apikey",
																		"key": "Authorization",
																		"value": "<API Key>"
																	},
																	{
																		"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																		"key": "x-api-version",
																		"value": "1.0-rev1"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/v1/backupInfrastructure/repositories/:id",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v1",
																		"backupInfrastructure",
																		"repositories",
																		":id"
																	],
																	"variable": [
																		{
																			"key": "id",
																			"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																			"description": "(Required) ID of the backup repository."
																		}
																	]
																}
															},
															"status": "Not Found",
															"code": 404,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
														},
														{
															"name": "Internal server error. The request has been received but could not be completed because of an internal error at the server side.",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"description": "Added as a part of security scheme: apikey",
																		"key": "Authorization",
																		"value": "<API Key>"
																	},
																	{
																		"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																		"key": "x-api-version",
																		"value": "1.0-rev1"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/v1/backupInfrastructure/repositories/:id",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v1",
																		"backupInfrastructure",
																		"repositories",
																		":id"
																	],
																	"variable": [
																		{
																			"key": "id",
																			"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																			"description": "(Required) ID of the backup repository."
																		}
																	]
																}
															},
															"status": "Internal Server Error",
															"code": 500,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
														}
													]
												},
												{
													"name": "Edit Repository",
													"request": {
														"method": "PUT",
														"header": [
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															},
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"hostId\": \"71556780-b1c7-7913-7965-6a02d170ee93\",\n  \"mountServer\": {\n    \"mountServerId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"vPowerNFSEnabled\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"writeCacheFolder\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"vPowerNFSPortSettings\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  \"repository\": {\n    \"path\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"maxTaskCount\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"readWriteRate\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"advancedSettings\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/v1/backupInfrastructure/repositories/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"backupInfrastructure",
																"repositories",
																":id"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																	"description": "(Required) ID of the backup repository."
																}
															]
														},
														"description": "The HTTP PUT request to the `/api/v1/backupInfrastructure/repositories/{id}` path allows you to edit a backup repository that has the specified `id`."
													},
													"response": [
														{
															"name": "Infrastructure session has been created to edit the repository. To check the progress, track the session `state`.",
															"originalRequest": {
																"method": "PUT",
																"header": [
																	{
																		"description": "Added as a part of security scheme: apikey",
																		"key": "Authorization",
																		"value": "<API Key>"
																	},
																	{
																		"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																		"key": "x-api-version",
																		"value": "1.0-rev1"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"hostId\": \"71556780-b1c7-7913-7965-6a02d170ee93\",\n  \"mountServer\": {\n    \"mountServerId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"vPowerNFSEnabled\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"writeCacheFolder\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"vPowerNFSPortSettings\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  \"repository\": {\n    \"path\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"maxTaskCount\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"readWriteRate\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"advancedSettings\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  }\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/api/v1/backupInfrastructure/repositories/:id",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v1",
																		"backupInfrastructure",
																		"repositories",
																		":id"
																	],
																	"variable": [
																		{
																			"key": "id",
																			"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																			"description": "(Required) ID of the backup repository."
																		}
																	]
																}
															},
															"status": "Created",
															"code": 201,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"activityId\": \"urn:uuid:ff04bc79-41c7-abe9-79b9-32b72d0d8ebe\",\n  \"creationTime\": \"1976-08-31T07:10:18.372Z\",\n  \"id\": \"6b97bae8-5d34-c1c8-6373-25234a7b2678\",\n  \"name\": \"Ut pariatur do commodo\",\n  \"sessionType\": \"Automation\",\n  \"state\": \"Starting\",\n  \"usn\": -68197960,\n  \"endTime\": \"1998-06-07T18:50:39.738Z\",\n  \"progressPercent\": -52750286,\n  \"result\": {\n    \"result\": \"None\",\n    \"message\": \"deserunt commodo eu\",\n    \"isCanceled\": true\n  },\n  \"resourceId\": \"af28d036-9436-ab07-5749-6bc82423562b\",\n  \"resourceReference\": \"Ut\",\n  \"parentSessionId\": \"urn:uuid:017adbc7-e2d7-b332-dd71-9fa6701d99bb\"\n}"
														},
														{
															"name": "Bad request. This error is related to POST/PUT requests. The request body is malformed, incomplete or otherwise invalid.",
															"originalRequest": {
																"method": "PUT",
																"header": [
																	{
																		"description": "Added as a part of security scheme: apikey",
																		"key": "Authorization",
																		"value": "<API Key>"
																	},
																	{
																		"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																		"key": "x-api-version",
																		"value": "1.0-rev1"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"hostId\": \"71556780-b1c7-7913-7965-6a02d170ee93\",\n  \"mountServer\": {\n    \"mountServerId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"vPowerNFSEnabled\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"writeCacheFolder\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"vPowerNFSPortSettings\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  \"repository\": {\n    \"path\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"maxTaskCount\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"readWriteRate\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"advancedSettings\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  }\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/api/v1/backupInfrastructure/repositories/:id",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v1",
																		"backupInfrastructure",
																		"repositories",
																		":id"
																	],
																	"variable": [
																		{
																			"key": "id",
																			"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																			"description": "(Required) ID of the backup repository."
																		}
																	]
																}
															},
															"status": "Bad Request",
															"code": 400,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
														},
														{
															"name": "Unauthorized. The authorization header has been expected but not found (or found but is expired).",
															"originalRequest": {
																"method": "PUT",
																"header": [
																	{
																		"description": "Added as a part of security scheme: apikey",
																		"key": "Authorization",
																		"value": "<API Key>"
																	},
																	{
																		"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																		"key": "x-api-version",
																		"value": "1.0-rev1"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"hostId\": \"71556780-b1c7-7913-7965-6a02d170ee93\",\n  \"mountServer\": {\n    \"mountServerId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"vPowerNFSEnabled\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"writeCacheFolder\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"vPowerNFSPortSettings\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  \"repository\": {\n    \"path\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"maxTaskCount\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"readWriteRate\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"advancedSettings\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  }\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/api/v1/backupInfrastructure/repositories/:id",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v1",
																		"backupInfrastructure",
																		"repositories",
																		":id"
																	],
																	"variable": [
																		{
																			"key": "id",
																			"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																			"description": "(Required) ID of the backup repository."
																		}
																	]
																}
															},
															"status": "Unauthorized",
															"code": 401,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
														},
														{
															"name": "Forbidden. The user sending the request does not have adequate privileges to access one or more objects specified in the request.",
															"originalRequest": {
																"method": "PUT",
																"header": [
																	{
																		"description": "Added as a part of security scheme: apikey",
																		"key": "Authorization",
																		"value": "<API Key>"
																	},
																	{
																		"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																		"key": "x-api-version",
																		"value": "1.0-rev1"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"hostId\": \"71556780-b1c7-7913-7965-6a02d170ee93\",\n  \"mountServer\": {\n    \"mountServerId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"vPowerNFSEnabled\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"writeCacheFolder\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"vPowerNFSPortSettings\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  \"repository\": {\n    \"path\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"maxTaskCount\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"readWriteRate\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"advancedSettings\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  }\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/api/v1/backupInfrastructure/repositories/:id",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v1",
																		"backupInfrastructure",
																		"repositories",
																		":id"
																	],
																	"variable": [
																		{
																			"key": "id",
																			"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																			"description": "(Required) ID of the backup repository."
																		}
																	]
																}
															},
															"status": "Forbidden",
															"code": 403,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
														},
														{
															"name": "Not found. No object was found with the path parameter specified in the request.",
															"originalRequest": {
																"method": "PUT",
																"header": [
																	{
																		"description": "Added as a part of security scheme: apikey",
																		"key": "Authorization",
																		"value": "<API Key>"
																	},
																	{
																		"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																		"key": "x-api-version",
																		"value": "1.0-rev1"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"hostId\": \"71556780-b1c7-7913-7965-6a02d170ee93\",\n  \"mountServer\": {\n    \"mountServerId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"vPowerNFSEnabled\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"writeCacheFolder\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"vPowerNFSPortSettings\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  \"repository\": {\n    \"path\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"maxTaskCount\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"readWriteRate\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"advancedSettings\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  }\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/api/v1/backupInfrastructure/repositories/:id",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v1",
																		"backupInfrastructure",
																		"repositories",
																		":id"
																	],
																	"variable": [
																		{
																			"key": "id",
																			"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																			"description": "(Required) ID of the backup repository."
																		}
																	]
																}
															},
															"status": "Not Found",
															"code": 404,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
														},
														{
															"name": "Internal server error. The request has been received but could not be completed because of an internal error at the server side.",
															"originalRequest": {
																"method": "PUT",
																"header": [
																	{
																		"description": "Added as a part of security scheme: apikey",
																		"key": "Authorization",
																		"value": "<API Key>"
																	},
																	{
																		"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																		"key": "x-api-version",
																		"value": "1.0-rev1"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"hostId\": \"71556780-b1c7-7913-7965-6a02d170ee93\",\n  \"mountServer\": {\n    \"mountServerId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"vPowerNFSEnabled\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"writeCacheFolder\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"vPowerNFSPortSettings\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  \"repository\": {\n    \"path\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"maxTaskCount\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"readWriteRate\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"advancedSettings\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  }\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/api/v1/backupInfrastructure/repositories/:id",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v1",
																		"backupInfrastructure",
																		"repositories",
																		":id"
																	],
																	"variable": [
																		{
																			"key": "id",
																			"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																			"description": "(Required) ID of the backup repository."
																		}
																	]
																}
															},
															"status": "Internal Server Error",
															"code": 500,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
														}
													]
												},
												{
													"name": "Remove Repository",
													"request": {
														"method": "DELETE",
														"header": [
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v1/backupInfrastructure/repositories/:id?deleteBackups=true",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"backupInfrastructure",
																"repositories",
																":id"
															],
															"query": [
																{
																	"key": "deleteBackups",
																	"value": "true",
																	"description": "If *true*, Veeam Backup & Replication will remove backup files."
																}
															],
															"variable": [
																{
																	"key": "id",
																	"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																	"description": "(Required) ID of the backup repository."
																}
															]
														},
														"description": "The HTTP DELETE request to the `/api/v1/backupInfrastructure/repositories/{id}` path allows you to remove a backup repository that has the specified `id` from the backup infrastructure."
													},
													"response": [
														{
															"name": "Removed",
															"originalRequest": {
																"method": "DELETE",
																"header": [
																	{
																		"description": "Added as a part of security scheme: apikey",
																		"key": "Authorization",
																		"value": "<API Key>"
																	},
																	{
																		"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																		"key": "x-api-version",
																		"value": "1.0-rev1"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/v1/backupInfrastructure/repositories/:id?deleteBackups=true",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v1",
																		"backupInfrastructure",
																		"repositories",
																		":id"
																	],
																	"query": [
																		{
																			"key": "deleteBackups",
																			"value": "true"
																		}
																	],
																	"variable": [
																		{
																			"key": "id",
																			"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																			"description": "(Required) ID of the backup repository."
																		}
																	]
																}
															},
															"status": "No Content",
															"code": 204,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{}"
														},
														{
															"name": "Unauthorized. The authorization header has been expected but not found (or found but is expired).",
															"originalRequest": {
																"method": "DELETE",
																"header": [
																	{
																		"description": "Added as a part of security scheme: apikey",
																		"key": "Authorization",
																		"value": "<API Key>"
																	},
																	{
																		"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																		"key": "x-api-version",
																		"value": "1.0-rev1"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/v1/backupInfrastructure/repositories/:id?deleteBackups=true",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v1",
																		"backupInfrastructure",
																		"repositories",
																		":id"
																	],
																	"query": [
																		{
																			"key": "deleteBackups",
																			"value": "true"
																		}
																	],
																	"variable": [
																		{
																			"key": "id",
																			"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																			"description": "(Required) ID of the backup repository."
																		}
																	]
																}
															},
															"status": "Unauthorized",
															"code": 401,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
														},
														{
															"name": "Forbidden. The user sending the request does not have adequate privileges to access one or more objects specified in the request.",
															"originalRequest": {
																"method": "DELETE",
																"header": [
																	{
																		"description": "Added as a part of security scheme: apikey",
																		"key": "Authorization",
																		"value": "<API Key>"
																	},
																	{
																		"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																		"key": "x-api-version",
																		"value": "1.0-rev1"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/v1/backupInfrastructure/repositories/:id?deleteBackups=true",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v1",
																		"backupInfrastructure",
																		"repositories",
																		":id"
																	],
																	"query": [
																		{
																			"key": "deleteBackups",
																			"value": "true"
																		}
																	],
																	"variable": [
																		{
																			"key": "id",
																			"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																			"description": "(Required) ID of the backup repository."
																		}
																	]
																}
															},
															"status": "Forbidden",
															"code": 403,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
														},
														{
															"name": "Not found. No object was found with the path parameter specified in the request.",
															"originalRequest": {
																"method": "DELETE",
																"header": [
																	{
																		"description": "Added as a part of security scheme: apikey",
																		"key": "Authorization",
																		"value": "<API Key>"
																	},
																	{
																		"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																		"key": "x-api-version",
																		"value": "1.0-rev1"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/v1/backupInfrastructure/repositories/:id?deleteBackups=true",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v1",
																		"backupInfrastructure",
																		"repositories",
																		":id"
																	],
																	"query": [
																		{
																			"key": "deleteBackups",
																			"value": "true"
																		}
																	],
																	"variable": [
																		{
																			"key": "id",
																			"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																			"description": "(Required) ID of the backup repository."
																		}
																	]
																}
															},
															"status": "Not Found",
															"code": 404,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
														},
														{
															"name": "Internal server error. The request has been received but could not be completed because of an internal error at the server side.",
															"originalRequest": {
																"method": "DELETE",
																"header": [
																	{
																		"description": "Added as a part of security scheme: apikey",
																		"key": "Authorization",
																		"value": "<API Key>"
																	},
																	{
																		"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																		"key": "x-api-version",
																		"value": "1.0-rev1"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/v1/backupInfrastructure/repositories/:id?deleteBackups=true",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v1",
																		"backupInfrastructure",
																		"repositories",
																		":id"
																	],
																	"query": [
																		{
																			"key": "deleteBackups",
																			"value": "true"
																		}
																	],
																	"variable": [
																		{
																			"key": "id",
																			"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																			"description": "(Required) ID of the backup repository."
																		}
																	]
																}
															},
															"status": "Internal Server Error",
															"code": 500,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
														}
													]
												}
											]
										},
										{
											"name": "Get All Repositories",
											"request": {
												"method": "GET",
												"header": [
													{
														"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
														"key": "x-api-version",
														"value": "1.0-rev1"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v1/backupInfrastructure/repositories?skip=-10937892&limit=-10937892&orderColumn=Type&orderAsc=true&nameFilter=irure in officia laborum&typeFilter=AmazonS3Glacier&hostIdFilter=urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167&pathFilter=irure in officia laborum&vmbApiFilter=irure in officia laborum",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"backupInfrastructure",
														"repositories"
													],
													"query": [
														{
															"key": "skip",
															"value": "-10937892",
															"description": "Number of repositories to skip."
														},
														{
															"key": "limit",
															"value": "-10937892",
															"description": "Maximum number of repositories to return."
														},
														{
															"key": "orderColumn",
															"value": "Type",
															"description": "Sorts repositories by one of the repository parameters."
														},
														{
															"key": "orderAsc",
															"value": "true",
															"description": "Sorts repositories in the ascending order by the `orderColumn` parameter."
														},
														{
															"key": "nameFilter",
															"value": "irure in officia laborum",
															"description": "Filters repositories by the `nameFilter` pattern. The pattern can match any repository parameter. To substitute one or more characters, use the asterisk (*) character at the beginning and/or at the end."
														},
														{
															"key": "typeFilter",
															"value": "AmazonS3Glacier",
															"description": "Filters repositories by repository type."
														},
														{
															"key": "hostIdFilter",
															"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
															"description": "Filters repositories by ID of the backup server."
														},
														{
															"key": "pathFilter",
															"value": "irure in officia laborum",
															"description": "Filters repositories by path to the folder where backup files are stored."
														},
														{
															"key": "vmbApiFilter",
															"value": "irure in officia laborum",
															"description": "Filters repositories by VM Backup API parameters converted to the base64 string.<br>\nTo compose the base64 string:<br>\n<ol>\n  <li>Prepare VM Backup API parameters in the JSON format.</li>\n  <code>{<br>\n  \"protocolVersion\":\"string\",<br>\n  \"assemblyVersion\":\"string\",<br>\n  \"productId\":\"string\",<br>\n  \"versionFlags\":\"string\"<br>\n  }<br></code>\n  <li>Convert the JSON object into a string.</li>\n  <li>Encode the string with base64 encoding.</li>\n</ol>\n"
														}
													]
												},
												"description": "The HTTP GET request to the `/api/v1/backupInfrastructure/repositories` path allows you to get an array of all backup repositories that are added to the backup infrastructure."
											},
											"response": [
												{
													"name": "OK",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v1/backupInfrastructure/repositories?skip=-10937892&limit=-10937892&orderColumn=Type&orderAsc=true&nameFilter=irure in officia laborum&typeFilter=AmazonS3Glacier&hostIdFilter=urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167&pathFilter=irure in officia laborum&vmbApiFilter=irure in officia laborum",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"backupInfrastructure",
																"repositories"
															],
															"query": [
																{
																	"key": "skip",
																	"value": "-10937892"
																},
																{
																	"key": "limit",
																	"value": "-10937892"
																},
																{
																	"key": "orderColumn",
																	"value": "Type"
																},
																{
																	"key": "orderAsc",
																	"value": "true"
																},
																{
																	"key": "nameFilter",
																	"value": "irure in officia laborum"
																},
																{
																	"key": "typeFilter",
																	"value": "AmazonS3Glacier"
																},
																{
																	"key": "hostIdFilter",
																	"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167"
																},
																{
																	"key": "pathFilter",
																	"value": "irure in officia laborum"
																},
																{
																	"key": "vmbApiFilter",
																	"value": "irure in officia laborum"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"data\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"pagination\": {\n    \"total\": 95152267,\n    \"count\": 2241909,\n    \"skip\": -88683861,\n    \"limit\": 35733099\n  }\n}"
												},
												{
													"name": "Unauthorized. The authorization header has been expected but not found (or found but is expired).",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v1/backupInfrastructure/repositories?skip=-10937892&limit=-10937892&orderColumn=Type&orderAsc=true&nameFilter=irure in officia laborum&typeFilter=AmazonS3Glacier&hostIdFilter=urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167&pathFilter=irure in officia laborum&vmbApiFilter=irure in officia laborum",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"backupInfrastructure",
																"repositories"
															],
															"query": [
																{
																	"key": "skip",
																	"value": "-10937892"
																},
																{
																	"key": "limit",
																	"value": "-10937892"
																},
																{
																	"key": "orderColumn",
																	"value": "Type"
																},
																{
																	"key": "orderAsc",
																	"value": "true"
																},
																{
																	"key": "nameFilter",
																	"value": "irure in officia laborum"
																},
																{
																	"key": "typeFilter",
																	"value": "AmazonS3Glacier"
																},
																{
																	"key": "hostIdFilter",
																	"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167"
																},
																{
																	"key": "pathFilter",
																	"value": "irure in officia laborum"
																},
																{
																	"key": "vmbApiFilter",
																	"value": "irure in officia laborum"
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												},
												{
													"name": "Forbidden. The user sending the request does not have adequate privileges to access one or more objects specified in the request.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v1/backupInfrastructure/repositories?skip=-10937892&limit=-10937892&orderColumn=Type&orderAsc=true&nameFilter=irure in officia laborum&typeFilter=AmazonS3Glacier&hostIdFilter=urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167&pathFilter=irure in officia laborum&vmbApiFilter=irure in officia laborum",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"backupInfrastructure",
																"repositories"
															],
															"query": [
																{
																	"key": "skip",
																	"value": "-10937892"
																},
																{
																	"key": "limit",
																	"value": "-10937892"
																},
																{
																	"key": "orderColumn",
																	"value": "Type"
																},
																{
																	"key": "orderAsc",
																	"value": "true"
																},
																{
																	"key": "nameFilter",
																	"value": "irure in officia laborum"
																},
																{
																	"key": "typeFilter",
																	"value": "AmazonS3Glacier"
																},
																{
																	"key": "hostIdFilter",
																	"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167"
																},
																{
																	"key": "pathFilter",
																	"value": "irure in officia laborum"
																},
																{
																	"key": "vmbApiFilter",
																	"value": "irure in officia laborum"
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												},
												{
													"name": "Internal server error. The request has been received but could not be completed because of an internal error at the server side.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v1/backupInfrastructure/repositories?skip=-10937892&limit=-10937892&orderColumn=Type&orderAsc=true&nameFilter=irure in officia laborum&typeFilter=AmazonS3Glacier&hostIdFilter=urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167&pathFilter=irure in officia laborum&vmbApiFilter=irure in officia laborum",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"backupInfrastructure",
																"repositories"
															],
															"query": [
																{
																	"key": "skip",
																	"value": "-10937892"
																},
																{
																	"key": "limit",
																	"value": "-10937892"
																},
																{
																	"key": "orderColumn",
																	"value": "Type"
																},
																{
																	"key": "orderAsc",
																	"value": "true"
																},
																{
																	"key": "nameFilter",
																	"value": "irure in officia laborum"
																},
																{
																	"key": "typeFilter",
																	"value": "AmazonS3Glacier"
																},
																{
																	"key": "hostIdFilter",
																	"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167"
																},
																{
																	"key": "pathFilter",
																	"value": "irure in officia laborum"
																},
																{
																	"key": "vmbApiFilter",
																	"value": "irure in officia laborum"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												}
											]
										},
										{
											"name": "Add Repository",
											"request": {
												"method": "POST",
												"header": [
													{
														"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
														"key": "x-api-version",
														"value": "1.0-rev1"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"hostId\": \"urn:uuid:f285ec41-6861-0ff8-5e92-e4521c966ae2\",\n  \"mountServer\": {\n    \"mountServerId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"vPowerNFSEnabled\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"writeCacheFolder\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"vPowerNFSPortSettings\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  \"repository\": {\n    \"path\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"maxTaskCount\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"readWriteRate\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"advancedSettings\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{baseUrl}}/api/v1/backupInfrastructure/repositories",
												"description": "The HTTP POST request to the `/api/v1/backupInfrastructure/repositories` path allows you to add a repository to the backup infrastructure."
											},
											"response": [
												{
													"name": "Infrastructure session has been created to add the repository. To check the progress, track the session `state`.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"hostId\": \"urn:uuid:f285ec41-6861-0ff8-5e92-e4521c966ae2\",\n  \"mountServer\": {\n    \"mountServerId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"vPowerNFSEnabled\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"writeCacheFolder\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"vPowerNFSPortSettings\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  \"repository\": {\n    \"path\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"maxTaskCount\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"readWriteRate\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"advancedSettings\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": "{{baseUrl}}/api/v1/backupInfrastructure/repositories"
													},
													"status": "Created",
													"code": 201,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"activityId\": \"urn:uuid:ff04bc79-41c7-abe9-79b9-32b72d0d8ebe\",\n  \"creationTime\": \"1976-08-31T07:10:18.372Z\",\n  \"id\": \"6b97bae8-5d34-c1c8-6373-25234a7b2678\",\n  \"name\": \"Ut pariatur do commodo\",\n  \"sessionType\": \"Automation\",\n  \"state\": \"Starting\",\n  \"usn\": -68197960,\n  \"endTime\": \"1998-06-07T18:50:39.738Z\",\n  \"progressPercent\": -52750286,\n  \"result\": {\n    \"result\": \"None\",\n    \"message\": \"deserunt commodo eu\",\n    \"isCanceled\": true\n  },\n  \"resourceId\": \"af28d036-9436-ab07-5749-6bc82423562b\",\n  \"resourceReference\": \"Ut\",\n  \"parentSessionId\": \"urn:uuid:017adbc7-e2d7-b332-dd71-9fa6701d99bb\"\n}"
												},
												{
													"name": "Bad request. This error is related to POST/PUT requests. The request body is malformed, incomplete or otherwise invalid.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"hostId\": \"urn:uuid:f285ec41-6861-0ff8-5e92-e4521c966ae2\",\n  \"mountServer\": {\n    \"mountServerId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"vPowerNFSEnabled\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"writeCacheFolder\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"vPowerNFSPortSettings\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  \"repository\": {\n    \"path\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"maxTaskCount\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"readWriteRate\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"advancedSettings\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": "{{baseUrl}}/api/v1/backupInfrastructure/repositories"
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												},
												{
													"name": "Unauthorized. The authorization header has been expected but not found (or found but is expired).",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"hostId\": \"urn:uuid:f285ec41-6861-0ff8-5e92-e4521c966ae2\",\n  \"mountServer\": {\n    \"mountServerId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"vPowerNFSEnabled\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"writeCacheFolder\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"vPowerNFSPortSettings\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  \"repository\": {\n    \"path\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"maxTaskCount\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"readWriteRate\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"advancedSettings\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": "{{baseUrl}}/api/v1/backupInfrastructure/repositories"
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												},
												{
													"name": "Forbidden. The user sending the request does not have adequate privileges to access one or more objects specified in the request.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"hostId\": \"urn:uuid:f285ec41-6861-0ff8-5e92-e4521c966ae2\",\n  \"mountServer\": {\n    \"mountServerId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"vPowerNFSEnabled\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"writeCacheFolder\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"vPowerNFSPortSettings\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  \"repository\": {\n    \"path\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"maxTaskCount\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"readWriteRate\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"advancedSettings\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": "{{baseUrl}}/api/v1/backupInfrastructure/repositories"
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												},
												{
													"name": "Internal server error. The request has been received but could not be completed because of an internal error at the server side.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"hostId\": \"urn:uuid:f285ec41-6861-0ff8-5e92-e4521c966ae2\",\n  \"mountServer\": {\n    \"mountServerId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"vPowerNFSEnabled\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"writeCacheFolder\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"vPowerNFSPortSettings\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  \"repository\": {\n    \"path\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"maxTaskCount\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"readWriteRate\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"advancedSettings\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": "{{baseUrl}}/api/v1/backupInfrastructure/repositories"
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												}
											]
										},
										{
											"name": "Get All Repository States",
											"request": {
												"method": "GET",
												"header": [
													{
														"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
														"key": "x-api-version",
														"value": "1.0-rev1"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v1/backupInfrastructure/repositories/states?skip=-10937892&limit=-10937892&orderColumn=FreeGB&orderAsc=true&idFilter=urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167&nameFilter=irure in officia laborum&typeFilter=AmazonS3Glacier&capacityFilter=52057545.641151756&freeSpaceFilter=52057545.641151756&usedSpaceFilter=52057545.641151756",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"backupInfrastructure",
														"repositories",
														"states"
													],
													"query": [
														{
															"key": "skip",
															"value": "-10937892",
															"description": "Number of repository states to skip."
														},
														{
															"key": "limit",
															"value": "-10937892",
															"description": "Maximum number of repository states to return."
														},
														{
															"key": "orderColumn",
															"value": "FreeGB",
															"description": "Sorts repository states by one of the state parameters."
														},
														{
															"key": "orderAsc",
															"value": "true",
															"description": "Sorts repository states in the ascending order by the `orderColumn` parameter."
														},
														{
															"key": "idFilter",
															"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
															"description": "Filters repository states by repository ID."
														},
														{
															"key": "nameFilter",
															"value": "irure in officia laborum",
															"description": "Filters repository states by the `nameFilter` pattern. The pattern can match any repository state parameter. To substitute one or more characters, use the asterisk (*) character at the beginning and/or at the end."
														},
														{
															"key": "typeFilter",
															"value": "AmazonS3Glacier",
															"description": "Filters repository states by repository type."
														},
														{
															"key": "capacityFilter",
															"value": "52057545.641151756",
															"description": "Filters repository states by repository capacity."
														},
														{
															"key": "freeSpaceFilter",
															"value": "52057545.641151756",
															"description": "Filters repository states by repository free space."
														},
														{
															"key": "usedSpaceFilter",
															"value": "52057545.641151756",
															"description": "Filters repository states by repository used space."
														}
													]
												},
												"description": "The HTTP GET request to the `/api/v1/backupInfrastructure/repositories/states` path allows you to get an array of all repository states. The states include repository location and brief statistics, such as repository capacity, free and used space."
											},
											"response": [
												{
													"name": "OK",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v1/backupInfrastructure/repositories/states?skip=-10937892&limit=-10937892&orderColumn=FreeGB&orderAsc=true&idFilter=urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167&nameFilter=irure in officia laborum&typeFilter=AmazonS3Glacier&capacityFilter=52057545.641151756&freeSpaceFilter=52057545.641151756&usedSpaceFilter=52057545.641151756",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"backupInfrastructure",
																"repositories",
																"states"
															],
															"query": [
																{
																	"key": "skip",
																	"value": "-10937892"
																},
																{
																	"key": "limit",
																	"value": "-10937892"
																},
																{
																	"key": "orderColumn",
																	"value": "FreeGB"
																},
																{
																	"key": "orderAsc",
																	"value": "true"
																},
																{
																	"key": "idFilter",
																	"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167"
																},
																{
																	"key": "nameFilter",
																	"value": "irure in officia laborum"
																},
																{
																	"key": "typeFilter",
																	"value": "AmazonS3Glacier"
																},
																{
																	"key": "capacityFilter",
																	"value": "52057545.641151756"
																},
																{
																	"key": "freeSpaceFilter",
																	"value": "52057545.641151756"
																},
																{
																	"key": "usedSpaceFilter",
																	"value": "52057545.641151756"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"data\": [\n    {\n      \"id\": \"urn:uuid:5afe8187-286e-a4ea-3397-8168fbfc2967\",\n      \"name\": \"id\",\n      \"type\": \"LinuxLocal\",\n      \"description\": \"labore elit\",\n      \"capacityGB\": 44579728.46391863,\n      \"freeGB\": -91318334.0969541,\n      \"usedSpaceGB\": 32021190.23162484,\n      \"hostId\": \"urn:uuid:3a27eda8-7943-93ba-4f82-b86ca8a19d89\",\n      \"hostName\": \"commodo culpa est consequat\",\n      \"path\": \"enim adipisicing occaecat\"\n    },\n    {\n      \"id\": \"urn:uuid:37bafb20-db40-f3cd-2c35-8d2549cff726\",\n      \"name\": \"in dolor velit\",\n      \"type\": \"LinuxLocal\",\n      \"description\": \"pariatur in occaec\",\n      \"capacityGB\": 73424468.00828451,\n      \"freeGB\": 34761361.58458555,\n      \"usedSpaceGB\": -63341018.66911541,\n      \"hostId\": \"42778da4-d5b7-3fa7-19e8-bea5f0f8cbff\",\n      \"hostName\": \"tempor\",\n      \"path\": \"nisi\"\n    }\n  ],\n  \"pagination\": {\n    \"total\": 28789802,\n    \"count\": -39348340,\n    \"skip\": 73408360,\n    \"limit\": 64662280\n  }\n}"
												},
												{
													"name": "Unauthorized. The authorization header has been expected but not found (or found but is expired).",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v1/backupInfrastructure/repositories/states?skip=-10937892&limit=-10937892&orderColumn=FreeGB&orderAsc=true&idFilter=urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167&nameFilter=irure in officia laborum&typeFilter=AmazonS3Glacier&capacityFilter=52057545.641151756&freeSpaceFilter=52057545.641151756&usedSpaceFilter=52057545.641151756",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"backupInfrastructure",
																"repositories",
																"states"
															],
															"query": [
																{
																	"key": "skip",
																	"value": "-10937892"
																},
																{
																	"key": "limit",
																	"value": "-10937892"
																},
																{
																	"key": "orderColumn",
																	"value": "FreeGB"
																},
																{
																	"key": "orderAsc",
																	"value": "true"
																},
																{
																	"key": "idFilter",
																	"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167"
																},
																{
																	"key": "nameFilter",
																	"value": "irure in officia laborum"
																},
																{
																	"key": "typeFilter",
																	"value": "AmazonS3Glacier"
																},
																{
																	"key": "capacityFilter",
																	"value": "52057545.641151756"
																},
																{
																	"key": "freeSpaceFilter",
																	"value": "52057545.641151756"
																},
																{
																	"key": "usedSpaceFilter",
																	"value": "52057545.641151756"
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												},
												{
													"name": "Forbidden. The user sending the request does not have adequate privileges to access one or more objects specified in the request.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v1/backupInfrastructure/repositories/states?skip=-10937892&limit=-10937892&orderColumn=FreeGB&orderAsc=true&idFilter=urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167&nameFilter=irure in officia laborum&typeFilter=AmazonS3Glacier&capacityFilter=52057545.641151756&freeSpaceFilter=52057545.641151756&usedSpaceFilter=52057545.641151756",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"backupInfrastructure",
																"repositories",
																"states"
															],
															"query": [
																{
																	"key": "skip",
																	"value": "-10937892"
																},
																{
																	"key": "limit",
																	"value": "-10937892"
																},
																{
																	"key": "orderColumn",
																	"value": "FreeGB"
																},
																{
																	"key": "orderAsc",
																	"value": "true"
																},
																{
																	"key": "idFilter",
																	"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167"
																},
																{
																	"key": "nameFilter",
																	"value": "irure in officia laborum"
																},
																{
																	"key": "typeFilter",
																	"value": "AmazonS3Glacier"
																},
																{
																	"key": "capacityFilter",
																	"value": "52057545.641151756"
																},
																{
																	"key": "freeSpaceFilter",
																	"value": "52057545.641151756"
																},
																{
																	"key": "usedSpaceFilter",
																	"value": "52057545.641151756"
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												},
												{
													"name": "Internal server error. The request has been received but could not be completed because of an internal error at the server side.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v1/backupInfrastructure/repositories/states?skip=-10937892&limit=-10937892&orderColumn=FreeGB&orderAsc=true&idFilter=urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167&nameFilter=irure in officia laborum&typeFilter=AmazonS3Glacier&capacityFilter=52057545.641151756&freeSpaceFilter=52057545.641151756&usedSpaceFilter=52057545.641151756",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"backupInfrastructure",
																"repositories",
																"states"
															],
															"query": [
																{
																	"key": "skip",
																	"value": "-10937892"
																},
																{
																	"key": "limit",
																	"value": "-10937892"
																},
																{
																	"key": "orderColumn",
																	"value": "FreeGB"
																},
																{
																	"key": "orderAsc",
																	"value": "true"
																},
																{
																	"key": "idFilter",
																	"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167"
																},
																{
																	"key": "nameFilter",
																	"value": "irure in officia laborum"
																},
																{
																	"key": "typeFilter",
																	"value": "AmazonS3Glacier"
																},
																{
																	"key": "capacityFilter",
																	"value": "52057545.641151756"
																},
																{
																	"key": "freeSpaceFilter",
																	"value": "52057545.641151756"
																},
																{
																	"key": "usedSpaceFilter",
																	"value": "52057545.641151756"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												}
											]
										}
									]
								},
								{
									"name": "proxies",
									"item": [
										{
											"name": "{id}",
											"item": [
												{
													"name": "Get Proxy",
													"request": {
														"method": "GET",
														"header": [
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v1/backupInfrastructure/proxies/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"backupInfrastructure",
																"proxies",
																":id"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																	"description": "(Required) ID of the backup proxy."
																}
															]
														},
														"description": "The HTTP GET request to the `/api/v1/backupInfrastructure/proxies/{id}` path allows you to get a backup proxy that has the specified `id`."
													},
													"response": [
														{
															"name": "OK",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"description": "Added as a part of security scheme: apikey",
																		"key": "Authorization",
																		"value": "<API Key>"
																	},
																	{
																		"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																		"key": "x-api-version",
																		"value": "1.0-rev1"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/v1/backupInfrastructure/proxies/:id",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v1",
																		"backupInfrastructure",
																		"proxies",
																		":id"
																	],
																	"variable": [
																		{
																			"key": "id",
																			"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																			"description": "(Required) ID of the backup proxy."
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"server\": {\n    \"hostId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"transportMode\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"failoverToNetwork\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"hostToProxyEncryption\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"connectedDatastores\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"maxTaskCount\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  }\n}"
														},
														{
															"name": "Unauthorized. The authorization header has been expected but not found (or found but is expired).",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"description": "Added as a part of security scheme: apikey",
																		"key": "Authorization",
																		"value": "<API Key>"
																	},
																	{
																		"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																		"key": "x-api-version",
																		"value": "1.0-rev1"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/v1/backupInfrastructure/proxies/:id",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v1",
																		"backupInfrastructure",
																		"proxies",
																		":id"
																	],
																	"variable": [
																		{
																			"key": "id",
																			"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																			"description": "(Required) ID of the backup proxy."
																		}
																	]
																}
															},
															"status": "Unauthorized",
															"code": 401,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
														},
														{
															"name": "Forbidden. The user sending the request does not have adequate privileges to access one or more objects specified in the request.",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"description": "Added as a part of security scheme: apikey",
																		"key": "Authorization",
																		"value": "<API Key>"
																	},
																	{
																		"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																		"key": "x-api-version",
																		"value": "1.0-rev1"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/v1/backupInfrastructure/proxies/:id",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v1",
																		"backupInfrastructure",
																		"proxies",
																		":id"
																	],
																	"variable": [
																		{
																			"key": "id",
																			"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																			"description": "(Required) ID of the backup proxy."
																		}
																	]
																}
															},
															"status": "Forbidden",
															"code": 403,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
														},
														{
															"name": "Not found. No object was found with the path parameter specified in the request.",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"description": "Added as a part of security scheme: apikey",
																		"key": "Authorization",
																		"value": "<API Key>"
																	},
																	{
																		"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																		"key": "x-api-version",
																		"value": "1.0-rev1"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/v1/backupInfrastructure/proxies/:id",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v1",
																		"backupInfrastructure",
																		"proxies",
																		":id"
																	],
																	"variable": [
																		{
																			"key": "id",
																			"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																			"description": "(Required) ID of the backup proxy."
																		}
																	]
																}
															},
															"status": "Not Found",
															"code": 404,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
														},
														{
															"name": "Internal server error. The request has been received but could not be completed because of an internal error at the server side.",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"description": "Added as a part of security scheme: apikey",
																		"key": "Authorization",
																		"value": "<API Key>"
																	},
																	{
																		"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																		"key": "x-api-version",
																		"value": "1.0-rev1"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/v1/backupInfrastructure/proxies/:id",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v1",
																		"backupInfrastructure",
																		"proxies",
																		":id"
																	],
																	"variable": [
																		{
																			"key": "id",
																			"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																			"description": "(Required) ID of the backup proxy."
																		}
																	]
																}
															},
															"status": "Internal Server Error",
															"code": 500,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
														}
													]
												},
												{
													"name": "Edit Proxy",
													"request": {
														"method": "PUT",
														"header": [
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															},
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"server\": {\n    \"hostId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"transportMode\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"failoverToNetwork\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"hostToProxyEncryption\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"connectedDatastores\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"maxTaskCount\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/v1/backupInfrastructure/proxies/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"backupInfrastructure",
																"proxies",
																":id"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																	"description": "(Required) ID of the backup proxy."
																}
															]
														},
														"description": "The HTTP PUT request to the `/api/v1/backupInfrastructure/proxies/{id}` path allows you to edit a backup proxy that has the specified `id`."
													},
													"response": [
														{
															"name": "Infrastructure session has been created to edit the proxy. To check the progress, track the session `state`.",
															"originalRequest": {
																"method": "PUT",
																"header": [
																	{
																		"description": "Added as a part of security scheme: apikey",
																		"key": "Authorization",
																		"value": "<API Key>"
																	},
																	{
																		"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																		"key": "x-api-version",
																		"value": "1.0-rev1"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"server\": {\n    \"hostId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"transportMode\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"failoverToNetwork\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"hostToProxyEncryption\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"connectedDatastores\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"maxTaskCount\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  }\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/api/v1/backupInfrastructure/proxies/:id",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v1",
																		"backupInfrastructure",
																		"proxies",
																		":id"
																	],
																	"variable": [
																		{
																			"key": "id",
																			"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																			"description": "(Required) ID of the backup proxy."
																		}
																	]
																}
															},
															"status": "Created",
															"code": 201,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"activityId\": \"urn:uuid:ff04bc79-41c7-abe9-79b9-32b72d0d8ebe\",\n  \"creationTime\": \"1976-08-31T07:10:18.372Z\",\n  \"id\": \"6b97bae8-5d34-c1c8-6373-25234a7b2678\",\n  \"name\": \"Ut pariatur do commodo\",\n  \"sessionType\": \"Automation\",\n  \"state\": \"Starting\",\n  \"usn\": -68197960,\n  \"endTime\": \"1998-06-07T18:50:39.738Z\",\n  \"progressPercent\": -52750286,\n  \"result\": {\n    \"result\": \"None\",\n    \"message\": \"deserunt commodo eu\",\n    \"isCanceled\": true\n  },\n  \"resourceId\": \"af28d036-9436-ab07-5749-6bc82423562b\",\n  \"resourceReference\": \"Ut\",\n  \"parentSessionId\": \"urn:uuid:017adbc7-e2d7-b332-dd71-9fa6701d99bb\"\n}"
														},
														{
															"name": "Bad request. This error is related to POST/PUT requests. The request body is malformed, incomplete or otherwise invalid.",
															"originalRequest": {
																"method": "PUT",
																"header": [
																	{
																		"description": "Added as a part of security scheme: apikey",
																		"key": "Authorization",
																		"value": "<API Key>"
																	},
																	{
																		"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																		"key": "x-api-version",
																		"value": "1.0-rev1"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"server\": {\n    \"hostId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"transportMode\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"failoverToNetwork\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"hostToProxyEncryption\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"connectedDatastores\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"maxTaskCount\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  }\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/api/v1/backupInfrastructure/proxies/:id",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v1",
																		"backupInfrastructure",
																		"proxies",
																		":id"
																	],
																	"variable": [
																		{
																			"key": "id",
																			"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																			"description": "(Required) ID of the backup proxy."
																		}
																	]
																}
															},
															"status": "Bad Request",
															"code": 400,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
														},
														{
															"name": "Unauthorized. The authorization header has been expected but not found (or found but is expired).",
															"originalRequest": {
																"method": "PUT",
																"header": [
																	{
																		"description": "Added as a part of security scheme: apikey",
																		"key": "Authorization",
																		"value": "<API Key>"
																	},
																	{
																		"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																		"key": "x-api-version",
																		"value": "1.0-rev1"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"server\": {\n    \"hostId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"transportMode\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"failoverToNetwork\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"hostToProxyEncryption\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"connectedDatastores\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"maxTaskCount\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  }\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/api/v1/backupInfrastructure/proxies/:id",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v1",
																		"backupInfrastructure",
																		"proxies",
																		":id"
																	],
																	"variable": [
																		{
																			"key": "id",
																			"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																			"description": "(Required) ID of the backup proxy."
																		}
																	]
																}
															},
															"status": "Unauthorized",
															"code": 401,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
														},
														{
															"name": "Forbidden. The user sending the request does not have adequate privileges to access one or more objects specified in the request.",
															"originalRequest": {
																"method": "PUT",
																"header": [
																	{
																		"description": "Added as a part of security scheme: apikey",
																		"key": "Authorization",
																		"value": "<API Key>"
																	},
																	{
																		"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																		"key": "x-api-version",
																		"value": "1.0-rev1"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"server\": {\n    \"hostId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"transportMode\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"failoverToNetwork\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"hostToProxyEncryption\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"connectedDatastores\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"maxTaskCount\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  }\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/api/v1/backupInfrastructure/proxies/:id",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v1",
																		"backupInfrastructure",
																		"proxies",
																		":id"
																	],
																	"variable": [
																		{
																			"key": "id",
																			"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																			"description": "(Required) ID of the backup proxy."
																		}
																	]
																}
															},
															"status": "Forbidden",
															"code": 403,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
														},
														{
															"name": "Not found. No object was found with the path parameter specified in the request.",
															"originalRequest": {
																"method": "PUT",
																"header": [
																	{
																		"description": "Added as a part of security scheme: apikey",
																		"key": "Authorization",
																		"value": "<API Key>"
																	},
																	{
																		"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																		"key": "x-api-version",
																		"value": "1.0-rev1"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"server\": {\n    \"hostId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"transportMode\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"failoverToNetwork\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"hostToProxyEncryption\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"connectedDatastores\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"maxTaskCount\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  }\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/api/v1/backupInfrastructure/proxies/:id",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v1",
																		"backupInfrastructure",
																		"proxies",
																		":id"
																	],
																	"variable": [
																		{
																			"key": "id",
																			"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																			"description": "(Required) ID of the backup proxy."
																		}
																	]
																}
															},
															"status": "Not Found",
															"code": 404,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
														},
														{
															"name": "Internal server error. The request has been received but could not be completed because of an internal error at the server side.",
															"originalRequest": {
																"method": "PUT",
																"header": [
																	{
																		"description": "Added as a part of security scheme: apikey",
																		"key": "Authorization",
																		"value": "<API Key>"
																	},
																	{
																		"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																		"key": "x-api-version",
																		"value": "1.0-rev1"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"server\": {\n    \"hostId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"transportMode\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"failoverToNetwork\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"hostToProxyEncryption\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"connectedDatastores\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"maxTaskCount\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  }\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/api/v1/backupInfrastructure/proxies/:id",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v1",
																		"backupInfrastructure",
																		"proxies",
																		":id"
																	],
																	"variable": [
																		{
																			"key": "id",
																			"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																			"description": "(Required) ID of the backup proxy."
																		}
																	]
																}
															},
															"status": "Internal Server Error",
															"code": 500,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
														}
													]
												},
												{
													"name": "Remove Proxy",
													"request": {
														"method": "DELETE",
														"header": [
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v1/backupInfrastructure/proxies/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"backupInfrastructure",
																"proxies",
																":id"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																	"description": "(Required) ID of the backup proxy."
																}
															]
														},
														"description": "The HTTP DELETE request to the `/api/v1/backupInfrastructure/proxies/{id}` path allows you to remove a backup proxy that has the specified `id` from the backup infrastructure."
													},
													"response": [
														{
															"name": "Removed.",
															"originalRequest": {
																"method": "DELETE",
																"header": [
																	{
																		"description": "Added as a part of security scheme: apikey",
																		"key": "Authorization",
																		"value": "<API Key>"
																	},
																	{
																		"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																		"key": "x-api-version",
																		"value": "1.0-rev1"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/v1/backupInfrastructure/proxies/:id",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v1",
																		"backupInfrastructure",
																		"proxies",
																		":id"
																	],
																	"variable": [
																		{
																			"key": "id",
																			"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																			"description": "(Required) ID of the backup proxy."
																		}
																	]
																}
															},
															"status": "No Content",
															"code": 204,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{}"
														},
														{
															"name": "Unauthorized. The authorization header has been expected but not found (or found but is expired).",
															"originalRequest": {
																"method": "DELETE",
																"header": [
																	{
																		"description": "Added as a part of security scheme: apikey",
																		"key": "Authorization",
																		"value": "<API Key>"
																	},
																	{
																		"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																		"key": "x-api-version",
																		"value": "1.0-rev1"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/v1/backupInfrastructure/proxies/:id",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v1",
																		"backupInfrastructure",
																		"proxies",
																		":id"
																	],
																	"variable": [
																		{
																			"key": "id",
																			"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																			"description": "(Required) ID of the backup proxy."
																		}
																	]
																}
															},
															"status": "Unauthorized",
															"code": 401,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
														},
														{
															"name": "Forbidden. The user sending the request does not have adequate privileges to access one or more objects specified in the request.",
															"originalRequest": {
																"method": "DELETE",
																"header": [
																	{
																		"description": "Added as a part of security scheme: apikey",
																		"key": "Authorization",
																		"value": "<API Key>"
																	},
																	{
																		"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																		"key": "x-api-version",
																		"value": "1.0-rev1"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/v1/backupInfrastructure/proxies/:id",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v1",
																		"backupInfrastructure",
																		"proxies",
																		":id"
																	],
																	"variable": [
																		{
																			"key": "id",
																			"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																			"description": "(Required) ID of the backup proxy."
																		}
																	]
																}
															},
															"status": "Forbidden",
															"code": 403,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
														},
														{
															"name": "Not found. No object was found with the path parameter specified in the request.",
															"originalRequest": {
																"method": "DELETE",
																"header": [
																	{
																		"description": "Added as a part of security scheme: apikey",
																		"key": "Authorization",
																		"value": "<API Key>"
																	},
																	{
																		"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																		"key": "x-api-version",
																		"value": "1.0-rev1"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/v1/backupInfrastructure/proxies/:id",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v1",
																		"backupInfrastructure",
																		"proxies",
																		":id"
																	],
																	"variable": [
																		{
																			"key": "id",
																			"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																			"description": "(Required) ID of the backup proxy."
																		}
																	]
																}
															},
															"status": "Not Found",
															"code": 404,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
														},
														{
															"name": "Internal server error. The request has been received but could not be completed because of an internal error at the server side.",
															"originalRequest": {
																"method": "DELETE",
																"header": [
																	{
																		"description": "Added as a part of security scheme: apikey",
																		"key": "Authorization",
																		"value": "<API Key>"
																	},
																	{
																		"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																		"key": "x-api-version",
																		"value": "1.0-rev1"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/v1/backupInfrastructure/proxies/:id",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v1",
																		"backupInfrastructure",
																		"proxies",
																		":id"
																	],
																	"variable": [
																		{
																			"key": "id",
																			"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																			"description": "(Required) ID of the backup proxy."
																		}
																	]
																}
															},
															"status": "Internal Server Error",
															"code": 500,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
														}
													]
												}
											]
										},
										{
											"name": "Get All Proxies",
											"request": {
												"method": "GET",
												"header": [
													{
														"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
														"key": "x-api-version",
														"value": "1.0-rev1"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v1/backupInfrastructure/proxies?skip=-10937892&limit=-10937892&orderColumn=Type&orderAsc=true&nameFilter=irure in officia laborum&typeFilter=ViProxy&hostIdFilter=urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"backupInfrastructure",
														"proxies"
													],
													"query": [
														{
															"key": "skip",
															"value": "-10937892",
															"description": "Number of proxies to skip."
														},
														{
															"key": "limit",
															"value": "-10937892",
															"description": "Maximum number of proxies to return."
														},
														{
															"key": "orderColumn",
															"value": "Type",
															"description": "Sorts proxies by one of the proxy parameters."
														},
														{
															"key": "orderAsc",
															"value": "true",
															"description": "Sorts proxies in the ascending order by the `orderColumn` parameter."
														},
														{
															"key": "nameFilter",
															"value": "irure in officia laborum",
															"description": "Filters proxies by the `nameFilter` pattern. The pattern can match any proxy parameter. To substitute one or more characters, use the asterisk (*) character at the beginning and/or at the end."
														},
														{
															"key": "typeFilter",
															"value": "ViProxy",
															"description": "Filters proxies by proxy type."
														},
														{
															"key": "hostIdFilter",
															"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
															"description": "Filters proxies by ID of the backup server."
														}
													]
												},
												"description": "The HTTP GET request to the `/api/v1/backupInfrastructure/proxies` path allows you to get an array of all backup proxies that are added to the backup infrastructure."
											},
											"response": [
												{
													"name": "OK",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v1/backupInfrastructure/proxies?skip=-10937892&limit=-10937892&orderColumn=Type&orderAsc=true&nameFilter=irure in officia laborum&typeFilter=ViProxy&hostIdFilter=urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"backupInfrastructure",
																"proxies"
															],
															"query": [
																{
																	"key": "skip",
																	"value": "-10937892"
																},
																{
																	"key": "limit",
																	"value": "-10937892"
																},
																{
																	"key": "orderColumn",
																	"value": "Type"
																},
																{
																	"key": "orderAsc",
																	"value": "true"
																},
																{
																	"key": "nameFilter",
																	"value": "irure in officia laborum"
																},
																{
																	"key": "typeFilter",
																	"value": "ViProxy"
																},
																{
																	"key": "hostIdFilter",
																	"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"data\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"pagination\": {\n    \"total\": 55890186,\n    \"count\": 81173580,\n    \"skip\": -33784745,\n    \"limit\": -62305184\n  }\n}"
												},
												{
													"name": "Unauthorized. The authorization header has been expected but not found (or found but is expired).",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v1/backupInfrastructure/proxies?skip=-10937892&limit=-10937892&orderColumn=Type&orderAsc=true&nameFilter=irure in officia laborum&typeFilter=ViProxy&hostIdFilter=urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"backupInfrastructure",
																"proxies"
															],
															"query": [
																{
																	"key": "skip",
																	"value": "-10937892"
																},
																{
																	"key": "limit",
																	"value": "-10937892"
																},
																{
																	"key": "orderColumn",
																	"value": "Type"
																},
																{
																	"key": "orderAsc",
																	"value": "true"
																},
																{
																	"key": "nameFilter",
																	"value": "irure in officia laborum"
																},
																{
																	"key": "typeFilter",
																	"value": "ViProxy"
																},
																{
																	"key": "hostIdFilter",
																	"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167"
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												},
												{
													"name": "Forbidden. The user sending the request does not have adequate privileges to access one or more objects specified in the request.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v1/backupInfrastructure/proxies?skip=-10937892&limit=-10937892&orderColumn=Type&orderAsc=true&nameFilter=irure in officia laborum&typeFilter=ViProxy&hostIdFilter=urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"backupInfrastructure",
																"proxies"
															],
															"query": [
																{
																	"key": "skip",
																	"value": "-10937892"
																},
																{
																	"key": "limit",
																	"value": "-10937892"
																},
																{
																	"key": "orderColumn",
																	"value": "Type"
																},
																{
																	"key": "orderAsc",
																	"value": "true"
																},
																{
																	"key": "nameFilter",
																	"value": "irure in officia laborum"
																},
																{
																	"key": "typeFilter",
																	"value": "ViProxy"
																},
																{
																	"key": "hostIdFilter",
																	"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167"
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												},
												{
													"name": "Internal server error. The request has been received but could not be completed because of an internal error at the server side.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v1/backupInfrastructure/proxies?skip=-10937892&limit=-10937892&orderColumn=Type&orderAsc=true&nameFilter=irure in officia laborum&typeFilter=ViProxy&hostIdFilter=urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"backupInfrastructure",
																"proxies"
															],
															"query": [
																{
																	"key": "skip",
																	"value": "-10937892"
																},
																{
																	"key": "limit",
																	"value": "-10937892"
																},
																{
																	"key": "orderColumn",
																	"value": "Type"
																},
																{
																	"key": "orderAsc",
																	"value": "true"
																},
																{
																	"key": "nameFilter",
																	"value": "irure in officia laborum"
																},
																{
																	"key": "typeFilter",
																	"value": "ViProxy"
																},
																{
																	"key": "hostIdFilter",
																	"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												}
											]
										},
										{
											"name": "Add Proxy",
											"request": {
												"method": "POST",
												"header": [
													{
														"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
														"key": "x-api-version",
														"value": "1.0-rev1"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"server\": {\n    \"hostId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"transportMode\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"failoverToNetwork\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"hostToProxyEncryption\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"connectedDatastores\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"maxTaskCount\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{baseUrl}}/api/v1/backupInfrastructure/proxies",
												"description": "The HTTP POST request to the `/api/v1/backupInfrastructure/proxies` path allows you to add a proxy to the backup infrastructure."
											},
											"response": [
												{
													"name": "Infrastructure session has been created to add the proxy. To check the progress, track the session `state`.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"server\": {\n    \"hostId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"transportMode\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"failoverToNetwork\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"hostToProxyEncryption\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"connectedDatastores\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"maxTaskCount\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": "{{baseUrl}}/api/v1/backupInfrastructure/proxies"
													},
													"status": "Created",
													"code": 201,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"activityId\": \"urn:uuid:ff04bc79-41c7-abe9-79b9-32b72d0d8ebe\",\n  \"creationTime\": \"1976-08-31T07:10:18.372Z\",\n  \"id\": \"6b97bae8-5d34-c1c8-6373-25234a7b2678\",\n  \"name\": \"Ut pariatur do commodo\",\n  \"sessionType\": \"Automation\",\n  \"state\": \"Starting\",\n  \"usn\": -68197960,\n  \"endTime\": \"1998-06-07T18:50:39.738Z\",\n  \"progressPercent\": -52750286,\n  \"result\": {\n    \"result\": \"None\",\n    \"message\": \"deserunt commodo eu\",\n    \"isCanceled\": true\n  },\n  \"resourceId\": \"af28d036-9436-ab07-5749-6bc82423562b\",\n  \"resourceReference\": \"Ut\",\n  \"parentSessionId\": \"urn:uuid:017adbc7-e2d7-b332-dd71-9fa6701d99bb\"\n}"
												},
												{
													"name": "Bad request. This error is related to POST/PUT requests. The request body is malformed, incomplete or otherwise invalid.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"server\": {\n    \"hostId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"transportMode\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"failoverToNetwork\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"hostToProxyEncryption\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"connectedDatastores\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"maxTaskCount\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": "{{baseUrl}}/api/v1/backupInfrastructure/proxies"
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												},
												{
													"name": "Unauthorized. The authorization header has been expected but not found (or found but is expired).",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"server\": {\n    \"hostId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"transportMode\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"failoverToNetwork\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"hostToProxyEncryption\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"connectedDatastores\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"maxTaskCount\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": "{{baseUrl}}/api/v1/backupInfrastructure/proxies"
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												},
												{
													"name": "Forbidden. The user sending the request does not have adequate privileges to access one or more objects specified in the request.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"server\": {\n    \"hostId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"transportMode\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"failoverToNetwork\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"hostToProxyEncryption\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"connectedDatastores\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"maxTaskCount\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": "{{baseUrl}}/api/v1/backupInfrastructure/proxies"
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												},
												{
													"name": "Internal server error. The request has been received but could not be completed because of an internal error at the server side.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"server\": {\n    \"hostId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"transportMode\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"failoverToNetwork\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"hostToProxyEncryption\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"connectedDatastores\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"maxTaskCount\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": "{{baseUrl}}/api/v1/backupInfrastructure/proxies"
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												}
											]
										}
									]
								},
								{
									"name": "scale Out Repositories",
									"item": [
										{
											"name": "{id}",
											"item": [
												{
													"name": "Get Scale-Out Backup Repository",
													"request": {
														"method": "GET",
														"header": [
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v1/backupInfrastructure/scaleOutRepositories/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"backupInfrastructure",
																"scaleOutRepositories",
																":id"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																	"description": "(Required) ID of the scale-out backup repository."
																}
															]
														},
														"description": "The HTTP GET request to the `/api/v1/backupInfrastructure/scaleOutRepositories/{id}` path allows you to get a scale-out backup repository that has the specified `id`."
													},
													"response": [
														{
															"name": "OK",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"description": "Added as a part of security scheme: apikey",
																		"key": "Authorization",
																		"value": "<API Key>"
																	},
																	{
																		"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																		"key": "x-api-version",
																		"value": "1.0-rev1"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/v1/backupInfrastructure/scaleOutRepositories/:id",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v1",
																		"backupInfrastructure",
																		"scaleOutRepositories",
																		":id"
																	],
																	"variable": [
																		{
																			"key": "id",
																			"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																			"description": "(Required) ID of the scale-out backup repository."
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"id\": \"ec5910c1-3c90-c5e9-ee7a-ff42536a3bbe\",\n  \"name\": \"quis ex Excepteur\",\n  \"description\": \"veniam nostrud eiusmod Duis\",\n  \"tag\": \"dolor minim fugiat in\",\n  \"performanceTier\": {\n    \"performanceExtents\": [\n      {\n        \"id\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"name\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"status\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      {\n        \"id\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"name\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"status\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      }\n    ],\n    \"advancedSettings\": {\n      \"perVmBackup\": true,\n      \"fullWhenExtentOffline\": true\n    }\n  },\n  \"placementPolicy\": {\n    \"type\": \"Performance\",\n    \"settings\": [\n      {\n        \"extentName\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"allowedBackups\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      {\n        \"extentName\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"allowedBackups\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      }\n    ]\n  },\n  \"capacityTier\": {\n    \"enabled\": false,\n    \"extentId\": \"urn:uuid:329de5bf-5a49-d5b1-10c9-007569e2f39b\",\n    \"offloadWindow\": {\n      \"days\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ]\n    },\n    \"copyPolicyEnabled\": false,\n    \"movePolicyEnabled\": true,\n    \"operationalRestorePeriodDays\": 12792229,\n    \"overridePolicy\": {\n      \"isEnabled\": true,\n      \"overrideSpaceThresholdPercents\": -9142447\n    },\n    \"encryption\": {\n      \"isEnabled\": true,\n      \"encryptionPasswordIdOrNull\": \"a985cd4b-82e2-5d58-7ce5-2b2f4167bd88\",\n      \"encryptionPasswordTag\": \"mollit culpa ullamco\"\n    }\n  },\n  \"archiveTier\": {\n    \"isEnabled\": false,\n    \"extentId\": \"414da7a5-6b11-d221-3c05-7d588a7c8e7a\",\n    \"archivePeriodDays\": -84419797,\n    \"advancedSettings\": {\n      \"costOptimizedArchiveEnabled\": true,\n      \"archiveDeduplicationEnabled\": true\n    }\n  }\n}"
														},
														{
															"name": "Unauthorized. The authorization header has been expected but not found (or found but is expired).",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"description": "Added as a part of security scheme: apikey",
																		"key": "Authorization",
																		"value": "<API Key>"
																	},
																	{
																		"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																		"key": "x-api-version",
																		"value": "1.0-rev1"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/v1/backupInfrastructure/scaleOutRepositories/:id",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v1",
																		"backupInfrastructure",
																		"scaleOutRepositories",
																		":id"
																	],
																	"variable": [
																		{
																			"key": "id",
																			"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																			"description": "(Required) ID of the scale-out backup repository."
																		}
																	]
																}
															},
															"status": "Unauthorized",
															"code": 401,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
														},
														{
															"name": "Forbidden. The user sending the request does not have adequate privileges to access one or more objects specified in the request.",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"description": "Added as a part of security scheme: apikey",
																		"key": "Authorization",
																		"value": "<API Key>"
																	},
																	{
																		"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																		"key": "x-api-version",
																		"value": "1.0-rev1"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/v1/backupInfrastructure/scaleOutRepositories/:id",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v1",
																		"backupInfrastructure",
																		"scaleOutRepositories",
																		":id"
																	],
																	"variable": [
																		{
																			"key": "id",
																			"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																			"description": "(Required) ID of the scale-out backup repository."
																		}
																	]
																}
															},
															"status": "Forbidden",
															"code": 403,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
														},
														{
															"name": "Not found. No object was found with the path parameter specified in the request.",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"description": "Added as a part of security scheme: apikey",
																		"key": "Authorization",
																		"value": "<API Key>"
																	},
																	{
																		"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																		"key": "x-api-version",
																		"value": "1.0-rev1"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/v1/backupInfrastructure/scaleOutRepositories/:id",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v1",
																		"backupInfrastructure",
																		"scaleOutRepositories",
																		":id"
																	],
																	"variable": [
																		{
																			"key": "id",
																			"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																			"description": "(Required) ID of the scale-out backup repository."
																		}
																	]
																}
															},
															"status": "Not Found",
															"code": 404,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
														},
														{
															"name": "Internal server error. The request has been received but could not be completed because of an internal error at the server side.",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"description": "Added as a part of security scheme: apikey",
																		"key": "Authorization",
																		"value": "<API Key>"
																	},
																	{
																		"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																		"key": "x-api-version",
																		"value": "1.0-rev1"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/v1/backupInfrastructure/scaleOutRepositories/:id",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v1",
																		"backupInfrastructure",
																		"scaleOutRepositories",
																		":id"
																	],
																	"variable": [
																		{
																			"key": "id",
																			"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																			"description": "(Required) ID of the scale-out backup repository."
																		}
																	]
																}
															},
															"status": "Internal Server Error",
															"code": 500,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
														}
													]
												},
												{
													"name": "Enable Maintenance Mode",
													"request": {
														"method": "POST",
														"header": [
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															},
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"repositoryIds\": [\n    \"urn:uuid:ff0cc23e-a1d7-06bb-503a-261dec8c9769\",\n    \"urn:uuid:531ee60f-c215-2e9a-3516-e76e2a8706b9\"\n  ]\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/v1/backupInfrastructure/scaleOutRepositories/:id/enableMaintenanceMode",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"backupInfrastructure",
																"scaleOutRepositories",
																":id",
																"enableMaintenanceMode"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																	"description": "(Required) ID of the scale-out backup repository extent."
																}
															]
														},
														"description": "The HTTP POST request to the `/api/v1/backupInfrastructure/scaleOutRepositories/{id}/enableMaintenanceMode` path allows you to enable maintenance mode for a scale-out backup repository extent that has the specified `id`."
													},
													"response": [
														{
															"name": "RepositoryMaintenance session has been created.",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"description": "Added as a part of security scheme: apikey",
																		"key": "Authorization",
																		"value": "<API Key>"
																	},
																	{
																		"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																		"key": "x-api-version",
																		"value": "1.0-rev1"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"repositoryIds\": [\n    \"ae3b5e5e-31e3-54e6-0d1a-81ffbb066299\",\n    \"3b77ffb0-065b-fb82-dea4-b9e283731316\"\n  ]\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/api/v1/backupInfrastructure/scaleOutRepositories/:id/enableMaintenanceMode",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v1",
																		"backupInfrastructure",
																		"scaleOutRepositories",
																		":id",
																		"enableMaintenanceMode"
																	],
																	"variable": [
																		{
																			"key": "id",
																			"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																			"description": "(Required) ID of the scale-out backup repository extent."
																		}
																	]
																}
															},
															"status": "Created",
															"code": 201,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"activityId\": \"urn:uuid:ff04bc79-41c7-abe9-79b9-32b72d0d8ebe\",\n  \"creationTime\": \"1976-08-31T07:10:18.372Z\",\n  \"id\": \"6b97bae8-5d34-c1c8-6373-25234a7b2678\",\n  \"name\": \"Ut pariatur do commodo\",\n  \"sessionType\": \"Automation\",\n  \"state\": \"Starting\",\n  \"usn\": -68197960,\n  \"endTime\": \"1998-06-07T18:50:39.738Z\",\n  \"progressPercent\": -52750286,\n  \"result\": {\n    \"result\": \"None\",\n    \"message\": \"deserunt commodo eu\",\n    \"isCanceled\": true\n  },\n  \"resourceId\": \"af28d036-9436-ab07-5749-6bc82423562b\",\n  \"resourceReference\": \"Ut\",\n  \"parentSessionId\": \"urn:uuid:017adbc7-e2d7-b332-dd71-9fa6701d99bb\"\n}"
														},
														{
															"name": "Bad request. This error is related to POST/PUT requests. The request body is malformed, incomplete or otherwise invalid.",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"description": "Added as a part of security scheme: apikey",
																		"key": "Authorization",
																		"value": "<API Key>"
																	},
																	{
																		"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																		"key": "x-api-version",
																		"value": "1.0-rev1"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"repositoryIds\": [\n    \"ae3b5e5e-31e3-54e6-0d1a-81ffbb066299\",\n    \"3b77ffb0-065b-fb82-dea4-b9e283731316\"\n  ]\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/api/v1/backupInfrastructure/scaleOutRepositories/:id/enableMaintenanceMode",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v1",
																		"backupInfrastructure",
																		"scaleOutRepositories",
																		":id",
																		"enableMaintenanceMode"
																	],
																	"variable": [
																		{
																			"key": "id",
																			"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																			"description": "(Required) ID of the scale-out backup repository extent."
																		}
																	]
																}
															},
															"status": "Bad Request",
															"code": 400,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
														},
														{
															"name": "Unauthorized. The authorization header has been expected but not found (or found but is expired).",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"description": "Added as a part of security scheme: apikey",
																		"key": "Authorization",
																		"value": "<API Key>"
																	},
																	{
																		"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																		"key": "x-api-version",
																		"value": "1.0-rev1"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"repositoryIds\": [\n    \"ae3b5e5e-31e3-54e6-0d1a-81ffbb066299\",\n    \"3b77ffb0-065b-fb82-dea4-b9e283731316\"\n  ]\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/api/v1/backupInfrastructure/scaleOutRepositories/:id/enableMaintenanceMode",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v1",
																		"backupInfrastructure",
																		"scaleOutRepositories",
																		":id",
																		"enableMaintenanceMode"
																	],
																	"variable": [
																		{
																			"key": "id",
																			"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																			"description": "(Required) ID of the scale-out backup repository extent."
																		}
																	]
																}
															},
															"status": "Unauthorized",
															"code": 401,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
														},
														{
															"name": "Forbidden. The user sending the request does not have adequate privileges to access one or more objects specified in the request.",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"description": "Added as a part of security scheme: apikey",
																		"key": "Authorization",
																		"value": "<API Key>"
																	},
																	{
																		"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																		"key": "x-api-version",
																		"value": "1.0-rev1"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"repositoryIds\": [\n    \"ae3b5e5e-31e3-54e6-0d1a-81ffbb066299\",\n    \"3b77ffb0-065b-fb82-dea4-b9e283731316\"\n  ]\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/api/v1/backupInfrastructure/scaleOutRepositories/:id/enableMaintenanceMode",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v1",
																		"backupInfrastructure",
																		"scaleOutRepositories",
																		":id",
																		"enableMaintenanceMode"
																	],
																	"variable": [
																		{
																			"key": "id",
																			"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																			"description": "(Required) ID of the scale-out backup repository extent."
																		}
																	]
																}
															},
															"status": "Forbidden",
															"code": 403,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
														},
														{
															"name": "Internal server error. The request has been received but could not be completed because of an internal error at the server side.",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"description": "Added as a part of security scheme: apikey",
																		"key": "Authorization",
																		"value": "<API Key>"
																	},
																	{
																		"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																		"key": "x-api-version",
																		"value": "1.0-rev1"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"repositoryIds\": [\n    \"ae3b5e5e-31e3-54e6-0d1a-81ffbb066299\",\n    \"3b77ffb0-065b-fb82-dea4-b9e283731316\"\n  ]\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/api/v1/backupInfrastructure/scaleOutRepositories/:id/enableMaintenanceMode",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v1",
																		"backupInfrastructure",
																		"scaleOutRepositories",
																		":id",
																		"enableMaintenanceMode"
																	],
																	"variable": [
																		{
																			"key": "id",
																			"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																			"description": "(Required) ID of the scale-out backup repository extent."
																		}
																	]
																}
															},
															"status": "Internal Server Error",
															"code": 500,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
														}
													]
												},
												{
													"name": "Disable Maintenance Mode",
													"request": {
														"method": "POST",
														"header": [
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															},
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"repositoryIds\": [\n    \"ae3b5e5e-31e3-54e6-0d1a-81ffbb066299\",\n    \"3b77ffb0-065b-fb82-dea4-b9e283731316\"\n  ]\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/v1/backupInfrastructure/scaleOutRepositories/:id/disableMaintenanceMode",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"backupInfrastructure",
																"scaleOutRepositories",
																":id",
																"disableMaintenanceMode"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																	"description": "(Required) ID of the scale-out backup repository extent."
																}
															]
														},
														"description": "The HTTP POST request to the `/api/v1/backupInfrastructure/scaleOutRepositories/{id}/disableMaintenanceMode` path allows you to disable maintenance mode for a scale-out backup repository extent that has the specified `id`."
													},
													"response": [
														{
															"name": "RepositoryMaintenance session has been created.",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"description": "Added as a part of security scheme: apikey",
																		"key": "Authorization",
																		"value": "<API Key>"
																	},
																	{
																		"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																		"key": "x-api-version",
																		"value": "1.0-rev1"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"repositoryIds\": [\n    \"ae3b5e5e-31e3-54e6-0d1a-81ffbb066299\",\n    \"3b77ffb0-065b-fb82-dea4-b9e283731316\"\n  ]\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/api/v1/backupInfrastructure/scaleOutRepositories/:id/disableMaintenanceMode",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v1",
																		"backupInfrastructure",
																		"scaleOutRepositories",
																		":id",
																		"disableMaintenanceMode"
																	],
																	"variable": [
																		{
																			"key": "id",
																			"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																			"description": "(Required) ID of the scale-out backup repository extent."
																		}
																	]
																}
															},
															"status": "Created",
															"code": 201,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"activityId\": \"urn:uuid:ff04bc79-41c7-abe9-79b9-32b72d0d8ebe\",\n  \"creationTime\": \"1976-08-31T07:10:18.372Z\",\n  \"id\": \"6b97bae8-5d34-c1c8-6373-25234a7b2678\",\n  \"name\": \"Ut pariatur do commodo\",\n  \"sessionType\": \"Automation\",\n  \"state\": \"Starting\",\n  \"usn\": -68197960,\n  \"endTime\": \"1998-06-07T18:50:39.738Z\",\n  \"progressPercent\": -52750286,\n  \"result\": {\n    \"result\": \"None\",\n    \"message\": \"deserunt commodo eu\",\n    \"isCanceled\": true\n  },\n  \"resourceId\": \"af28d036-9436-ab07-5749-6bc82423562b\",\n  \"resourceReference\": \"Ut\",\n  \"parentSessionId\": \"urn:uuid:017adbc7-e2d7-b332-dd71-9fa6701d99bb\"\n}"
														},
														{
															"name": "Bad request. This error is related to POST/PUT requests. The request body is malformed, incomplete or otherwise invalid.",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"description": "Added as a part of security scheme: apikey",
																		"key": "Authorization",
																		"value": "<API Key>"
																	},
																	{
																		"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																		"key": "x-api-version",
																		"value": "1.0-rev1"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"repositoryIds\": [\n    \"ae3b5e5e-31e3-54e6-0d1a-81ffbb066299\",\n    \"3b77ffb0-065b-fb82-dea4-b9e283731316\"\n  ]\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/api/v1/backupInfrastructure/scaleOutRepositories/:id/disableMaintenanceMode",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v1",
																		"backupInfrastructure",
																		"scaleOutRepositories",
																		":id",
																		"disableMaintenanceMode"
																	],
																	"variable": [
																		{
																			"key": "id",
																			"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																			"description": "(Required) ID of the scale-out backup repository extent."
																		}
																	]
																}
															},
															"status": "Bad Request",
															"code": 400,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
														},
														{
															"name": "Unauthorized. The authorization header has been expected but not found (or found but is expired).",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"description": "Added as a part of security scheme: apikey",
																		"key": "Authorization",
																		"value": "<API Key>"
																	},
																	{
																		"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																		"key": "x-api-version",
																		"value": "1.0-rev1"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"repositoryIds\": [\n    \"ae3b5e5e-31e3-54e6-0d1a-81ffbb066299\",\n    \"3b77ffb0-065b-fb82-dea4-b9e283731316\"\n  ]\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/api/v1/backupInfrastructure/scaleOutRepositories/:id/disableMaintenanceMode",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v1",
																		"backupInfrastructure",
																		"scaleOutRepositories",
																		":id",
																		"disableMaintenanceMode"
																	],
																	"variable": [
																		{
																			"key": "id",
																			"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																			"description": "(Required) ID of the scale-out backup repository extent."
																		}
																	]
																}
															},
															"status": "Unauthorized",
															"code": 401,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
														},
														{
															"name": "Forbidden. The user sending the request does not have adequate privileges to access one or more objects specified in the request.",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"description": "Added as a part of security scheme: apikey",
																		"key": "Authorization",
																		"value": "<API Key>"
																	},
																	{
																		"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																		"key": "x-api-version",
																		"value": "1.0-rev1"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"repositoryIds\": [\n    \"ae3b5e5e-31e3-54e6-0d1a-81ffbb066299\",\n    \"3b77ffb0-065b-fb82-dea4-b9e283731316\"\n  ]\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/api/v1/backupInfrastructure/scaleOutRepositories/:id/disableMaintenanceMode",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v1",
																		"backupInfrastructure",
																		"scaleOutRepositories",
																		":id",
																		"disableMaintenanceMode"
																	],
																	"variable": [
																		{
																			"key": "id",
																			"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																			"description": "(Required) ID of the scale-out backup repository extent."
																		}
																	]
																}
															},
															"status": "Forbidden",
															"code": 403,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
														},
														{
															"name": "Internal server error. The request has been received but could not be completed because of an internal error at the server side.",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"description": "Added as a part of security scheme: apikey",
																		"key": "Authorization",
																		"value": "<API Key>"
																	},
																	{
																		"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																		"key": "x-api-version",
																		"value": "1.0-rev1"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"repositoryIds\": [\n    \"ae3b5e5e-31e3-54e6-0d1a-81ffbb066299\",\n    \"3b77ffb0-065b-fb82-dea4-b9e283731316\"\n  ]\n}",
																	"options": {
																		"raw": {
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/api/v1/backupInfrastructure/scaleOutRepositories/:id/disableMaintenanceMode",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v1",
																		"backupInfrastructure",
																		"scaleOutRepositories",
																		":id",
																		"disableMaintenanceMode"
																	],
																	"variable": [
																		{
																			"key": "id",
																			"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																			"description": "(Required) ID of the scale-out backup repository extent."
																		}
																	]
																}
															},
															"status": "Internal Server Error",
															"code": 500,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
														}
													]
												}
											]
										},
										{
											"name": "Get All Scale-Out Backup Repositories",
											"request": {
												"method": "GET",
												"header": [
													{
														"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
														"key": "x-api-version",
														"value": "1.0-rev1"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v1/backupInfrastructure/scaleOutRepositories?skip=-10937892&limit=-10937892&orderColumn=Type&orderAsc=true&nameFilter=irure in officia laborum",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"backupInfrastructure",
														"scaleOutRepositories"
													],
													"query": [
														{
															"key": "skip",
															"value": "-10937892",
															"description": "Number of repositories to skip."
														},
														{
															"key": "limit",
															"value": "-10937892",
															"description": "Maximum number of repositories to return."
														},
														{
															"key": "orderColumn",
															"value": "Type",
															"description": "Sorts repositories by one of the repository parameters."
														},
														{
															"key": "orderAsc",
															"value": "true",
															"description": "Sorts repositories in the ascending order by the `orderColumn` parameter."
														},
														{
															"key": "nameFilter",
															"value": "irure in officia laborum",
															"description": "Filters repositories by the `nameFilter` substring. The substring can be part of any repository parameter."
														}
													]
												},
												"description": "The HTTP GET request to the `/api/v1/backupInfrastructure/scaleOutRepositories` path allows you to get an array of all scale-out backup repositories that are added to the backup infrastructure."
											},
											"response": [
												{
													"name": "OK",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v1/backupInfrastructure/scaleOutRepositories?skip=-10937892&limit=-10937892&orderColumn=Type&orderAsc=true&nameFilter=irure in officia laborum",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"backupInfrastructure",
																"scaleOutRepositories"
															],
															"query": [
																{
																	"key": "skip",
																	"value": "-10937892"
																},
																{
																	"key": "limit",
																	"value": "-10937892"
																},
																{
																	"key": "orderColumn",
																	"value": "Type"
																},
																{
																	"key": "orderAsc",
																	"value": "true"
																},
																{
																	"key": "nameFilter",
																	"value": "irure in officia laborum"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"data\": [\n    {\n      \"id\": \"441181a9-be02-cc93-e996-d157f683440d\",\n      \"name\": \"exercitation labore dolor magna sed\",\n      \"description\": \"aute labore sunt est ut\",\n      \"tag\": \"sit\",\n      \"performanceTier\": {\n        \"performanceExtents\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"advancedSettings\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"placementPolicy\": {\n        \"type\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"settings\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"capacityTier\": {\n        \"enabled\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"extentId\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"offloadWindow\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"copyPolicyEnabled\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"movePolicyEnabled\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"operationalRestorePeriodDays\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"overridePolicy\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"encryption\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"archiveTier\": {\n        \"isEnabled\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"extentId\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"archivePeriodDays\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"advancedSettings\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      }\n    },\n    {\n      \"id\": \"439dbd5c-4a63-559c-c3c3-14ca74557dbd\",\n      \"name\": \"\",\n      \"description\": \"exercitation fugiat elit\",\n      \"tag\": \"anim\",\n      \"performanceTier\": {\n        \"performanceExtents\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"advancedSettings\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"placementPolicy\": {\n        \"type\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"settings\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"capacityTier\": {\n        \"enabled\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"extentId\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"offloadWindow\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"copyPolicyEnabled\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"movePolicyEnabled\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"operationalRestorePeriodDays\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"overridePolicy\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"encryption\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"archiveTier\": {\n        \"isEnabled\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"extentId\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"archivePeriodDays\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"advancedSettings\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      }\n    }\n  ],\n  \"pagination\": {\n    \"total\": -49006338,\n    \"count\": 99517476,\n    \"skip\": -90132451,\n    \"limit\": 32220985\n  }\n}"
												},
												{
													"name": "Unauthorized. The authorization header has been expected but not found (or found but is expired).",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v1/backupInfrastructure/scaleOutRepositories?skip=-10937892&limit=-10937892&orderColumn=Type&orderAsc=true&nameFilter=irure in officia laborum",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"backupInfrastructure",
																"scaleOutRepositories"
															],
															"query": [
																{
																	"key": "skip",
																	"value": "-10937892"
																},
																{
																	"key": "limit",
																	"value": "-10937892"
																},
																{
																	"key": "orderColumn",
																	"value": "Type"
																},
																{
																	"key": "orderAsc",
																	"value": "true"
																},
																{
																	"key": "nameFilter",
																	"value": "irure in officia laborum"
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												},
												{
													"name": "Forbidden. The user sending the request does not have adequate privileges to access one or more objects specified in the request.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v1/backupInfrastructure/scaleOutRepositories?skip=-10937892&limit=-10937892&orderColumn=Type&orderAsc=true&nameFilter=irure in officia laborum",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"backupInfrastructure",
																"scaleOutRepositories"
															],
															"query": [
																{
																	"key": "skip",
																	"value": "-10937892"
																},
																{
																	"key": "limit",
																	"value": "-10937892"
																},
																{
																	"key": "orderColumn",
																	"value": "Type"
																},
																{
																	"key": "orderAsc",
																	"value": "true"
																},
																{
																	"key": "nameFilter",
																	"value": "irure in officia laborum"
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												},
												{
													"name": "Internal server error. The request has been received but could not be completed because of an internal error at the server side.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v1/backupInfrastructure/scaleOutRepositories?skip=-10937892&limit=-10937892&orderColumn=Type&orderAsc=true&nameFilter=irure in officia laborum",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"backupInfrastructure",
																"scaleOutRepositories"
															],
															"query": [
																{
																	"key": "skip",
																	"value": "-10937892"
																},
																{
																	"key": "limit",
																	"value": "-10937892"
																},
																{
																	"key": "orderColumn",
																	"value": "Type"
																},
																{
																	"key": "orderAsc",
																	"value": "true"
																},
																{
																	"key": "nameFilter",
																	"value": "irure in officia laborum"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												}
											]
										}
									]
								}
							]
						},
						{
							"name": "jobs",
							"item": [
								{
									"name": "{id}",
									"item": [
										{
											"name": "Get Job",
											"request": {
												"method": "GET",
												"header": [
													{
														"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
														"key": "x-api-version",
														"value": "1.0-rev1"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v1/jobs/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"jobs",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
															"description": "(Required) "
														}
													]
												},
												"description": "The HTTP GET request to the `/api/v1/jobs/{id}` path allows you to get a job that has the specified `id`."
											},
											"response": [
												{
													"name": "OK",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v1/jobs/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"jobs",
																":id"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"guestProcessing\": {\n    \"appAwareProcessing\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"guestFSIndexing\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"guestInteractionProxies\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"guestCredentials\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  \"isHighPriority\": false,\n  \"schedule\": {\n    \"runAutomatically\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"daily\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"monthly\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"periodically\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"continuously\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"afterThisJob\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"retry\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"backupWindow\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  \"storage\": {\n    \"backupProxies\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"backupRepositoryId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"retentionPolicy\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"gfsPolicy\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"advancedSettings\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  \"virtualMachines\": {\n    \"includes\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"excludes\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  }\n}"
												},
												{
													"name": "Unauthorized. The authorization header has been expected but not found (or found but is expired).",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v1/jobs/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"jobs",
																":id"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												},
												{
													"name": "Forbidden. The user sending the request does not have adequate privileges to access one or more objects specified in the request.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v1/jobs/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"jobs",
																":id"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												},
												{
													"name": "Not found. No object was found with the path parameter specified in the request.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v1/jobs/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"jobs",
																":id"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												},
												{
													"name": "Internal server error. The request has been received but could not be completed because of an internal error at the server side.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v1/jobs/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"jobs",
																":id"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												}
											]
										},
										{
											"name": "Edit Job",
											"request": {
												"method": "PUT",
												"header": [
													{
														"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
														"key": "x-api-version",
														"value": "1.0-rev1"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"guestProcessing\": {\n    \"appAwareProcessing\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"guestFSIndexing\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"guestInteractionProxies\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"guestCredentials\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  \"isHighPriority\": false,\n  \"schedule\": {\n    \"runAutomatically\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"daily\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"monthly\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"periodically\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"continuously\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"afterThisJob\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"retry\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"backupWindow\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  \"storage\": {\n    \"backupProxies\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"backupRepositoryId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"retentionPolicy\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"gfsPolicy\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"advancedSettings\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  \"virtualMachines\": {\n    \"includes\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"excludes\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/v1/jobs/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"jobs",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
															"description": "(Required) "
														}
													]
												},
												"description": "The HTTP PUT request to the `/api/v1/jobs/{id}` path allows you to edit a job that has the specified `id`."
											},
											"response": [
												{
													"name": "Job has been updated.",
													"originalRequest": {
														"method": "PUT",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"guestProcessing\": {\n    \"appAwareProcessing\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"guestFSIndexing\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"guestInteractionProxies\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"guestCredentials\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  \"isHighPriority\": false,\n  \"schedule\": {\n    \"runAutomatically\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"daily\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"monthly\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"periodically\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"continuously\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"afterThisJob\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"retry\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"backupWindow\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  \"storage\": {\n    \"backupProxies\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"backupRepositoryId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"retentionPolicy\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"gfsPolicy\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"advancedSettings\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  \"virtualMachines\": {\n    \"includes\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"excludes\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/v1/jobs/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"jobs",
																":id"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"guestProcessing\": {\n    \"appAwareProcessing\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"guestFSIndexing\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"guestInteractionProxies\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"guestCredentials\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  \"isHighPriority\": false,\n  \"schedule\": {\n    \"runAutomatically\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"daily\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"monthly\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"periodically\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"continuously\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"afterThisJob\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"retry\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"backupWindow\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  \"storage\": {\n    \"backupProxies\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"backupRepositoryId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"retentionPolicy\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"gfsPolicy\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"advancedSettings\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  \"virtualMachines\": {\n    \"includes\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"excludes\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  }\n}"
												},
												{
													"name": "Bad request. This error is related to POST/PUT requests. The request body is malformed, incomplete or otherwise invalid.",
													"originalRequest": {
														"method": "PUT",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"guestProcessing\": {\n    \"appAwareProcessing\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"guestFSIndexing\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"guestInteractionProxies\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"guestCredentials\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  \"isHighPriority\": false,\n  \"schedule\": {\n    \"runAutomatically\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"daily\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"monthly\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"periodically\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"continuously\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"afterThisJob\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"retry\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"backupWindow\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  \"storage\": {\n    \"backupProxies\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"backupRepositoryId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"retentionPolicy\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"gfsPolicy\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"advancedSettings\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  \"virtualMachines\": {\n    \"includes\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"excludes\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/v1/jobs/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"jobs",
																":id"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												},
												{
													"name": "Unauthorized. The authorization header has been expected but not found (or found but is expired).",
													"originalRequest": {
														"method": "PUT",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"guestProcessing\": {\n    \"appAwareProcessing\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"guestFSIndexing\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"guestInteractionProxies\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"guestCredentials\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  \"isHighPriority\": false,\n  \"schedule\": {\n    \"runAutomatically\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"daily\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"monthly\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"periodically\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"continuously\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"afterThisJob\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"retry\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"backupWindow\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  \"storage\": {\n    \"backupProxies\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"backupRepositoryId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"retentionPolicy\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"gfsPolicy\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"advancedSettings\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  \"virtualMachines\": {\n    \"includes\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"excludes\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/v1/jobs/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"jobs",
																":id"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												},
												{
													"name": "Forbidden. The user sending the request does not have adequate privileges to access one or more objects specified in the request.",
													"originalRequest": {
														"method": "PUT",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"guestProcessing\": {\n    \"appAwareProcessing\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"guestFSIndexing\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"guestInteractionProxies\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"guestCredentials\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  \"isHighPriority\": false,\n  \"schedule\": {\n    \"runAutomatically\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"daily\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"monthly\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"periodically\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"continuously\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"afterThisJob\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"retry\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"backupWindow\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  \"storage\": {\n    \"backupProxies\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"backupRepositoryId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"retentionPolicy\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"gfsPolicy\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"advancedSettings\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  \"virtualMachines\": {\n    \"includes\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"excludes\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/v1/jobs/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"jobs",
																":id"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												},
												{
													"name": "Not found. No object was found with the path parameter specified in the request.",
													"originalRequest": {
														"method": "PUT",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"guestProcessing\": {\n    \"appAwareProcessing\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"guestFSIndexing\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"guestInteractionProxies\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"guestCredentials\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  \"isHighPriority\": false,\n  \"schedule\": {\n    \"runAutomatically\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"daily\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"monthly\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"periodically\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"continuously\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"afterThisJob\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"retry\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"backupWindow\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  \"storage\": {\n    \"backupProxies\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"backupRepositoryId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"retentionPolicy\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"gfsPolicy\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"advancedSettings\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  \"virtualMachines\": {\n    \"includes\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"excludes\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/v1/jobs/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"jobs",
																":id"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												},
												{
													"name": "Internal server error. The request has been received but could not be completed because of an internal error at the server side.",
													"originalRequest": {
														"method": "PUT",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"guestProcessing\": {\n    \"appAwareProcessing\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"guestFSIndexing\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"guestInteractionProxies\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"guestCredentials\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  \"isHighPriority\": false,\n  \"schedule\": {\n    \"runAutomatically\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"daily\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"monthly\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"periodically\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"continuously\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"afterThisJob\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"retry\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"backupWindow\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  \"storage\": {\n    \"backupProxies\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"backupRepositoryId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"retentionPolicy\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"gfsPolicy\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"advancedSettings\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  \"virtualMachines\": {\n    \"includes\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"excludes\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/v1/jobs/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"jobs",
																":id"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												}
											]
										},
										{
											"name": "Delete Job",
											"request": {
												"method": "DELETE",
												"header": [
													{
														"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
														"key": "x-api-version",
														"value": "1.0-rev1"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v1/jobs/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"jobs",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
															"description": "(Required) "
														}
													]
												},
												"description": "The HTTP DELETE request to the `/api/v1/jobs/{id}` path allows you to delete a job that has the specified `id`."
											},
											"response": [
												{
													"name": "Removed.",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v1/jobs/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"jobs",
																":id"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "No Content",
													"code": 204,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{}"
												},
												{
													"name": "Unauthorized. The authorization header has been expected but not found (or found but is expired).",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v1/jobs/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"jobs",
																":id"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												},
												{
													"name": "Forbidden. The user sending the request does not have adequate privileges to access one or more objects specified in the request.",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v1/jobs/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"jobs",
																":id"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												},
												{
													"name": "Not found. No object was found with the path parameter specified in the request.",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v1/jobs/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"jobs",
																":id"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												},
												{
													"name": "Internal server error. The request has been received but could not be completed because of an internal error at the server side.",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v1/jobs/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"jobs",
																":id"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												}
											]
										},
										{
											"name": "Start Job",
											"request": {
												"method": "POST",
												"header": [
													{
														"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
														"key": "x-api-version",
														"value": "1.0-rev1"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"performActiveFull\": false,\n  \"startChainedJobs\": false\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/v1/jobs/:id/start",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"jobs",
														":id",
														"start"
													],
													"variable": [
														{
															"key": "id",
															"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
															"description": "(Required) "
														}
													]
												},
												"description": "The HTTP POST request to the `/api/v1/jobs/{id}/start` path allows you to start a job that has the specified `id`."
											},
											"response": [
												{
													"name": "Job session has been started.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"performActiveFull\": false,\n  \"startChainedJobs\": false\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/v1/jobs/:id/start",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"jobs",
																":id",
																"start"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Created",
													"code": 201,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"activityId\": \"urn:uuid:ff04bc79-41c7-abe9-79b9-32b72d0d8ebe\",\n  \"creationTime\": \"1976-08-31T07:10:18.372Z\",\n  \"id\": \"6b97bae8-5d34-c1c8-6373-25234a7b2678\",\n  \"name\": \"Ut pariatur do commodo\",\n  \"sessionType\": \"Automation\",\n  \"state\": \"Starting\",\n  \"usn\": -68197960,\n  \"endTime\": \"1998-06-07T18:50:39.738Z\",\n  \"progressPercent\": -52750286,\n  \"result\": {\n    \"result\": \"None\",\n    \"message\": \"deserunt commodo eu\",\n    \"isCanceled\": true\n  },\n  \"resourceId\": \"af28d036-9436-ab07-5749-6bc82423562b\",\n  \"resourceReference\": \"Ut\",\n  \"parentSessionId\": \"urn:uuid:017adbc7-e2d7-b332-dd71-9fa6701d99bb\"\n}"
												},
												{
													"name": "Bad request. This error is related to POST/PUT requests. The request body is malformed, incomplete or otherwise invalid.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"performActiveFull\": false,\n  \"startChainedJobs\": false\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/v1/jobs/:id/start",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"jobs",
																":id",
																"start"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												},
												{
													"name": "Unauthorized. The authorization header has been expected but not found (or found but is expired).",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"performActiveFull\": false,\n  \"startChainedJobs\": false\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/v1/jobs/:id/start",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"jobs",
																":id",
																"start"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												},
												{
													"name": "Forbidden. The user sending the request does not have adequate privileges to access one or more objects specified in the request.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"performActiveFull\": false,\n  \"startChainedJobs\": false\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/v1/jobs/:id/start",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"jobs",
																":id",
																"start"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												},
												{
													"name": "Not found. No object was found with the path parameter specified in the request.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"performActiveFull\": false,\n  \"startChainedJobs\": false\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/v1/jobs/:id/start",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"jobs",
																":id",
																"start"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												},
												{
													"name": "Internal server error. The request has been received but could not be completed because of an internal error at the server side.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"performActiveFull\": false,\n  \"startChainedJobs\": false\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/v1/jobs/:id/start",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"jobs",
																":id",
																"start"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												}
											]
										},
										{
											"name": "Stop Job",
											"request": {
												"method": "POST",
												"header": [
													{
														"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
														"key": "x-api-version",
														"value": "1.0-rev1"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"gracefullStop\": true\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/v1/jobs/:id/stop",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"jobs",
														":id",
														"stop"
													],
													"variable": [
														{
															"key": "id",
															"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
															"description": "(Required) "
														}
													]
												},
												"description": "The HTTP POST request to the `/api/v1/jobs/{id}/stop` path allows you to stop a job that has the specified `id`."
											},
											"response": [
												{
													"name": "Job session has been stopped.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"gracefullStop\": true\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/v1/jobs/:id/stop",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"jobs",
																":id",
																"stop"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Created",
													"code": 201,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"activityId\": \"urn:uuid:ff04bc79-41c7-abe9-79b9-32b72d0d8ebe\",\n  \"creationTime\": \"1976-08-31T07:10:18.372Z\",\n  \"id\": \"6b97bae8-5d34-c1c8-6373-25234a7b2678\",\n  \"name\": \"Ut pariatur do commodo\",\n  \"sessionType\": \"Automation\",\n  \"state\": \"Starting\",\n  \"usn\": -68197960,\n  \"endTime\": \"1998-06-07T18:50:39.738Z\",\n  \"progressPercent\": -52750286,\n  \"result\": {\n    \"result\": \"None\",\n    \"message\": \"deserunt commodo eu\",\n    \"isCanceled\": true\n  },\n  \"resourceId\": \"af28d036-9436-ab07-5749-6bc82423562b\",\n  \"resourceReference\": \"Ut\",\n  \"parentSessionId\": \"urn:uuid:017adbc7-e2d7-b332-dd71-9fa6701d99bb\"\n}"
												},
												{
													"name": "Bad request. This error is related to POST/PUT requests. The request body is malformed, incomplete or otherwise invalid.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"gracefullStop\": true\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/v1/jobs/:id/stop",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"jobs",
																":id",
																"stop"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												},
												{
													"name": "Unauthorized. The authorization header has been expected but not found (or found but is expired).",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"gracefullStop\": true\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/v1/jobs/:id/stop",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"jobs",
																":id",
																"stop"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												},
												{
													"name": "Forbidden. The user sending the request does not have adequate privileges to access one or more objects specified in the request.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"gracefullStop\": true\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/v1/jobs/:id/stop",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"jobs",
																":id",
																"stop"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												},
												{
													"name": "Not found. No object was found with the path parameter specified in the request.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"gracefullStop\": true\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/v1/jobs/:id/stop",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"jobs",
																":id",
																"stop"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												},
												{
													"name": "Internal server error. The request has been received but could not be completed because of an internal error at the server side.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"gracefullStop\": true\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/v1/jobs/:id/stop",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"jobs",
																":id",
																"stop"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												}
											]
										},
										{
											"name": "Disable Job",
											"request": {
												"method": "POST",
												"header": [
													{
														"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
														"key": "x-api-version",
														"value": "1.0-rev1"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v1/jobs/:id/disable",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"jobs",
														":id",
														"disable"
													],
													"variable": [
														{
															"key": "id",
															"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
															"description": "(Required) "
														}
													]
												},
												"description": "The HTTP POST request to the `/api/v1/jobs/{id}/disable` path allows you to disable a job that has the specified `id`."
											},
											"response": [
												{
													"name": "Job has been disabled.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v1/jobs/:id/disable",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"jobs",
																":id",
																"disable"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{}"
												},
												{
													"name": "Bad request. This error is related to POST/PUT requests. The request body is malformed, incomplete or otherwise invalid.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v1/jobs/:id/disable",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"jobs",
																":id",
																"disable"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												},
												{
													"name": "Unauthorized. The authorization header has been expected but not found (or found but is expired).",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v1/jobs/:id/disable",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"jobs",
																":id",
																"disable"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												},
												{
													"name": "Forbidden. The user sending the request does not have adequate privileges to access one or more objects specified in the request.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v1/jobs/:id/disable",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"jobs",
																":id",
																"disable"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												},
												{
													"name": "Not found. No object was found with the path parameter specified in the request.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v1/jobs/:id/disable",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"jobs",
																":id",
																"disable"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												},
												{
													"name": "Internal server error. The request has been received but could not be completed because of an internal error at the server side.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v1/jobs/:id/disable",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"jobs",
																":id",
																"disable"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												}
											]
										},
										{
											"name": "Enable Job",
											"request": {
												"method": "POST",
												"header": [
													{
														"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
														"key": "x-api-version",
														"value": "1.0-rev1"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v1/jobs/:id/enable",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"jobs",
														":id",
														"enable"
													],
													"variable": [
														{
															"key": "id",
															"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
															"description": "(Required) "
														}
													]
												},
												"description": "The HTTP POST request to the `/api/v1/jobs/{id}/enable` path allows you to enable a job that has the specified `id`."
											},
											"response": [
												{
													"name": "Job has been enabled.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v1/jobs/:id/enable",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"jobs",
																":id",
																"enable"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{}"
												},
												{
													"name": "Bad request. This error is related to POST/PUT requests. The request body is malformed, incomplete or otherwise invalid.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v1/jobs/:id/enable",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"jobs",
																":id",
																"enable"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												},
												{
													"name": "Unauthorized. The authorization header has been expected but not found (or found but is expired).",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v1/jobs/:id/enable",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"jobs",
																":id",
																"enable"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												},
												{
													"name": "Forbidden. The user sending the request does not have adequate privileges to access one or more objects specified in the request.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v1/jobs/:id/enable",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"jobs",
																":id",
																"enable"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												},
												{
													"name": "Not found. No object was found with the path parameter specified in the request.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v1/jobs/:id/enable",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"jobs",
																":id",
																"enable"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												},
												{
													"name": "Internal server error. The request has been received but could not be completed because of an internal error at the server side.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v1/jobs/:id/enable",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"jobs",
																":id",
																"enable"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												}
											]
										}
									]
								},
								{
									"name": "Get All Jobs",
									"request": {
										"method": "GET",
										"header": [
											{
												"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
												"key": "x-api-version",
												"value": "1.0-rev1"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": "{{baseUrl}}/api/v1/jobs",
										"description": "The HTTP GET request to the `/api/v1/jobs` path allows you to get an array of all jobs coordinated by the backup server."
									},
									"response": [
										{
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													},
													{
														"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
														"key": "x-api-version",
														"value": "1.0-rev1"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v1/jobs?skip=-10937892&limit=-10937892&orderColumn=Name&orderAsc=true&nameFilter=irure in officia laborum&typeFilter=Backup",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"jobs"
													],
													"query": [
														{
															"key": "skip",
															"value": "-10937892"
														},
														{
															"key": "limit",
															"value": "-10937892"
														},
														{
															"key": "orderColumn",
															"value": "Name"
														},
														{
															"key": "orderAsc",
															"value": "true"
														},
														{
															"key": "nameFilter",
															"value": "irure in officia laborum"
														},
														{
															"key": "typeFilter",
															"value": "Backup"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"data\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"pagination\": {\n    \"total\": -44084912,\n    \"count\": 59192531,\n    \"skip\": -70595195,\n    \"limit\": -78902298\n  }\n}"
										},
										{
											"name": "Unauthorized. The authorization header has been expected but not found (or found but is expired).",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													},
													{
														"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
														"key": "x-api-version",
														"value": "1.0-rev1"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v1/jobs?skip=-10937892&limit=-10937892&orderColumn=Name&orderAsc=true&nameFilter=irure in officia laborum&typeFilter=Backup",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"jobs"
													],
													"query": [
														{
															"key": "skip",
															"value": "-10937892"
														},
														{
															"key": "limit",
															"value": "-10937892"
														},
														{
															"key": "orderColumn",
															"value": "Name"
														},
														{
															"key": "orderAsc",
															"value": "true"
														},
														{
															"key": "nameFilter",
															"value": "irure in officia laborum"
														},
														{
															"key": "typeFilter",
															"value": "Backup"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
										},
										{
											"name": "Forbidden. The user sending the request does not have adequate privileges to access one or more objects specified in the request.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													},
													{
														"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
														"key": "x-api-version",
														"value": "1.0-rev1"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v1/jobs?skip=-10937892&limit=-10937892&orderColumn=Name&orderAsc=true&nameFilter=irure in officia laborum&typeFilter=Backup",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"jobs"
													],
													"query": [
														{
															"key": "skip",
															"value": "-10937892"
														},
														{
															"key": "limit",
															"value": "-10937892"
														},
														{
															"key": "orderColumn",
															"value": "Name"
														},
														{
															"key": "orderAsc",
															"value": "true"
														},
														{
															"key": "nameFilter",
															"value": "irure in officia laborum"
														},
														{
															"key": "typeFilter",
															"value": "Backup"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
										},
										{
											"name": "Internal server error. The request has been received but could not be completed because of an internal error at the server side.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													},
													{
														"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
														"key": "x-api-version",
														"value": "1.0-rev1"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v1/jobs?skip=-10937892&limit=-10937892&orderColumn=Name&orderAsc=true&nameFilter=irure in officia laborum&typeFilter=Backup",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"jobs"
													],
													"query": [
														{
															"key": "skip",
															"value": "-10937892"
														},
														{
															"key": "limit",
															"value": "-10937892"
														},
														{
															"key": "orderColumn",
															"value": "Name"
														},
														{
															"key": "orderAsc",
															"value": "true"
														},
														{
															"key": "nameFilter",
															"value": "irure in officia laborum"
														},
														{
															"key": "typeFilter",
															"value": "Backup"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
										}
									]
								},
								{
									"name": "Create Job",
									"request": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
												"key": "x-api-version",
												"value": "1.0-rev1"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"guestProcessing\": {\n    \"appAwareProcessing\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"guestFSIndexing\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"guestInteractionProxies\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"guestCredentials\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  \"isHighPriority\": false,\n  \"schedule\": {\n    \"runAutomatically\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"daily\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"monthly\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"periodically\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"continuously\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"afterThisJob\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"retry\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"backupWindow\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  \"storage\": {\n    \"backupProxies\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"backupRepositoryId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"retentionPolicy\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"gfsPolicy\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"advancedSettings\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  \"virtualMachines\": {\n    \"includes\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"excludes\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{baseUrl}}/api/v1/jobs",
										"description": "The HTTP POST request to the `/api/v1/jobs` path allows you to create a new job that has the specified parameters."
									},
									"response": [
										{
											"name": "Job has been created.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													},
													{
														"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
														"key": "x-api-version",
														"value": "1.0-rev1"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"guestProcessing\": {\n    \"appAwareProcessing\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"guestFSIndexing\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"guestInteractionProxies\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"guestCredentials\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  \"isHighPriority\": false,\n  \"schedule\": {\n    \"runAutomatically\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"daily\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"monthly\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"periodically\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"continuously\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"afterThisJob\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"retry\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"backupWindow\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  \"storage\": {\n    \"backupProxies\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"backupRepositoryId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"retentionPolicy\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"gfsPolicy\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"advancedSettings\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  \"virtualMachines\": {\n    \"includes\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"excludes\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{baseUrl}}/api/v1/jobs"
											},
											"status": "Created",
											"code": 201,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"guestProcessing\": {\n    \"appAwareProcessing\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"guestFSIndexing\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"guestInteractionProxies\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"guestCredentials\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  \"isHighPriority\": false,\n  \"schedule\": {\n    \"runAutomatically\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"daily\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"monthly\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"periodically\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"continuously\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"afterThisJob\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"retry\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"backupWindow\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  \"storage\": {\n    \"backupProxies\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"backupRepositoryId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"retentionPolicy\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"gfsPolicy\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"advancedSettings\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  \"virtualMachines\": {\n    \"includes\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"excludes\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  }\n}"
										},
										{
											"name": "Bad request. This error is related to POST/PUT requests. The request body is malformed, incomplete or otherwise invalid.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													},
													{
														"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
														"key": "x-api-version",
														"value": "1.0-rev1"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"guestProcessing\": {\n    \"appAwareProcessing\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"guestFSIndexing\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"guestInteractionProxies\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"guestCredentials\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  \"isHighPriority\": false,\n  \"schedule\": {\n    \"runAutomatically\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"daily\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"monthly\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"periodically\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"continuously\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"afterThisJob\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"retry\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"backupWindow\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  \"storage\": {\n    \"backupProxies\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"backupRepositoryId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"retentionPolicy\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"gfsPolicy\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"advancedSettings\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  \"virtualMachines\": {\n    \"includes\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"excludes\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{baseUrl}}/api/v1/jobs"
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
										},
										{
											"name": "Unauthorized. The authorization header has been expected but not found (or found but is expired).",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													},
													{
														"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
														"key": "x-api-version",
														"value": "1.0-rev1"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"guestProcessing\": {\n    \"appAwareProcessing\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"guestFSIndexing\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"guestInteractionProxies\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"guestCredentials\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  \"isHighPriority\": false,\n  \"schedule\": {\n    \"runAutomatically\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"daily\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"monthly\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"periodically\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"continuously\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"afterThisJob\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"retry\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"backupWindow\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  \"storage\": {\n    \"backupProxies\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"backupRepositoryId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"retentionPolicy\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"gfsPolicy\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"advancedSettings\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  \"virtualMachines\": {\n    \"includes\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"excludes\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{baseUrl}}/api/v1/jobs"
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
										},
										{
											"name": "Forbidden. The user sending the request does not have adequate privileges to access one or more objects specified in the request.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													},
													{
														"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
														"key": "x-api-version",
														"value": "1.0-rev1"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"guestProcessing\": {\n    \"appAwareProcessing\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"guestFSIndexing\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"guestInteractionProxies\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"guestCredentials\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  \"isHighPriority\": false,\n  \"schedule\": {\n    \"runAutomatically\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"daily\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"monthly\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"periodically\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"continuously\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"afterThisJob\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"retry\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"backupWindow\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  \"storage\": {\n    \"backupProxies\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"backupRepositoryId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"retentionPolicy\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"gfsPolicy\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"advancedSettings\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  \"virtualMachines\": {\n    \"includes\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"excludes\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{baseUrl}}/api/v1/jobs"
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
										},
										{
											"name": "Internal server error. The request has been received but could not be completed because of an internal error at the server side.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													},
													{
														"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
														"key": "x-api-version",
														"value": "1.0-rev1"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"guestProcessing\": {\n    \"appAwareProcessing\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"guestFSIndexing\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"guestInteractionProxies\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"guestCredentials\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  \"isHighPriority\": false,\n  \"schedule\": {\n    \"runAutomatically\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"daily\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"monthly\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"periodically\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"continuously\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"afterThisJob\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"retry\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"backupWindow\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  \"storage\": {\n    \"backupProxies\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"backupRepositoryId\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"retentionPolicy\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"gfsPolicy\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"advancedSettings\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  },\n  \"virtualMachines\": {\n    \"includes\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    \"excludes\": {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{baseUrl}}/api/v1/jobs"
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
										}
									]
								},
								{
									"name": "Get All Job States",
									"request": {
										"method": "GET",
										"header": [
											{
												"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
												"key": "x-api-version",
												"value": "1.0-rev1"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v1/jobs/states?skip=-10937892&limit=-10937892&orderColumn=Name&orderAsc=true&idFilter=urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167&nameFilter=irure in officia laborum&typeFilter=Backup&lastResultFilter=Warning&statusFilter=disabled&workloadFilter=cloudVm&lastRunAfterFilter=1949-09-09T09:22:16.570Z&lastRunBeforeFilter=1949-09-09T09:22:16.570Z&isHighPriorityJobFilter=true&repositoryIdFilter=urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167&objectsCountFilter=-10937892",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"jobs",
												"states"
											],
											"query": [
												{
													"key": "skip",
													"value": "-10937892",
													"description": "Number of job states to skip."
												},
												{
													"key": "limit",
													"value": "-10937892",
													"description": "Maximum number of job states to return."
												},
												{
													"key": "orderColumn",
													"value": "Name",
													"description": "Sorts job states by one of the state parameters."
												},
												{
													"key": "orderAsc",
													"value": "true",
													"description": "Sorts job states in the ascending order by the `orderColumn` parameter."
												},
												{
													"key": "idFilter",
													"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
													"description": "Filters job states by job ID."
												},
												{
													"key": "nameFilter",
													"value": "irure in officia laborum",
													"description": "Filters job states by the `nameFilter` pattern. The pattern can match any state parameter. To substitute one or more characters, use the asterisk (*) character at the beginning and/or at the end."
												},
												{
													"key": "typeFilter",
													"value": "Backup",
													"description": "Filters job states by job type."
												},
												{
													"key": "lastResultFilter",
													"value": "Warning",
													"description": "Filters job states by status with which jobs must finish."
												},
												{
													"key": "statusFilter",
													"value": "disabled",
													"description": "Filters job states by current status of the job."
												},
												{
													"key": "workloadFilter",
													"value": "cloudVm",
													"description": "Filters job states by workloads that jobs must process."
												},
												{
													"key": "lastRunAfterFilter",
													"value": "1949-09-09T09:22:16.570Z",
													"description": "Returns job states for jobs that have run after the specified date and time."
												},
												{
													"key": "lastRunBeforeFilter",
													"value": "1949-09-09T09:22:16.570Z",
													"description": "Returns job states for jobs that have not run after the specified date and time."
												},
												{
													"key": "isHighPriorityJobFilter",
													"value": "true",
													"description": "If *true*, Returns job states for jobs with high priority."
												},
												{
													"key": "repositoryIdFilter",
													"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
													"description": "Filters job states by repository ID."
												},
												{
													"key": "objectsCountFilter",
													"value": "-10937892",
													"description": "Filters job states by number of objects processed by the job."
												}
											]
										},
										"description": "The HTTP GET request to the `/api/v1/jobs/states` path allows you to get an array of all job states. The states include brief job information that you can also find under the **Jobs** node in the Veeam Backup & Replication console."
									},
									"response": [
										{
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													},
													{
														"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
														"key": "x-api-version",
														"value": "1.0-rev1"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v1/jobs/states?skip=-10937892&limit=-10937892&orderColumn=Name&orderAsc=true&idFilter=urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167&nameFilter=irure in officia laborum&typeFilter=Backup&lastResultFilter=Warning&statusFilter=disabled&workloadFilter=cloudVm&lastRunAfterFilter=1949-09-09T09:22:16.570Z&lastRunBeforeFilter=1949-09-09T09:22:16.570Z&isHighPriorityJobFilter=true&repositoryIdFilter=urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167&objectsCountFilter=-10937892",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"jobs",
														"states"
													],
													"query": [
														{
															"key": "skip",
															"value": "-10937892"
														},
														{
															"key": "limit",
															"value": "-10937892"
														},
														{
															"key": "orderColumn",
															"value": "Name"
														},
														{
															"key": "orderAsc",
															"value": "true"
														},
														{
															"key": "idFilter",
															"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167"
														},
														{
															"key": "nameFilter",
															"value": "irure in officia laborum"
														},
														{
															"key": "typeFilter",
															"value": "Backup"
														},
														{
															"key": "lastResultFilter",
															"value": "Warning"
														},
														{
															"key": "statusFilter",
															"value": "disabled"
														},
														{
															"key": "workloadFilter",
															"value": "cloudVm"
														},
														{
															"key": "lastRunAfterFilter",
															"value": "1949-09-09T09:22:16.570Z"
														},
														{
															"key": "lastRunBeforeFilter",
															"value": "1949-09-09T09:22:16.570Z"
														},
														{
															"key": "isHighPriorityJobFilter",
															"value": "true"
														},
														{
															"key": "repositoryIdFilter",
															"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167"
														},
														{
															"key": "objectsCountFilter",
															"value": "-10937892"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"data\": [\n    {\n      \"id\": \"05cf3f34-5265-0827-c3a2-dc896ddec237\",\n      \"name\": \"dolor sint\",\n      \"type\": \"Backup\",\n      \"description\": \"pariatur laboris\",\n      \"status\": \"running\",\n      \"lastResult\": \"None\",\n      \"workload\": \"application\",\n      \"objectsCount\": 72701446,\n      \"lastRun\": \"2020-11-09T14:15:13.475Z\",\n      \"nextRun\": \"1999-03-16T12:06:44.358Z\",\n      \"repositoryId\": \"urn:uuid:a78b81e4-a47d-5747-e5b3-68116238f4d7\",\n      \"repositoryName\": \"magna esse id sit sed\",\n      \"sessionId\": \"2a9e24dd-7b2e-d167-08c4-cdc553e3a91d\"\n    },\n    {\n      \"id\": \"88aaac54-72bc-0bff-9bc2-5de869011483\",\n      \"name\": \"labore\",\n      \"type\": \"Backup\",\n      \"description\": \"do sunt in ut\",\n      \"status\": \"disabled\",\n      \"lastResult\": \"Success\",\n      \"workload\": \"vm\",\n      \"objectsCount\": -65611065,\n      \"lastRun\": \"1979-04-18T03:10:12.372Z\",\n      \"nextRun\": \"2009-09-20T15:35:57.606Z\",\n      \"repositoryId\": \"urn:uuid:686fe7aa-51a2-5ffb-b4e1-fd554a844fe6\",\n      \"repositoryName\": \"fugiat aliqua anim\",\n      \"sessionId\": \"511b549a-fdc0-58fb-aa81-b0fc1dfb5d2c\"\n    }\n  ],\n  \"pagination\": {\n    \"total\": 36115920,\n    \"count\": 45229276,\n    \"skip\": -11723115,\n    \"limit\": 38783076\n  }\n}"
										},
										{
											"name": "Unauthorized. The authorization header has been expected but not found (or found but is expired).",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													},
													{
														"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
														"key": "x-api-version",
														"value": "1.0-rev1"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v1/jobs/states?skip=-10937892&limit=-10937892&orderColumn=Name&orderAsc=true&idFilter=urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167&nameFilter=irure in officia laborum&typeFilter=Backup&lastResultFilter=Warning&statusFilter=disabled&workloadFilter=cloudVm&lastRunAfterFilter=1949-09-09T09:22:16.570Z&lastRunBeforeFilter=1949-09-09T09:22:16.570Z&isHighPriorityJobFilter=true&repositoryIdFilter=urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167&objectsCountFilter=-10937892",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"jobs",
														"states"
													],
													"query": [
														{
															"key": "skip",
															"value": "-10937892"
														},
														{
															"key": "limit",
															"value": "-10937892"
														},
														{
															"key": "orderColumn",
															"value": "Name"
														},
														{
															"key": "orderAsc",
															"value": "true"
														},
														{
															"key": "idFilter",
															"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167"
														},
														{
															"key": "nameFilter",
															"value": "irure in officia laborum"
														},
														{
															"key": "typeFilter",
															"value": "Backup"
														},
														{
															"key": "lastResultFilter",
															"value": "Warning"
														},
														{
															"key": "statusFilter",
															"value": "disabled"
														},
														{
															"key": "workloadFilter",
															"value": "cloudVm"
														},
														{
															"key": "lastRunAfterFilter",
															"value": "1949-09-09T09:22:16.570Z"
														},
														{
															"key": "lastRunBeforeFilter",
															"value": "1949-09-09T09:22:16.570Z"
														},
														{
															"key": "isHighPriorityJobFilter",
															"value": "true"
														},
														{
															"key": "repositoryIdFilter",
															"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167"
														},
														{
															"key": "objectsCountFilter",
															"value": "-10937892"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
										},
										{
											"name": "Forbidden. The user sending the request does not have adequate privileges to access one or more objects specified in the request.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													},
													{
														"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
														"key": "x-api-version",
														"value": "1.0-rev1"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v1/jobs/states?skip=-10937892&limit=-10937892&orderColumn=Name&orderAsc=true&idFilter=urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167&nameFilter=irure in officia laborum&typeFilter=Backup&lastResultFilter=Warning&statusFilter=disabled&workloadFilter=cloudVm&lastRunAfterFilter=1949-09-09T09:22:16.570Z&lastRunBeforeFilter=1949-09-09T09:22:16.570Z&isHighPriorityJobFilter=true&repositoryIdFilter=urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167&objectsCountFilter=-10937892",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"jobs",
														"states"
													],
													"query": [
														{
															"key": "skip",
															"value": "-10937892"
														},
														{
															"key": "limit",
															"value": "-10937892"
														},
														{
															"key": "orderColumn",
															"value": "Name"
														},
														{
															"key": "orderAsc",
															"value": "true"
														},
														{
															"key": "idFilter",
															"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167"
														},
														{
															"key": "nameFilter",
															"value": "irure in officia laborum"
														},
														{
															"key": "typeFilter",
															"value": "Backup"
														},
														{
															"key": "lastResultFilter",
															"value": "Warning"
														},
														{
															"key": "statusFilter",
															"value": "disabled"
														},
														{
															"key": "workloadFilter",
															"value": "cloudVm"
														},
														{
															"key": "lastRunAfterFilter",
															"value": "1949-09-09T09:22:16.570Z"
														},
														{
															"key": "lastRunBeforeFilter",
															"value": "1949-09-09T09:22:16.570Z"
														},
														{
															"key": "isHighPriorityJobFilter",
															"value": "true"
														},
														{
															"key": "repositoryIdFilter",
															"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167"
														},
														{
															"key": "objectsCountFilter",
															"value": "-10937892"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
										},
										{
											"name": "Internal server error. The request has been received but could not be completed because of an internal error at the server side.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													},
													{
														"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
														"key": "x-api-version",
														"value": "1.0-rev1"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v1/jobs/states?skip=-10937892&limit=-10937892&orderColumn=Name&orderAsc=true&idFilter=urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167&nameFilter=irure in officia laborum&typeFilter=Backup&lastResultFilter=Warning&statusFilter=disabled&workloadFilter=cloudVm&lastRunAfterFilter=1949-09-09T09:22:16.570Z&lastRunBeforeFilter=1949-09-09T09:22:16.570Z&isHighPriorityJobFilter=true&repositoryIdFilter=urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167&objectsCountFilter=-10937892",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"jobs",
														"states"
													],
													"query": [
														{
															"key": "skip",
															"value": "-10937892"
														},
														{
															"key": "limit",
															"value": "-10937892"
														},
														{
															"key": "orderColumn",
															"value": "Name"
														},
														{
															"key": "orderAsc",
															"value": "true"
														},
														{
															"key": "idFilter",
															"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167"
														},
														{
															"key": "nameFilter",
															"value": "irure in officia laborum"
														},
														{
															"key": "typeFilter",
															"value": "Backup"
														},
														{
															"key": "lastResultFilter",
															"value": "Warning"
														},
														{
															"key": "statusFilter",
															"value": "disabled"
														},
														{
															"key": "workloadFilter",
															"value": "cloudVm"
														},
														{
															"key": "lastRunAfterFilter",
															"value": "1949-09-09T09:22:16.570Z"
														},
														{
															"key": "lastRunBeforeFilter",
															"value": "1949-09-09T09:22:16.570Z"
														},
														{
															"key": "isHighPriorityJobFilter",
															"value": "true"
														},
														{
															"key": "repositoryIdFilter",
															"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167"
														},
														{
															"key": "objectsCountFilter",
															"value": "-10937892"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
										}
									]
								}
							]
						},
						{
							"name": "credentials",
							"item": [
								{
									"name": "{id}",
									"item": [
										{
											"name": "Get Credentials Record",
											"request": {
												"method": "GET",
												"header": [
													{
														"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
														"key": "x-api-version",
														"value": "1.0-rev1"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v1/credentials/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"credentials",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
															"description": "(Required) ID of the credentials record."
														}
													]
												},
												"description": "The HTTP GET request to the `/api/v1/credentials/{id}` path allows you to get a credentials record that has the specified `id`."
											},
											"response": [
												{
													"name": "OK",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v1/credentials/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"credentials",
																":id"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																	"description": "(Required) ID of the credentials record."
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"tag\": \"sunt commodo elit et\"\n}"
												},
												{
													"name": "Unauthorized. The authorization header has been expected but not found (or found but is expired).",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v1/credentials/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"credentials",
																":id"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																	"description": "(Required) ID of the credentials record."
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												},
												{
													"name": "Forbidden. The user sending the request does not have adequate privileges to access one or more objects specified in the request.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v1/credentials/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"credentials",
																":id"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																	"description": "(Required) ID of the credentials record."
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												},
												{
													"name": "Not found. No object was found with the path parameter specified in the request.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v1/credentials/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"credentials",
																":id"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																	"description": "(Required) ID of the credentials record."
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												},
												{
													"name": "Internal server error. The request has been received but could not be completed because of an internal error at the server side.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v1/credentials/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"credentials",
																":id"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																	"description": "(Required) ID of the credentials record."
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												}
											]
										},
										{
											"name": "Edit Credentials Record",
											"request": {
												"method": "PUT",
												"header": [
													{
														"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
														"key": "x-api-version",
														"value": "1.0-rev1"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"tag\": \"sunt commodo elit et\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/v1/credentials/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"credentials",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
															"description": "(Required) ID of the credentials record."
														}
													]
												},
												"description": "The HTTP PUT request to the `/api/v1/credentials/{id}` path allows you to edit a credentials record that has the specified `id`."
											},
											"response": [
												{
													"name": "Credentials record has been updated.",
													"originalRequest": {
														"method": "PUT",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"tag\": \"sunt commodo elit et\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/v1/credentials/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"credentials",
																":id"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																	"description": "(Required) ID of the credentials record."
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"tag\": \"sunt commodo elit et\"\n}"
												},
												{
													"name": "Bad request. This error is related to POST/PUT requests. The request body is malformed, incomplete or otherwise invalid.",
													"originalRequest": {
														"method": "PUT",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"tag\": \"sunt commodo elit et\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/v1/credentials/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"credentials",
																":id"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																	"description": "(Required) ID of the credentials record."
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												},
												{
													"name": "Unauthorized. The authorization header has been expected but not found (or found but is expired).",
													"originalRequest": {
														"method": "PUT",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"tag\": \"sunt commodo elit et\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/v1/credentials/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"credentials",
																":id"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																	"description": "(Required) ID of the credentials record."
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												},
												{
													"name": "Forbidden. The user sending the request does not have adequate privileges to access one or more objects specified in the request.",
													"originalRequest": {
														"method": "PUT",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"tag\": \"sunt commodo elit et\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/v1/credentials/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"credentials",
																":id"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																	"description": "(Required) ID of the credentials record."
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												},
												{
													"name": "Not found. No object was found with the path parameter specified in the request.",
													"originalRequest": {
														"method": "PUT",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"tag\": \"sunt commodo elit et\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/v1/credentials/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"credentials",
																":id"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																	"description": "(Required) ID of the credentials record."
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												},
												{
													"name": "Internal server error. The request has been received but could not be completed because of an internal error at the server side.",
													"originalRequest": {
														"method": "PUT",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"tag\": \"sunt commodo elit et\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/v1/credentials/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"credentials",
																":id"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																	"description": "(Required) ID of the credentials record."
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												}
											]
										},
										{
											"name": "Remove Credentials Record",
											"request": {
												"method": "DELETE",
												"header": [
													{
														"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
														"key": "x-api-version",
														"value": "1.0-rev1"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v1/credentials/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"credentials",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
															"description": "(Required) ID of the credentials record."
														}
													]
												},
												"description": "The HTTP DELETE request to the `/api/v1/credentials/{id}` path allows you to remove a credentials record that has the specified `id`."
											},
											"response": [
												{
													"name": "Credentials record has been removed.",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v1/credentials/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"credentials",
																":id"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																	"description": "(Required) ID of the credentials record."
																}
															]
														}
													},
													"status": "No Content",
													"code": 204,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{}"
												},
												{
													"name": "Unauthorized. The authorization header has been expected but not found (or found but is expired).",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v1/credentials/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"credentials",
																":id"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																	"description": "(Required) ID of the credentials record."
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												},
												{
													"name": "Forbidden. The user sending the request does not have adequate privileges to access one or more objects specified in the request.",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v1/credentials/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"credentials",
																":id"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																	"description": "(Required) ID of the credentials record."
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												},
												{
													"name": "Not found. No object was found with the path parameter specified in the request.",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v1/credentials/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"credentials",
																":id"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																	"description": "(Required) ID of the credentials record."
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												},
												{
													"name": "Internal server error. The request has been received but could not be completed because of an internal error at the server side.",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v1/credentials/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"credentials",
																":id"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																	"description": "(Required) ID of the credentials record."
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												}
											]
										},
										{
											"name": "Change Password",
											"request": {
												"method": "POST",
												"header": [
													{
														"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
														"key": "x-api-version",
														"value": "1.0-rev1"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"password\": \"dolore anim\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/v1/credentials/:id/changepassword",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"credentials",
														":id",
														"changepassword"
													],
													"variable": [
														{
															"key": "id",
															"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
															"description": "(Required) ID of the credentials record."
														}
													]
												},
												"description": "The HTTP POST request to the `/api/v1/credentials/{id}/changepassword` path allows you to change a password of the credentials record that has the specified `id`."
											},
											"response": [
												{
													"name": "Password has been changed.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"password\": \"dolore anim\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/v1/credentials/:id/changepassword",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"credentials",
																":id",
																"changepassword"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																	"description": "(Required) ID of the credentials record."
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{}"
												},
												{
													"name": "Bad request. This error is related to POST/PUT requests. The request body is malformed, incomplete or otherwise invalid.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"password\": \"dolore anim\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/v1/credentials/:id/changepassword",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"credentials",
																":id",
																"changepassword"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																	"description": "(Required) ID of the credentials record."
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												},
												{
													"name": "Unauthorized. The authorization header has been expected but not found (or found but is expired).",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"password\": \"dolore anim\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/v1/credentials/:id/changepassword",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"credentials",
																":id",
																"changepassword"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																	"description": "(Required) ID of the credentials record."
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												},
												{
													"name": "Forbidden. The user sending the request does not have adequate privileges to access one or more objects specified in the request.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"password\": \"dolore anim\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/v1/credentials/:id/changepassword",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"credentials",
																":id",
																"changepassword"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																	"description": "(Required) ID of the credentials record."
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												},
												{
													"name": "Not found. No object was found with the path parameter specified in the request.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"password\": \"dolore anim\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/v1/credentials/:id/changepassword",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"credentials",
																":id",
																"changepassword"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																	"description": "(Required) ID of the credentials record."
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												},
												{
													"name": "Internal server error. The request has been received but could not be completed because of an internal error at the server side.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"password\": \"dolore anim\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/v1/credentials/:id/changepassword",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"credentials",
																":id",
																"changepassword"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																	"description": "(Required) ID of the credentials record."
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												}
											]
										},
										{
											"name": "Change Linux Private Key",
											"request": {
												"method": "POST",
												"header": [
													{
														"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
														"key": "x-api-version",
														"value": "1.0-rev1"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"privateKey\": \"deserunt\",\n  \"passphrase\": \"eu est\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/v1/credentials/:id/changeprivatekey",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"credentials",
														":id",
														"changeprivatekey"
													],
													"variable": [
														{
															"key": "id",
															"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
															"description": "(Required) ID of the credentials record."
														}
													]
												},
												"description": "The HTTP POST request to the `/api/v1/credentials/{id}/changeprivatekey` path allows you to change a Linux private key of the credentials record that has the specified `id`."
											},
											"response": [
												{
													"name": "Private key has been changed.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"privateKey\": \"deserunt\",\n  \"passphrase\": \"eu est\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/v1/credentials/:id/changeprivatekey",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"credentials",
																":id",
																"changeprivatekey"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																	"description": "(Required) ID of the credentials record."
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{}"
												},
												{
													"name": "Bad request. This error is related to POST/PUT requests. The request body is malformed, incomplete or otherwise invalid.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"privateKey\": \"deserunt\",\n  \"passphrase\": \"eu est\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/v1/credentials/:id/changeprivatekey",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"credentials",
																":id",
																"changeprivatekey"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																	"description": "(Required) ID of the credentials record."
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												},
												{
													"name": "Unauthorized. The authorization header has been expected but not found (or found but is expired).",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"privateKey\": \"deserunt\",\n  \"passphrase\": \"eu est\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/v1/credentials/:id/changeprivatekey",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"credentials",
																":id",
																"changeprivatekey"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																	"description": "(Required) ID of the credentials record."
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												},
												{
													"name": "Forbidden. The user sending the request does not have adequate privileges to access one or more objects specified in the request.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"privateKey\": \"deserunt\",\n  \"passphrase\": \"eu est\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/v1/credentials/:id/changeprivatekey",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"credentials",
																":id",
																"changeprivatekey"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																	"description": "(Required) ID of the credentials record."
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												},
												{
													"name": "Not found. No object was found with the path parameter specified in the request.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"privateKey\": \"deserunt\",\n  \"passphrase\": \"eu est\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/v1/credentials/:id/changeprivatekey",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"credentials",
																":id",
																"changeprivatekey"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																	"description": "(Required) ID of the credentials record."
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												},
												{
													"name": "Internal server error. The request has been received but could not be completed because of an internal error at the server side.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"privateKey\": \"deserunt\",\n  \"passphrase\": \"eu est\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/v1/credentials/:id/changeprivatekey",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"credentials",
																":id",
																"changeprivatekey"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																	"description": "(Required) ID of the credentials record."
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												}
											]
										},
										{
											"name": "Change Linux Root Password",
											"request": {
												"method": "POST",
												"header": [
													{
														"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
														"key": "x-api-version",
														"value": "1.0-rev1"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"password\": \"dolore anim\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/v1/credentials/:id/changerootpassword",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"credentials",
														":id",
														"changerootpassword"
													],
													"variable": [
														{
															"key": "id",
															"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
															"description": "(Required) ID of the credentials record."
														}
													]
												},
												"description": "The HTTP POST request to the `/api/v1/credentials/{id}/changerootpassword` path allows you to change a Linux root password of the credentials record that has the specified `id`."
											},
											"response": [
												{
													"name": "Root password has been changed.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"password\": \"dolore anim\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/v1/credentials/:id/changerootpassword",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"credentials",
																":id",
																"changerootpassword"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																	"description": "(Required) ID of the credentials record."
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{}"
												},
												{
													"name": "Bad request. This error is related to POST/PUT requests. The request body is malformed, incomplete or otherwise invalid.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"password\": \"dolore anim\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/v1/credentials/:id/changerootpassword",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"credentials",
																":id",
																"changerootpassword"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																	"description": "(Required) ID of the credentials record."
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												},
												{
													"name": "Unauthorized. The authorization header has been expected but not found (or found but is expired).",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"password\": \"dolore anim\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/v1/credentials/:id/changerootpassword",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"credentials",
																":id",
																"changerootpassword"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																	"description": "(Required) ID of the credentials record."
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												},
												{
													"name": "Forbidden. The user sending the request does not have adequate privileges to access one or more objects specified in the request.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"password\": \"dolore anim\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/v1/credentials/:id/changerootpassword",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"credentials",
																":id",
																"changerootpassword"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																	"description": "(Required) ID of the credentials record."
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												},
												{
													"name": "Not found. No object was found with the path parameter specified in the request.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"password\": \"dolore anim\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/v1/credentials/:id/changerootpassword",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"credentials",
																":id",
																"changerootpassword"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																	"description": "(Required) ID of the credentials record."
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												},
												{
													"name": "Internal server error. The request has been received but could not be completed because of an internal error at the server side.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"password\": \"dolore anim\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/v1/credentials/:id/changerootpassword",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"credentials",
																":id",
																"changerootpassword"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																	"description": "(Required) ID of the credentials record."
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												}
											]
										}
									]
								},
								{
									"name": "Get All Credentials",
									"request": {
										"method": "GET",
										"header": [
											{
												"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
												"key": "x-api-version",
												"value": "1.0-rev1"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v1/credentials?skip=-10937892&limit=-10937892&orderColumn=Username&orderAsc=true&nameFilter=irure in officia laborum",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"credentials"
											],
											"query": [
												{
													"key": "skip",
													"value": "-10937892",
													"description": "Number of credentials records to skip."
												},
												{
													"key": "limit",
													"value": "-10937892",
													"description": "Maximum number of credentials records to return."
												},
												{
													"key": "orderColumn",
													"value": "Username",
													"description": "Sorts credentials by one of the credentials parameters."
												},
												{
													"key": "orderAsc",
													"value": "true",
													"description": "Sorts credentials in the ascending order by the `orderColumn` parameter."
												},
												{
													"key": "nameFilter",
													"value": "irure in officia laborum",
													"description": "Filters credentials by the `nameFilter` pattern. The pattern can match any credentials parameter. To substitute one or more characters, use the asterisk (*) character at the beginning and/or at the end."
												}
											]
										},
										"description": "The HTTP GET request to the `/api/v1/credentials` path allows you to get an array of credentials records that are added to the backup server."
									},
									"response": [
										{
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													},
													{
														"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
														"key": "x-api-version",
														"value": "1.0-rev1"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v1/credentials?skip=-10937892&limit=-10937892&orderColumn=Username&orderAsc=true&nameFilter=irure in officia laborum",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"credentials"
													],
													"query": [
														{
															"key": "skip",
															"value": "-10937892"
														},
														{
															"key": "limit",
															"value": "-10937892"
														},
														{
															"key": "orderColumn",
															"value": "Username"
														},
														{
															"key": "orderAsc",
															"value": "true"
														},
														{
															"key": "nameFilter",
															"value": "irure in officia laborum"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"data\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"pagination\": {\n    \"total\": 34872435,\n    \"count\": 90016114,\n    \"skip\": 55011593,\n    \"limit\": 57932281\n  }\n}"
										},
										{
											"name": "Unauthorized. The authorization header has been expected but not found (or found but is expired).",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													},
													{
														"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
														"key": "x-api-version",
														"value": "1.0-rev1"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v1/credentials?skip=-10937892&limit=-10937892&orderColumn=Username&orderAsc=true&nameFilter=irure in officia laborum",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"credentials"
													],
													"query": [
														{
															"key": "skip",
															"value": "-10937892"
														},
														{
															"key": "limit",
															"value": "-10937892"
														},
														{
															"key": "orderColumn",
															"value": "Username"
														},
														{
															"key": "orderAsc",
															"value": "true"
														},
														{
															"key": "nameFilter",
															"value": "irure in officia laborum"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
										},
										{
											"name": "Forbidden. The user sending the request does not have adequate privileges to access one or more objects specified in the request.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													},
													{
														"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
														"key": "x-api-version",
														"value": "1.0-rev1"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v1/credentials?skip=-10937892&limit=-10937892&orderColumn=Username&orderAsc=true&nameFilter=irure in officia laborum",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"credentials"
													],
													"query": [
														{
															"key": "skip",
															"value": "-10937892"
														},
														{
															"key": "limit",
															"value": "-10937892"
														},
														{
															"key": "orderColumn",
															"value": "Username"
														},
														{
															"key": "orderAsc",
															"value": "true"
														},
														{
															"key": "nameFilter",
															"value": "irure in officia laborum"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
										},
										{
											"name": "Internal server error. The request has been received but could not be completed because of an internal error at the server side.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													},
													{
														"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
														"key": "x-api-version",
														"value": "1.0-rev1"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v1/credentials?skip=-10937892&limit=-10937892&orderColumn=Username&orderAsc=true&nameFilter=irure in officia laborum",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"credentials"
													],
													"query": [
														{
															"key": "skip",
															"value": "-10937892"
														},
														{
															"key": "limit",
															"value": "-10937892"
														},
														{
															"key": "orderColumn",
															"value": "Username"
														},
														{
															"key": "orderAsc",
															"value": "true"
														},
														{
															"key": "nameFilter",
															"value": "irure in officia laborum"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
										}
									]
								},
								{
									"name": "Add Credentials Record",
									"request": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
												"key": "x-api-version",
												"value": "1.0-rev1"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"tag\": \"cupidatat nulla dolor nostrud Ut\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{baseUrl}}/api/v1/credentials",
										"description": "The HTTP POST request to the `/api/v1/credentials` path allows you to add a credentials record."
									},
									"response": [
										{
											"name": "Account has been added.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													},
													{
														"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
														"key": "x-api-version",
														"value": "1.0-rev1"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"tag\": \"cupidatat nulla dolor nostrud Ut\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{baseUrl}}/api/v1/credentials"
											},
											"status": "Created",
											"code": 201,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"tag\": \"sunt commodo elit et\"\n}"
										},
										{
											"name": "Bad request. This error is related to POST/PUT requests. The request body is malformed, incomplete or otherwise invalid.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													},
													{
														"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
														"key": "x-api-version",
														"value": "1.0-rev1"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"tag\": \"cupidatat nulla dolor nostrud Ut\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{baseUrl}}/api/v1/credentials"
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
										},
										{
											"name": "Unauthorized. The authorization header has been expected but not found (or found but is expired).",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													},
													{
														"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
														"key": "x-api-version",
														"value": "1.0-rev1"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"tag\": \"cupidatat nulla dolor nostrud Ut\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{baseUrl}}/api/v1/credentials"
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
										},
										{
											"name": "Forbidden. The user sending the request does not have adequate privileges to access one or more objects specified in the request.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													},
													{
														"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
														"key": "x-api-version",
														"value": "1.0-rev1"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"tag\": \"cupidatat nulla dolor nostrud Ut\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{baseUrl}}/api/v1/credentials"
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
										},
										{
											"name": "Internal server error. The request has been received but could not be completed because of an internal error at the server side.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													},
													{
														"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
														"key": "x-api-version",
														"value": "1.0-rev1"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"tag\": \"cupidatat nulla dolor nostrud Ut\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{baseUrl}}/api/v1/credentials"
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
										}
									]
								}
							]
						},
						{
							"name": "encryption Passwords",
							"item": [
								{
									"name": "{id}",
									"item": [
										{
											"name": "Get Encryption Password",
											"request": {
												"method": "GET",
												"header": [
													{
														"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
														"key": "x-api-version",
														"value": "1.0-rev1"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v1/encryptionPasswords/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"encryptionPasswords",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
															"description": "(Required) ID of the encryption password."
														}
													]
												},
												"description": "The HTTP GET request to the `/api/v1/encryptionPasswords/{id}` path allows you to get an encryption password that has the specified `id`."
											},
											"response": [
												{
													"name": "OK",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v1/encryptionPasswords/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"encryptionPasswords",
																":id"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																	"description": "(Required) ID of the encryption password."
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"hint\": \"ex in dolore\",\n  \"id\": \"7b0b2350-14aa-abe7-d8b7-64e92e73b743\",\n  \"modificationTime\": \"1961-07-12T03:44:54.181Z\",\n  \"tag\": \"consectetur\"\n}"
												},
												{
													"name": "Unauthorized. The authorization header has been expected but not found (or found but is expired).",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v1/encryptionPasswords/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"encryptionPasswords",
																":id"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																	"description": "(Required) ID of the encryption password."
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												},
												{
													"name": "Forbidden. The user sending the request does not have adequate privileges to access one or more objects specified in the request.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v1/encryptionPasswords/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"encryptionPasswords",
																":id"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																	"description": "(Required) ID of the encryption password."
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												},
												{
													"name": "Not found. No object was found with the path parameter specified in the request.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v1/encryptionPasswords/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"encryptionPasswords",
																":id"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																	"description": "(Required) ID of the encryption password."
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												},
												{
													"name": "Internal server error. The request has been received but could not be completed because of an internal error at the server side.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v1/encryptionPasswords/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"encryptionPasswords",
																":id"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																	"description": "(Required) ID of the encryption password."
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												}
											]
										},
										{
											"name": "Edit Encryption Password",
											"request": {
												"method": "PUT",
												"header": [
													{
														"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
														"key": "x-api-version",
														"value": "1.0-rev1"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"hint\": \"ex in dolore\",\n  \"id\": \"7b0b2350-14aa-abe7-d8b7-64e92e73b743\",\n  \"modificationTime\": \"1961-07-12T03:44:54.181Z\",\n  \"tag\": \"consectetur\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/v1/encryptionPasswords/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"encryptionPasswords",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
															"description": "(Required) ID of the encryption password."
														}
													]
												},
												"description": "The HTTP PUT request to the `/api/v1/encryptionPasswords/{id}` path allows you to edit an encryption password that has the specified `id`."
											},
											"response": [
												{
													"name": "Password has been updated.",
													"originalRequest": {
														"method": "PUT",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"hint\": \"ex in dolore\",\n  \"id\": \"7b0b2350-14aa-abe7-d8b7-64e92e73b743\",\n  \"modificationTime\": \"1961-07-12T03:44:54.181Z\",\n  \"tag\": \"consectetur\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/v1/encryptionPasswords/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"encryptionPasswords",
																":id"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																	"description": "(Required) ID of the encryption password."
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"hint\": \"ex in dolore\",\n  \"id\": \"7b0b2350-14aa-abe7-d8b7-64e92e73b743\",\n  \"modificationTime\": \"1961-07-12T03:44:54.181Z\",\n  \"tag\": \"consectetur\"\n}"
												},
												{
													"name": "Bad request. This error is related to POST/PUT requests. The request body is malformed, incomplete or otherwise invalid.",
													"originalRequest": {
														"method": "PUT",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"hint\": \"ex in dolore\",\n  \"id\": \"7b0b2350-14aa-abe7-d8b7-64e92e73b743\",\n  \"modificationTime\": \"1961-07-12T03:44:54.181Z\",\n  \"tag\": \"consectetur\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/v1/encryptionPasswords/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"encryptionPasswords",
																":id"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																	"description": "(Required) ID of the encryption password."
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												},
												{
													"name": "Unauthorized. The authorization header has been expected but not found (or found but is expired).",
													"originalRequest": {
														"method": "PUT",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"hint\": \"ex in dolore\",\n  \"id\": \"7b0b2350-14aa-abe7-d8b7-64e92e73b743\",\n  \"modificationTime\": \"1961-07-12T03:44:54.181Z\",\n  \"tag\": \"consectetur\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/v1/encryptionPasswords/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"encryptionPasswords",
																":id"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																	"description": "(Required) ID of the encryption password."
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												},
												{
													"name": "Forbidden. The user sending the request does not have adequate privileges to access one or more objects specified in the request.",
													"originalRequest": {
														"method": "PUT",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"hint\": \"ex in dolore\",\n  \"id\": \"7b0b2350-14aa-abe7-d8b7-64e92e73b743\",\n  \"modificationTime\": \"1961-07-12T03:44:54.181Z\",\n  \"tag\": \"consectetur\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/v1/encryptionPasswords/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"encryptionPasswords",
																":id"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																	"description": "(Required) ID of the encryption password."
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												},
												{
													"name": "Not found. No object was found with the path parameter specified in the request.",
													"originalRequest": {
														"method": "PUT",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"hint\": \"ex in dolore\",\n  \"id\": \"7b0b2350-14aa-abe7-d8b7-64e92e73b743\",\n  \"modificationTime\": \"1961-07-12T03:44:54.181Z\",\n  \"tag\": \"consectetur\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/v1/encryptionPasswords/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"encryptionPasswords",
																":id"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																	"description": "(Required) ID of the encryption password."
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												},
												{
													"name": "Internal server error. The request has been received but could not be completed because of an internal error at the server side.",
													"originalRequest": {
														"method": "PUT",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"hint\": \"ex in dolore\",\n  \"id\": \"7b0b2350-14aa-abe7-d8b7-64e92e73b743\",\n  \"modificationTime\": \"1961-07-12T03:44:54.181Z\",\n  \"tag\": \"consectetur\"\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/v1/encryptionPasswords/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"encryptionPasswords",
																":id"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																	"description": "(Required) ID of the encryption password."
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												}
											]
										},
										{
											"name": "Remove Encryption Password",
											"request": {
												"method": "DELETE",
												"header": [
													{
														"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
														"key": "x-api-version",
														"value": "1.0-rev1"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v1/encryptionPasswords/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"encryptionPasswords",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
															"description": "(Required) ID of the encryption password."
														}
													]
												},
												"description": "The HTTP DELETE request to the `/api/v1/encryptionPasswords/{id}` path allows you to remove an encryption password that has the specified `id`."
											},
											"response": [
												{
													"name": "Password has been removed.",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v1/encryptionPasswords/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"encryptionPasswords",
																":id"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																	"description": "(Required) ID of the encryption password."
																}
															]
														}
													},
													"status": "No Content",
													"code": 204,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{}"
												},
												{
													"name": "Unauthorized. The authorization header has been expected but not found (or found but is expired).",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v1/encryptionPasswords/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"encryptionPasswords",
																":id"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																	"description": "(Required) ID of the encryption password."
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												},
												{
													"name": "Forbidden. The user sending the request does not have adequate privileges to access one or more objects specified in the request.",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v1/encryptionPasswords/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"encryptionPasswords",
																":id"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																	"description": "(Required) ID of the encryption password."
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												},
												{
													"name": "Not found. No object was found with the path parameter specified in the request.",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v1/encryptionPasswords/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"encryptionPasswords",
																":id"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																	"description": "(Required) ID of the encryption password."
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												},
												{
													"name": "Internal server error. The request has been received but could not be completed because of an internal error at the server side.",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v1/encryptionPasswords/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"encryptionPasswords",
																":id"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																	"description": "(Required) ID of the encryption password."
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												}
											]
										}
									]
								},
								{
									"name": "Get All Encryption Passwords",
									"request": {
										"method": "GET",
										"header": [
											{
												"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
												"key": "x-api-version",
												"value": "1.0-rev1"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v1/encryptionPasswords?skip=-10937892&limit=-10937892&orderColumn=Hint&orderAsc=true",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"encryptionPasswords"
											],
											"query": [
												{
													"key": "skip",
													"value": "-10937892",
													"description": "Number of passwords to skip."
												},
												{
													"key": "limit",
													"value": "-10937892",
													"description": "Maximum number of passwords to return."
												},
												{
													"key": "orderColumn",
													"value": "Hint",
													"description": "Sorts passwords by one of the password parameters."
												},
												{
													"key": "orderAsc",
													"value": "true",
													"description": "Sorts passwords in the ascending order by the `orderColumn` parameter."
												}
											]
										},
										"description": "The HTTP GET request to the `/api/v1/encryptionPasswords` path allows you to get an array of all passwords that are used for data encryption."
									},
									"response": [
										{
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													},
													{
														"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
														"key": "x-api-version",
														"value": "1.0-rev1"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v1/encryptionPasswords?skip=-10937892&limit=-10937892&orderColumn=Hint&orderAsc=true",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"encryptionPasswords"
													],
													"query": [
														{
															"key": "skip",
															"value": "-10937892"
														},
														{
															"key": "limit",
															"value": "-10937892"
														},
														{
															"key": "orderColumn",
															"value": "Hint"
														},
														{
															"key": "orderAsc",
															"value": "true"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"data\": [\n    {\n      \"hint\": \"cillum Ut non proident culpa\",\n      \"id\": \"urn:uuid:d3e026e3-f262-f6f8-7b4d-d0e9e39ba8ff\",\n      \"modificationTime\": \"1946-01-20T07:48:02.692Z\",\n      \"tag\": \"adipisicing cupidat\"\n    },\n    {\n      \"hint\": \"voluptate dolore eiusmod\",\n      \"id\": \"4990d979-192e-ca80-ce19-8170e9c69cae\",\n      \"modificationTime\": \"1975-04-08T17:42:21.247Z\",\n      \"tag\": \"minim commodo\"\n    }\n  ],\n  \"pagination\": {\n    \"total\": -64836772,\n    \"count\": 88864931,\n    \"skip\": -74687554,\n    \"limit\": -55053473\n  }\n}"
										},
										{
											"name": "Unauthorized. The authorization header has been expected but not found (or found but is expired).",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													},
													{
														"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
														"key": "x-api-version",
														"value": "1.0-rev1"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v1/encryptionPasswords?skip=-10937892&limit=-10937892&orderColumn=Hint&orderAsc=true",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"encryptionPasswords"
													],
													"query": [
														{
															"key": "skip",
															"value": "-10937892"
														},
														{
															"key": "limit",
															"value": "-10937892"
														},
														{
															"key": "orderColumn",
															"value": "Hint"
														},
														{
															"key": "orderAsc",
															"value": "true"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
										},
										{
											"name": "Forbidden. The user sending the request does not have adequate privileges to access one or more objects specified in the request.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													},
													{
														"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
														"key": "x-api-version",
														"value": "1.0-rev1"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v1/encryptionPasswords?skip=-10937892&limit=-10937892&orderColumn=Hint&orderAsc=true",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"encryptionPasswords"
													],
													"query": [
														{
															"key": "skip",
															"value": "-10937892"
														},
														{
															"key": "limit",
															"value": "-10937892"
														},
														{
															"key": "orderColumn",
															"value": "Hint"
														},
														{
															"key": "orderAsc",
															"value": "true"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
										},
										{
											"name": "Internal server error. The request has been received but could not be completed because of an internal error at the server side.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													},
													{
														"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
														"key": "x-api-version",
														"value": "1.0-rev1"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v1/encryptionPasswords?skip=-10937892&limit=-10937892&orderColumn=Hint&orderAsc=true",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"encryptionPasswords"
													],
													"query": [
														{
															"key": "skip",
															"value": "-10937892"
														},
														{
															"key": "limit",
															"value": "-10937892"
														},
														{
															"key": "orderColumn",
															"value": "Hint"
														},
														{
															"key": "orderAsc",
															"value": "true"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
										}
									]
								},
								{
									"name": "Add Encryption Password",
									"request": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
												"key": "x-api-version",
												"value": "1.0-rev1"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"hint\": \"anim non eli\",\n  \"password\": \"do sed veniam c\",\n  \"tag\": \"sunt\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{baseUrl}}/api/v1/encryptionPasswords",
										"description": "The HTTP POST request to the `/api/v1/encryptionPasswords` path allows you to add an encryption password."
									},
									"response": [
										{
											"name": "Password has been added.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													},
													{
														"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
														"key": "x-api-version",
														"value": "1.0-rev1"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"hint\": \"anim non eli\",\n  \"password\": \"do sed veniam c\",\n  \"tag\": \"sunt\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{baseUrl}}/api/v1/encryptionPasswords"
											},
											"status": "Created",
											"code": 201,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"hint\": \"ex in dolore\",\n  \"id\": \"7b0b2350-14aa-abe7-d8b7-64e92e73b743\",\n  \"modificationTime\": \"1961-07-12T03:44:54.181Z\",\n  \"tag\": \"consectetur\"\n}"
										},
										{
											"name": "Bad request. This error is related to POST/PUT requests. The request body is malformed, incomplete or otherwise invalid.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													},
													{
														"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
														"key": "x-api-version",
														"value": "1.0-rev1"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"hint\": \"anim non eli\",\n  \"password\": \"do sed veniam c\",\n  \"tag\": \"sunt\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{baseUrl}}/api/v1/encryptionPasswords"
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
										},
										{
											"name": "Unauthorized. The authorization header has been expected but not found (or found but is expired).",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													},
													{
														"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
														"key": "x-api-version",
														"value": "1.0-rev1"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"hint\": \"anim non eli\",\n  \"password\": \"do sed veniam c\",\n  \"tag\": \"sunt\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{baseUrl}}/api/v1/encryptionPasswords"
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
										},
										{
											"name": "Forbidden. The user sending the request does not have adequate privileges to access one or more objects specified in the request.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													},
													{
														"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
														"key": "x-api-version",
														"value": "1.0-rev1"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"hint\": \"anim non eli\",\n  \"password\": \"do sed veniam c\",\n  \"tag\": \"sunt\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{baseUrl}}/api/v1/encryptionPasswords"
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
										},
										{
											"name": "Internal server error. The request has been received but could not be completed because of an internal error at the server side.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													},
													{
														"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
														"key": "x-api-version",
														"value": "1.0-rev1"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"hint\": \"anim non eli\",\n  \"password\": \"do sed veniam c\",\n  \"tag\": \"sunt\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{baseUrl}}/api/v1/encryptionPasswords"
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
										}
									]
								}
							]
						},
						{
							"name": "backups",
							"item": [
								{
									"name": "{id}",
									"item": [
										{
											"name": "Get Backup",
											"request": {
												"method": "GET",
												"header": [
													{
														"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
														"key": "x-api-version",
														"value": "1.0-rev1"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v1/backups/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"backups",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
															"description": "(Required) ID of the backup."
														}
													]
												},
												"description": "The HTTP GET request to the `/api/v1/backups/{id}` path allows you to get a backup that has the specified `id`."
											},
											"response": [
												{
													"name": "OK",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v1/backups/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"backups",
																":id"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																	"description": "(Required) ID of the backup."
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"470ffd1f-8d52-a183-2a08-b88fc5fecc34\",\n  \"name\": \"ex magna qu\",\n  \"platformName\": \"LinuxPhysical\",\n  \"platformId\": \"46d268df-a95b-5821-e4d0-bf8c61dca4a4\",\n  \"creationTime\": \"1945-04-30T17:50:51.958Z\",\n  \"repositoryId\": \"31ac03c3-5734-5a69-095c-305524a35e85\",\n  \"jobId\": \"2b51fe2f-688a-4170-b9af-ab8f603e2e13\",\n  \"policyTag\": \"ut do\"\n}"
												},
												{
													"name": "Unauthorized. The authorization header has been expected but not found (or found but is expired).",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v1/backups/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"backups",
																":id"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																	"description": "(Required) ID of the backup."
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												},
												{
													"name": "Forbidden. The user sending the request does not have adequate privileges to access one or more objects specified in the request.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v1/backups/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"backups",
																":id"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																	"description": "(Required) ID of the backup."
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												},
												{
													"name": "Not found. No object was found with the path parameter specified in the request.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v1/backups/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"backups",
																":id"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																	"description": "(Required) ID of the backup."
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												},
												{
													"name": "Internal server error. The request has been received but could not be completed because of an internal error at the server side.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v1/backups/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"backups",
																":id"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																	"description": "(Required) ID of the backup."
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												}
											]
										},
										{
											"name": "Get Backup Objects",
											"request": {
												"method": "GET",
												"header": [
													{
														"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
														"key": "x-api-version",
														"value": "1.0-rev1"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v1/backups/:id/objects",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"backups",
														":id",
														"objects"
													],
													"variable": [
														{
															"key": "id",
															"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
															"description": "(Required) ID of the backup."
														}
													]
												},
												"description": "The HTTP GET request to the `/api/v1/backups/{id}/objects` path allows you to get an array of virtual infrastructure objects (VMs and VM containers) that are inсluded in a backup that has the specified ID."
											},
											"response": [
												{
													"name": "OK",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v1/backups/:id/objects",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"backups",
																":id",
																"objects"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																	"description": "(Required) ID of the backup."
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"data\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"pagination\": {\n    \"total\": 66843298,\n    \"count\": 6029170,\n    \"skip\": 3269566,\n    \"limit\": 48027370\n  }\n}"
												},
												{
													"name": "Unauthorized. The authorization header has been expected but not found (or found but is expired).",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v1/backups/:id/objects",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"backups",
																":id",
																"objects"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																	"description": "(Required) ID of the backup."
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												},
												{
													"name": "Forbidden. The user sending the request does not have adequate privileges to access one or more objects specified in the request.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v1/backups/:id/objects",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"backups",
																":id",
																"objects"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																	"description": "(Required) ID of the backup."
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												},
												{
													"name": "Not found. No object was found with the path parameter specified in the request.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v1/backups/:id/objects",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"backups",
																":id",
																"objects"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																	"description": "(Required) ID of the backup."
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												},
												{
													"name": "Internal server error. The request has been received but could not be completed because of an internal error at the server side.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v1/backups/:id/objects",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"backups",
																":id",
																"objects"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																	"description": "(Required) ID of the backup."
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												}
											]
										}
									]
								},
								{
									"name": "Get All Backups",
									"request": {
										"method": "GET",
										"header": [
											{
												"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
												"key": "x-api-version",
												"value": "1.0-rev1"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v1/backups?skip=-10937892&limit=-10937892&orderColumn=CreationTime&orderAsc=true&nameFilter=irure in officia laborum&createdAfterFilter=1949-09-09T09:22:16.570Z&createdBeforeFilter=1949-09-09T09:22:16.570Z&platformIdFilter=urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167&jobIdFilter=urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167&policyTagFilter=irure in officia laborum",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"backups"
											],
											"query": [
												{
													"key": "skip",
													"value": "-10937892",
													"description": "Number of backups to skip."
												},
												{
													"key": "limit",
													"value": "-10937892",
													"description": "Maximum number of backups to return."
												},
												{
													"key": "orderColumn",
													"value": "CreationTime",
													"description": "Sorts backups by one of the backup parameters."
												},
												{
													"key": "orderAsc",
													"value": "true",
													"description": "Sorts backups in the ascending order by the `orderColumn` parameter."
												},
												{
													"key": "nameFilter",
													"value": "irure in officia laborum",
													"description": "Filters backups by the `nameFilter` pattern. The pattern can match any backup parameter. To substitute one or more characters, use the asterisk (*) character at the beginning and/or at the end."
												},
												{
													"key": "createdAfterFilter",
													"value": "1949-09-09T09:22:16.570Z",
													"description": "Returns backups that are created after the specified date and time."
												},
												{
													"key": "createdBeforeFilter",
													"value": "1949-09-09T09:22:16.570Z",
													"description": "Returns backups that are created before the specified date and time."
												},
												{
													"key": "platformIdFilter",
													"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
													"description": "Filters backups by ID of the backup object platform."
												},
												{
													"key": "jobIdFilter",
													"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
													"description": "Filters backups by ID of the parent job."
												},
												{
													"key": "policyTagFilter",
													"value": "irure in officia laborum",
													"description": "Filters backups by retention policy tag."
												}
											]
										},
										"description": "The HTTP GET request to the `/api/v1/backups` path allows you to get an array of all backups that are created on or imported to the backup server."
									},
									"response": [
										{
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													},
													{
														"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
														"key": "x-api-version",
														"value": "1.0-rev1"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v1/backups?skip=-10937892&limit=-10937892&orderColumn=CreationTime&orderAsc=true&nameFilter=irure in officia laborum&createdAfterFilter=1949-09-09T09:22:16.570Z&createdBeforeFilter=1949-09-09T09:22:16.570Z&platformIdFilter=urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167&jobIdFilter=urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167&policyTagFilter=irure in officia laborum",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"backups"
													],
													"query": [
														{
															"key": "skip",
															"value": "-10937892"
														},
														{
															"key": "limit",
															"value": "-10937892"
														},
														{
															"key": "orderColumn",
															"value": "CreationTime"
														},
														{
															"key": "orderAsc",
															"value": "true"
														},
														{
															"key": "nameFilter",
															"value": "irure in officia laborum"
														},
														{
															"key": "createdAfterFilter",
															"value": "1949-09-09T09:22:16.570Z"
														},
														{
															"key": "createdBeforeFilter",
															"value": "1949-09-09T09:22:16.570Z"
														},
														{
															"key": "platformIdFilter",
															"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167"
														},
														{
															"key": "jobIdFilter",
															"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167"
														},
														{
															"key": "policyTagFilter",
															"value": "irure in officia laborum"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"data\": [\n    {\n      \"id\": \"77ad15fc-f581-ac25-e4c4-e011cd1cb809\",\n      \"name\": \"incididunt\",\n      \"platformName\": \"HyperV\",\n      \"platformId\": \"3a086e5b-662e-2aab-2c78-8e7c5480daa9\",\n      \"creationTime\": \"1995-10-28T02:47:06.254Z\",\n      \"repositoryId\": \"urn:uuid:a28d7eb3-c783-f30c-8067-f908f600f14f\",\n      \"jobId\": \"6d8052c9-4feb-7597-36b0-e1021e3e254c\",\n      \"policyTag\": \"culpa in voluptate\"\n    },\n    {\n      \"id\": \"b2095a74-f7ba-3468-e34c-d9d57e6f0383\",\n      \"name\": \"commodo consectetur\",\n      \"platformName\": \"Tape\",\n      \"platformId\": \"urn:uuid:763301e3-01fe-85f2-c28f-b6f2132a08ec\",\n      \"creationTime\": \"2003-02-10T17:49:24.865Z\",\n      \"repositoryId\": \"urn:uuid:f3c6c40d-e3fe-8efb-dd2b-3ed08bd33450\",\n      \"jobId\": \"urn:uuid:06d0372e-432b-1fb1-0ce7-562d9c43a0ed\",\n      \"policyTag\": \"est enim\"\n    }\n  ],\n  \"pagination\": {\n    \"total\": 6919826,\n    \"count\": 70131595,\n    \"skip\": -35536002,\n    \"limit\": -32398924\n  }\n}"
										},
										{
											"name": "Unauthorized. The authorization header has been expected but not found (or found but is expired).",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													},
													{
														"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
														"key": "x-api-version",
														"value": "1.0-rev1"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v1/backups?skip=-10937892&limit=-10937892&orderColumn=CreationTime&orderAsc=true&nameFilter=irure in officia laborum&createdAfterFilter=1949-09-09T09:22:16.570Z&createdBeforeFilter=1949-09-09T09:22:16.570Z&platformIdFilter=urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167&jobIdFilter=urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167&policyTagFilter=irure in officia laborum",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"backups"
													],
													"query": [
														{
															"key": "skip",
															"value": "-10937892"
														},
														{
															"key": "limit",
															"value": "-10937892"
														},
														{
															"key": "orderColumn",
															"value": "CreationTime"
														},
														{
															"key": "orderAsc",
															"value": "true"
														},
														{
															"key": "nameFilter",
															"value": "irure in officia laborum"
														},
														{
															"key": "createdAfterFilter",
															"value": "1949-09-09T09:22:16.570Z"
														},
														{
															"key": "createdBeforeFilter",
															"value": "1949-09-09T09:22:16.570Z"
														},
														{
															"key": "platformIdFilter",
															"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167"
														},
														{
															"key": "jobIdFilter",
															"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167"
														},
														{
															"key": "policyTagFilter",
															"value": "irure in officia laborum"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
										},
										{
											"name": "Forbidden. The user sending the request does not have adequate privileges to access one or more objects specified in the request.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													},
													{
														"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
														"key": "x-api-version",
														"value": "1.0-rev1"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v1/backups?skip=-10937892&limit=-10937892&orderColumn=CreationTime&orderAsc=true&nameFilter=irure in officia laborum&createdAfterFilter=1949-09-09T09:22:16.570Z&createdBeforeFilter=1949-09-09T09:22:16.570Z&platformIdFilter=urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167&jobIdFilter=urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167&policyTagFilter=irure in officia laborum",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"backups"
													],
													"query": [
														{
															"key": "skip",
															"value": "-10937892"
														},
														{
															"key": "limit",
															"value": "-10937892"
														},
														{
															"key": "orderColumn",
															"value": "CreationTime"
														},
														{
															"key": "orderAsc",
															"value": "true"
														},
														{
															"key": "nameFilter",
															"value": "irure in officia laborum"
														},
														{
															"key": "createdAfterFilter",
															"value": "1949-09-09T09:22:16.570Z"
														},
														{
															"key": "createdBeforeFilter",
															"value": "1949-09-09T09:22:16.570Z"
														},
														{
															"key": "platformIdFilter",
															"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167"
														},
														{
															"key": "jobIdFilter",
															"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167"
														},
														{
															"key": "policyTagFilter",
															"value": "irure in officia laborum"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
										},
										{
											"name": "Internal server error. The request has been received but could not be completed because of an internal error at the server side.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													},
													{
														"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
														"key": "x-api-version",
														"value": "1.0-rev1"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v1/backups?skip=-10937892&limit=-10937892&orderColumn=CreationTime&orderAsc=true&nameFilter=irure in officia laborum&createdAfterFilter=1949-09-09T09:22:16.570Z&createdBeforeFilter=1949-09-09T09:22:16.570Z&platformIdFilter=urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167&jobIdFilter=urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167&policyTagFilter=irure in officia laborum",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"backups"
													],
													"query": [
														{
															"key": "skip",
															"value": "-10937892"
														},
														{
															"key": "limit",
															"value": "-10937892"
														},
														{
															"key": "orderColumn",
															"value": "CreationTime"
														},
														{
															"key": "orderAsc",
															"value": "true"
														},
														{
															"key": "nameFilter",
															"value": "irure in officia laborum"
														},
														{
															"key": "createdAfterFilter",
															"value": "1949-09-09T09:22:16.570Z"
														},
														{
															"key": "createdBeforeFilter",
															"value": "1949-09-09T09:22:16.570Z"
														},
														{
															"key": "platformIdFilter",
															"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167"
														},
														{
															"key": "jobIdFilter",
															"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167"
														},
														{
															"key": "policyTagFilter",
															"value": "irure in officia laborum"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
										}
									]
								}
							]
						},
						{
							"name": "backup Objects",
							"item": [
								{
									"name": "{id}",
									"item": [
										{
											"name": "Get Backup Object",
											"request": {
												"method": "GET",
												"header": [
													{
														"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
														"key": "x-api-version",
														"value": "1.0-rev1"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v1/backupObjects/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"backupObjects",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
															"description": "(Required) ID of the backup object."
														}
													]
												},
												"description": "The HTTP GET request to the `/api/v1/backupObjects/{id}` path allows you to get a backup object that has the specified `id`."
											},
											"response": [
												{
													"name": "OK",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v1/backupObjects/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"backupObjects",
																":id"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																	"description": "(Required) ID of the backup object."
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"objectId\": \"nulla dolore\",\n  \"viType\": \"StoragePolicy\",\n  \"path\": \"proident ex veniam deserunt\"\n}"
												},
												{
													"name": "Unauthorized. The authorization header has been expected but not found (or found but is expired).",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v1/backupObjects/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"backupObjects",
																":id"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																	"description": "(Required) ID of the backup object."
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												},
												{
													"name": "Forbidden. The user sending the request does not have adequate privileges to access one or more objects specified in the request.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v1/backupObjects/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"backupObjects",
																":id"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																	"description": "(Required) ID of the backup object."
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												},
												{
													"name": "Not found. No object was found with the path parameter specified in the request.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v1/backupObjects/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"backupObjects",
																":id"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																	"description": "(Required) ID of the backup object."
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												},
												{
													"name": "Internal server error. The request has been received but could not be completed because of an internal error at the server side.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v1/backupObjects/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"backupObjects",
																":id"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																	"description": "(Required) ID of the backup object."
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												}
											]
										},
										{
											"name": "Get Restore Points",
											"request": {
												"method": "GET",
												"header": [
													{
														"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
														"key": "x-api-version",
														"value": "1.0-rev1"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v1/backupObjects/:id/restorePoints",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"backupObjects",
														":id",
														"restorePoints"
													],
													"variable": [
														{
															"key": "id",
															"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
															"description": "(Required) ID of the backup object."
														}
													]
												},
												"description": "The HTTP GET request to the `/api/v1/backupObjects/{id}/restorePoints` path allows you to get an array of restore points of a backup object that has the specified `id`."
											},
											"response": [
												{
													"name": "OK",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v1/backupObjects/:id/restorePoints",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"backupObjects",
																":id",
																"restorePoints"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																	"description": "(Required) ID of the backup object."
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"data\": [\n    {\n      \"id\": \"urn:uuid:9ced1edc-74ce-df7b-f5ee-f9486552c5be\",\n      \"name\": \"magna do irure\",\n      \"platformId\": \"8e3a36c0-2883-e2b3-71bd-9a6fcc67da49\",\n      \"creationTime\": \"1997-04-21T13:54:47.544Z\",\n      \"backupId\": \"urn:uuid:be427776-1cb6-25be-8900-c0f552072d3a\",\n      \"allowedOperations\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"platformName\": \"VmWare\"\n    },\n    {\n      \"id\": \"urn:uuid:48645cda-68e1-302e-876b-5cfb53e0b352\",\n      \"name\": \"in non\",\n      \"platformId\": \"urn:uuid:88f4c1e9-8b56-28fa-c233-39246eb1b046\",\n      \"creationTime\": \"1982-05-31T22:14:47.453Z\",\n      \"backupId\": \"354401dd-ad74-4d5f-ba39-496bc6532a60\",\n      \"allowedOperations\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"platformName\": \"CustomPlatform\"\n    }\n  ],\n  \"pagination\": {\n    \"total\": -51709887,\n    \"count\": 64490441,\n    \"skip\": 57594419,\n    \"limit\": -2624583\n  }\n}"
												},
												{
													"name": "Unauthorized. The authorization header has been expected but not found (or found but is expired).",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v1/backupObjects/:id/restorePoints",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"backupObjects",
																":id",
																"restorePoints"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																	"description": "(Required) ID of the backup object."
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												},
												{
													"name": "Forbidden. The user sending the request does not have adequate privileges to access one or more objects specified in the request.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v1/backupObjects/:id/restorePoints",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"backupObjects",
																":id",
																"restorePoints"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																	"description": "(Required) ID of the backup object."
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												},
												{
													"name": "Not found. No object was found with the path parameter specified in the request.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v1/backupObjects/:id/restorePoints",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"backupObjects",
																":id",
																"restorePoints"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																	"description": "(Required) ID of the backup object."
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												},
												{
													"name": "Internal server error. The request has been received but could not be completed because of an internal error at the server side.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v1/backupObjects/:id/restorePoints",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"backupObjects",
																":id",
																"restorePoints"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																	"description": "(Required) ID of the backup object."
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												}
											]
										}
									]
								},
								{
									"name": "Get All Backup Objects",
									"request": {
										"method": "GET",
										"header": [
											{
												"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
												"key": "x-api-version",
												"value": "1.0-rev1"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v1/backupObjects?skip=-10937892&limit=-10937892&orderColumn=Name&orderAsc=true&nameFilter=irure in officia laborum&platformNameFilter=HyperV&platformIdFilter=urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167&typeFilter=irure in officia laborum&viTypeFilter=irure in officia laborum",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"backupObjects"
											],
											"query": [
												{
													"key": "skip",
													"value": "-10937892",
													"description": "Number of backup objects to skip."
												},
												{
													"key": "limit",
													"value": "-10937892",
													"description": "Maximum number of backup objects to return."
												},
												{
													"key": "orderColumn",
													"value": "Name",
													"description": "Sorts backup objects by one of the backup object parameters."
												},
												{
													"key": "orderAsc",
													"value": "true",
													"description": "Sorts backup objects in the ascending order by the `orderColumn` parameter."
												},
												{
													"key": "nameFilter",
													"value": "irure in officia laborum",
													"description": "Filters backup objects by the `nameFilter` pattern. The pattern can match any backup object parameter. To substitute one or more characters, use the asterisk (*) character at the beginning and/or at the end."
												},
												{
													"key": "platformNameFilter",
													"value": "HyperV",
													"description": "Filters backup objects by platform ID."
												},
												{
													"key": "platformIdFilter",
													"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
													"description": "Filters backup objects by platform ID."
												},
												{
													"key": "typeFilter",
													"value": "irure in officia laborum",
													"description": "Filters backup objects by object type."
												},
												{
													"key": "viTypeFilter",
													"value": "irure in officia laborum",
													"description": "Filters backup objects by the type of VMware vSphere server."
												}
											]
										},
										"description": "The HTTP GET request to the `/api/v1/backupObjects` path allows you to get an array of virtual infrastructure objects (VMs and VM containers) that are inсluded in backups created by the backup server."
									},
									"response": [
										{
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													},
													{
														"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
														"key": "x-api-version",
														"value": "1.0-rev1"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v1/backupObjects?skip=-10937892&limit=-10937892&orderColumn=Name&orderAsc=true&nameFilter=irure in officia laborum&platformNameFilter=HyperV&platformIdFilter=urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167&typeFilter=irure in officia laborum&viTypeFilter=irure in officia laborum",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"backupObjects"
													],
													"query": [
														{
															"key": "skip",
															"value": "-10937892"
														},
														{
															"key": "limit",
															"value": "-10937892"
														},
														{
															"key": "orderColumn",
															"value": "Name"
														},
														{
															"key": "orderAsc",
															"value": "true"
														},
														{
															"key": "nameFilter",
															"value": "irure in officia laborum"
														},
														{
															"key": "platformNameFilter",
															"value": "HyperV"
														},
														{
															"key": "platformIdFilter",
															"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167"
														},
														{
															"key": "typeFilter",
															"value": "irure in officia laborum"
														},
														{
															"key": "viTypeFilter",
															"value": "irure in officia laborum"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"data\": [\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    },\n    {\n      \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n    }\n  ],\n  \"pagination\": {\n    \"total\": 25196922,\n    \"count\": -55348574,\n    \"skip\": 83590922,\n    \"limit\": -48751671\n  }\n}"
										},
										{
											"name": "Unauthorized. The authorization header has been expected but not found (or found but is expired).",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													},
													{
														"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
														"key": "x-api-version",
														"value": "1.0-rev1"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v1/backupObjects?skip=-10937892&limit=-10937892&orderColumn=Name&orderAsc=true&nameFilter=irure in officia laborum&platformNameFilter=HyperV&platformIdFilter=urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167&typeFilter=irure in officia laborum&viTypeFilter=irure in officia laborum",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"backupObjects"
													],
													"query": [
														{
															"key": "skip",
															"value": "-10937892"
														},
														{
															"key": "limit",
															"value": "-10937892"
														},
														{
															"key": "orderColumn",
															"value": "Name"
														},
														{
															"key": "orderAsc",
															"value": "true"
														},
														{
															"key": "nameFilter",
															"value": "irure in officia laborum"
														},
														{
															"key": "platformNameFilter",
															"value": "HyperV"
														},
														{
															"key": "platformIdFilter",
															"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167"
														},
														{
															"key": "typeFilter",
															"value": "irure in officia laborum"
														},
														{
															"key": "viTypeFilter",
															"value": "irure in officia laborum"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
										},
										{
											"name": "Forbidden. The user sending the request does not have adequate privileges to access one or more objects specified in the request.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													},
													{
														"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
														"key": "x-api-version",
														"value": "1.0-rev1"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v1/backupObjects?skip=-10937892&limit=-10937892&orderColumn=Name&orderAsc=true&nameFilter=irure in officia laborum&platformNameFilter=HyperV&platformIdFilter=urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167&typeFilter=irure in officia laborum&viTypeFilter=irure in officia laborum",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"backupObjects"
													],
													"query": [
														{
															"key": "skip",
															"value": "-10937892"
														},
														{
															"key": "limit",
															"value": "-10937892"
														},
														{
															"key": "orderColumn",
															"value": "Name"
														},
														{
															"key": "orderAsc",
															"value": "true"
														},
														{
															"key": "nameFilter",
															"value": "irure in officia laborum"
														},
														{
															"key": "platformNameFilter",
															"value": "HyperV"
														},
														{
															"key": "platformIdFilter",
															"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167"
														},
														{
															"key": "typeFilter",
															"value": "irure in officia laborum"
														},
														{
															"key": "viTypeFilter",
															"value": "irure in officia laborum"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
										},
										{
											"name": "Not found. No object was found with the path parameter specified in the request.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													},
													{
														"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
														"key": "x-api-version",
														"value": "1.0-rev1"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v1/backupObjects?skip=-10937892&limit=-10937892&orderColumn=Name&orderAsc=true&nameFilter=irure in officia laborum&platformNameFilter=HyperV&platformIdFilter=urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167&typeFilter=irure in officia laborum&viTypeFilter=irure in officia laborum",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"backupObjects"
													],
													"query": [
														{
															"key": "skip",
															"value": "-10937892"
														},
														{
															"key": "limit",
															"value": "-10937892"
														},
														{
															"key": "orderColumn",
															"value": "Name"
														},
														{
															"key": "orderAsc",
															"value": "true"
														},
														{
															"key": "nameFilter",
															"value": "irure in officia laborum"
														},
														{
															"key": "platformNameFilter",
															"value": "HyperV"
														},
														{
															"key": "platformIdFilter",
															"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167"
														},
														{
															"key": "typeFilter",
															"value": "irure in officia laborum"
														},
														{
															"key": "viTypeFilter",
															"value": "irure in officia laborum"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
										},
										{
											"name": "Internal server error. The request has been received but could not be completed because of an internal error at the server side.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													},
													{
														"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
														"key": "x-api-version",
														"value": "1.0-rev1"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v1/backupObjects?skip=-10937892&limit=-10937892&orderColumn=Name&orderAsc=true&nameFilter=irure in officia laborum&platformNameFilter=HyperV&platformIdFilter=urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167&typeFilter=irure in officia laborum&viTypeFilter=irure in officia laborum",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"backupObjects"
													],
													"query": [
														{
															"key": "skip",
															"value": "-10937892"
														},
														{
															"key": "limit",
															"value": "-10937892"
														},
														{
															"key": "orderColumn",
															"value": "Name"
														},
														{
															"key": "orderAsc",
															"value": "true"
														},
														{
															"key": "nameFilter",
															"value": "irure in officia laborum"
														},
														{
															"key": "platformNameFilter",
															"value": "HyperV"
														},
														{
															"key": "platformIdFilter",
															"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167"
														},
														{
															"key": "typeFilter",
															"value": "irure in officia laborum"
														},
														{
															"key": "viTypeFilter",
															"value": "irure in officia laborum"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
										}
									]
								}
							]
						},
						{
							"name": "object Restore Points",
							"item": [
								{
									"name": "{id}",
									"item": [
										{
											"name": "Get Restore Point",
											"request": {
												"method": "GET",
												"header": [
													{
														"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
														"key": "x-api-version",
														"value": "1.0-rev1"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v1/objectRestorePoints/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"objectRestorePoints",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
															"description": "(Required) ID of the restore point."
														}
													]
												},
												"description": "The HTTP GET request to the `/api/v1/objectRestorePoints/{id}` path allows you to get a restore point that has the specified `id`."
											},
											"response": [
												{
													"name": "OK",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v1/objectRestorePoints/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"objectRestorePoints",
																":id"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																	"description": "(Required) ID of the restore point."
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"dfa44753-b599-e032-d6e2-ffe10d0321ad\",\n  \"name\": \"reprehenderit nisi voluptate\",\n  \"platformId\": \"3a1a2b70-9750-2903-6fd3-6b7062a57e8e\",\n  \"creationTime\": \"1961-04-05T19:44:18.801Z\",\n  \"backupId\": \"4ae63e42-b013-d2e8-c7f7-d267535c9475\",\n  \"allowedOperations\": [\n    \"VmwareInstantRecoveryFcd\",\n    \"VmwareInstantRecoveryFcd\"\n  ],\n  \"platformName\": \"VmWare\"\n}"
												},
												{
													"name": "Unauthorized. The authorization header has been expected but not found (or found but is expired).",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v1/objectRestorePoints/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"objectRestorePoints",
																":id"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																	"description": "(Required) ID of the restore point."
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												},
												{
													"name": "Forbidden. The user sending the request does not have adequate privileges to access one or more objects specified in the request.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v1/objectRestorePoints/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"objectRestorePoints",
																":id"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																	"description": "(Required) ID of the restore point."
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												},
												{
													"name": "Not found. No object was found with the path parameter specified in the request.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v1/objectRestorePoints/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"objectRestorePoints",
																":id"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																	"description": "(Required) ID of the restore point."
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												},
												{
													"name": "Internal server error. The request has been received but could not be completed because of an internal error at the server side.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v1/objectRestorePoints/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"objectRestorePoints",
																":id"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																	"description": "(Required) ID of the restore point."
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												}
											]
										},
										{
											"name": "Get Restore Point Disks",
											"request": {
												"method": "GET",
												"header": [
													{
														"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
														"key": "x-api-version",
														"value": "1.0-rev1"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v1/objectRestorePoints/:id/disks",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"objectRestorePoints",
														":id",
														"disks"
													],
													"variable": [
														{
															"key": "id",
															"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
															"description": "(Required) ID of the restore point."
														}
													]
												},
												"description": "The HTTP GET request to the `/api/v1/objectRestorePoints/{id}/disks` path allows you to get an array of disks from a restore point that has the specified `id`."
											},
											"response": [
												{
													"name": "OK",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v1/objectRestorePoints/:id/disks",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"objectRestorePoints",
																":id",
																"disks"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																	"description": "(Required) ID of the restore point."
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"data\": [\n    {\n      \"uid\": \"ex enim ullamco in tempor\",\n      \"type\": \"Unknown\",\n      \"name\": \"irure enim\",\n      \"capacity\": 70288897,\n      \"state\": \"Processed\"\n    },\n    {\n      \"uid\": \"Lorem in nisi incididunt\",\n      \"type\": \"Simple\",\n      \"name\": \"velit \",\n      \"capacity\": -92557899,\n      \"state\": \"InProcessing\"\n    }\n  ],\n  \"pagination\": {\n    \"total\": -47463658,\n    \"count\": -50618749,\n    \"skip\": -17650779,\n    \"limit\": -45216604\n  }\n}"
												},
												{
													"name": "Unauthorized. The authorization header has been expected but not found (or found but is expired).",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v1/objectRestorePoints/:id/disks",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"objectRestorePoints",
																":id",
																"disks"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																	"description": "(Required) ID of the restore point."
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												},
												{
													"name": "Forbidden. The user sending the request does not have adequate privileges to access one or more objects specified in the request.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v1/objectRestorePoints/:id/disks",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"objectRestorePoints",
																":id",
																"disks"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																	"description": "(Required) ID of the restore point."
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												},
												{
													"name": "Not found. No object was found with the path parameter specified in the request.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v1/objectRestorePoints/:id/disks",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"objectRestorePoints",
																":id",
																"disks"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																	"description": "(Required) ID of the restore point."
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												},
												{
													"name": "Internal server error. The request has been received but could not be completed because of an internal error at the server side.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v1/objectRestorePoints/:id/disks",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"objectRestorePoints",
																":id",
																"disks"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																	"description": "(Required) ID of the restore point."
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												}
											]
										}
									]
								},
								{
									"name": "Get All Restore Points",
									"request": {
										"method": "GET",
										"header": [
											{
												"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
												"key": "x-api-version",
												"value": "1.0-rev1"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v1/objectRestorePoints?skip=-10937892&limit=-10937892&orderColumn=CreationTime&orderAsc=true&createdAfterFilter=1949-09-09T09:22:16.570Z&createdBeforeFilter=1949-09-09T09:22:16.570Z&nameFilter=irure in officia laborum&platformNameFilter=HyperV&platformIdFilter=urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167&backupIdFilter=urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167&backupObjectIdFilter=urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"objectRestorePoints"
											],
											"query": [
												{
													"key": "skip",
													"value": "-10937892",
													"description": "Number of restore points to skip."
												},
												{
													"key": "limit",
													"value": "-10937892",
													"description": "Maximum number of restore points to return."
												},
												{
													"key": "orderColumn",
													"value": "CreationTime",
													"description": "Sorts restore points by one of the restore point parameters."
												},
												{
													"key": "orderAsc",
													"value": "true",
													"description": "Sorts restore points in the ascending order by the `orderColumn` parameter."
												},
												{
													"key": "createdAfterFilter",
													"value": "1949-09-09T09:22:16.570Z",
													"description": "Returns restore points that are created after the specified date and time."
												},
												{
													"key": "createdBeforeFilter",
													"value": "1949-09-09T09:22:16.570Z",
													"description": "Returns restore points that are created before the specified date and time."
												},
												{
													"key": "nameFilter",
													"value": "irure in officia laborum",
													"description": "Filters restore points by the `nameFilter` pattern. The pattern can match any restore point parameter. To substitute one or more characters, use the asterisk (*) character at the beginning and/or at the end."
												},
												{
													"key": "platformNameFilter",
													"value": "HyperV",
													"description": "Filters restore points by name of the backup object platform."
												},
												{
													"key": "platformIdFilter",
													"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
													"description": "Filters restore points by ID of the backup object platform."
												},
												{
													"key": "backupIdFilter",
													"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
													"description": "Filters restore points by backup ID."
												},
												{
													"key": "backupObjectIdFilter",
													"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
													"description": "Filters restore points by backup object ID."
												}
											]
										},
										"description": "The HTTP GET request to the `/api/v1/objectRestorePoints` path allows you to get an array of all restore points created on the backup server."
									},
									"response": [
										{
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													},
													{
														"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
														"key": "x-api-version",
														"value": "1.0-rev1"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v1/objectRestorePoints?skip=-10937892&limit=-10937892&orderColumn=CreationTime&orderAsc=true&createdAfterFilter=1949-09-09T09:22:16.570Z&createdBeforeFilter=1949-09-09T09:22:16.570Z&nameFilter=irure in officia laborum&platformNameFilter=HyperV&platformIdFilter=urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167&backupIdFilter=urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167&backupObjectIdFilter=urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"objectRestorePoints"
													],
													"query": [
														{
															"key": "skip",
															"value": "-10937892"
														},
														{
															"key": "limit",
															"value": "-10937892"
														},
														{
															"key": "orderColumn",
															"value": "CreationTime"
														},
														{
															"key": "orderAsc",
															"value": "true"
														},
														{
															"key": "createdAfterFilter",
															"value": "1949-09-09T09:22:16.570Z"
														},
														{
															"key": "createdBeforeFilter",
															"value": "1949-09-09T09:22:16.570Z"
														},
														{
															"key": "nameFilter",
															"value": "irure in officia laborum"
														},
														{
															"key": "platformNameFilter",
															"value": "HyperV"
														},
														{
															"key": "platformIdFilter",
															"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167"
														},
														{
															"key": "backupIdFilter",
															"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167"
														},
														{
															"key": "backupObjectIdFilter",
															"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"data\": [\n    {\n      \"id\": \"4825f6a0-367c-b382-a8eb-5be7a1143af2\",\n      \"name\": \"eiusmod non qui culpa\",\n      \"platformId\": \"883af8f1-fd08-94f5-bba5-42e37303d1e4\",\n      \"creationTime\": \"1978-01-05T06:48:52.563Z\",\n      \"backupId\": \"942cc24c-b750-7c1a-836b-117314171201\",\n      \"allowedOperations\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"platformName\": \"Tape\"\n    },\n    {\n      \"id\": \"urn:uuid:97c0deb8-1b24-aea8-66d2-3f3e754326f2\",\n      \"name\": \"et magna tempor\",\n      \"platformId\": \"urn:uuid:0c1ee501-5152-e33d-dea6-636bfcb9b6f7\",\n      \"creationTime\": \"1981-06-18T11:54:09.416Z\",\n      \"backupId\": \"urn:uuid:750551c0-b225-5d4e-1c52-57c40dd2446a\",\n      \"allowedOperations\": [\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      ],\n      \"platformName\": \"VmWare\"\n    }\n  ],\n  \"pagination\": {\n    \"total\": 35661426,\n    \"count\": 85645271,\n    \"skip\": -67508315,\n    \"limit\": -50006988\n  }\n}"
										},
										{
											"name": "Unauthorized. The authorization header has been expected but not found (or found but is expired).",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													},
													{
														"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
														"key": "x-api-version",
														"value": "1.0-rev1"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v1/objectRestorePoints?skip=-10937892&limit=-10937892&orderColumn=CreationTime&orderAsc=true&createdAfterFilter=1949-09-09T09:22:16.570Z&createdBeforeFilter=1949-09-09T09:22:16.570Z&nameFilter=irure in officia laborum&platformNameFilter=HyperV&platformIdFilter=urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167&backupIdFilter=urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167&backupObjectIdFilter=urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"objectRestorePoints"
													],
													"query": [
														{
															"key": "skip",
															"value": "-10937892"
														},
														{
															"key": "limit",
															"value": "-10937892"
														},
														{
															"key": "orderColumn",
															"value": "CreationTime"
														},
														{
															"key": "orderAsc",
															"value": "true"
														},
														{
															"key": "createdAfterFilter",
															"value": "1949-09-09T09:22:16.570Z"
														},
														{
															"key": "createdBeforeFilter",
															"value": "1949-09-09T09:22:16.570Z"
														},
														{
															"key": "nameFilter",
															"value": "irure in officia laborum"
														},
														{
															"key": "platformNameFilter",
															"value": "HyperV"
														},
														{
															"key": "platformIdFilter",
															"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167"
														},
														{
															"key": "backupIdFilter",
															"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167"
														},
														{
															"key": "backupObjectIdFilter",
															"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
										},
										{
											"name": "Forbidden. The user sending the request does not have adequate privileges to access one or more objects specified in the request.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													},
													{
														"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
														"key": "x-api-version",
														"value": "1.0-rev1"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v1/objectRestorePoints?skip=-10937892&limit=-10937892&orderColumn=CreationTime&orderAsc=true&createdAfterFilter=1949-09-09T09:22:16.570Z&createdBeforeFilter=1949-09-09T09:22:16.570Z&nameFilter=irure in officia laborum&platformNameFilter=HyperV&platformIdFilter=urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167&backupIdFilter=urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167&backupObjectIdFilter=urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"objectRestorePoints"
													],
													"query": [
														{
															"key": "skip",
															"value": "-10937892"
														},
														{
															"key": "limit",
															"value": "-10937892"
														},
														{
															"key": "orderColumn",
															"value": "CreationTime"
														},
														{
															"key": "orderAsc",
															"value": "true"
														},
														{
															"key": "createdAfterFilter",
															"value": "1949-09-09T09:22:16.570Z"
														},
														{
															"key": "createdBeforeFilter",
															"value": "1949-09-09T09:22:16.570Z"
														},
														{
															"key": "nameFilter",
															"value": "irure in officia laborum"
														},
														{
															"key": "platformNameFilter",
															"value": "HyperV"
														},
														{
															"key": "platformIdFilter",
															"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167"
														},
														{
															"key": "backupIdFilter",
															"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167"
														},
														{
															"key": "backupObjectIdFilter",
															"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
										},
										{
											"name": "Internal server error. The request has been received but could not be completed because of an internal error at the server side.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													},
													{
														"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
														"key": "x-api-version",
														"value": "1.0-rev1"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v1/objectRestorePoints?skip=-10937892&limit=-10937892&orderColumn=CreationTime&orderAsc=true&createdAfterFilter=1949-09-09T09:22:16.570Z&createdBeforeFilter=1949-09-09T09:22:16.570Z&nameFilter=irure in officia laborum&platformNameFilter=HyperV&platformIdFilter=urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167&backupIdFilter=urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167&backupObjectIdFilter=urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"objectRestorePoints"
													],
													"query": [
														{
															"key": "skip",
															"value": "-10937892"
														},
														{
															"key": "limit",
															"value": "-10937892"
														},
														{
															"key": "orderColumn",
															"value": "CreationTime"
														},
														{
															"key": "orderAsc",
															"value": "true"
														},
														{
															"key": "createdAfterFilter",
															"value": "1949-09-09T09:22:16.570Z"
														},
														{
															"key": "createdBeforeFilter",
															"value": "1949-09-09T09:22:16.570Z"
														},
														{
															"key": "nameFilter",
															"value": "irure in officia laborum"
														},
														{
															"key": "platformNameFilter",
															"value": "HyperV"
														},
														{
															"key": "platformIdFilter",
															"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167"
														},
														{
															"key": "backupIdFilter",
															"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167"
														},
														{
															"key": "backupObjectIdFilter",
															"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
										}
									]
								}
							]
						},
						{
							"name": "restore/instant Recovery/vmware/fcd",
							"item": [
								{
									"name": "{mount Id}",
									"item": [
										{
											"name": "Get Mount Information",
											"request": {
												"method": "GET",
												"header": [
													{
														"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
														"key": "x-api-version",
														"value": "1.0-rev1"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v1/restore/instantRecovery/vmware/fcd/:mountId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"restore",
														"instantRecovery",
														"vmware",
														"fcd",
														":mountId"
													],
													"variable": [
														{
															"key": "mountId",
															"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
															"description": "(Required) Mount ID."
														}
													]
												},
												"description": "The HTTP GET request to the `/api/v1/restore/instantRecovery/vmware/fcd/{mountId}` path allows you to get information about the mounted vPower NFS datastore, such as restore session ID, mount state, instant recovery settings and disks that will be recovered."
											},
											"response": [
												{
													"name": "OK",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v1/restore/instantRecovery/vmware/fcd/:mountId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"restore",
																"instantRecovery",
																"vmware",
																"fcd",
																":mountId"
															],
															"variable": [
																{
																	"key": "mountId",
																	"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																	"description": "(Required) Mount ID."
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"urn:uuid:0ef2569d-d74c-6851-5ea7-054e463f6341\",\n  \"sessionId\": \"ad41160b-efff-ec77-b29f-40895848a3f4\",\n  \"state\": \"Dismounting\",\n  \"spec\": {\n    \"objectRestorePointId\": \"2c804fd0-0146-c688-20e3-6db7a001e40b\",\n    \"destinationCluster\": {\n      \"name\": \"sint c\",\n      \"type\": \"Cluster\",\n      \"hostName\": \"occaecat non sed aliqua voluptate\",\n      \"objectId\": \"esse labore nisi ipsum\"\n    },\n    \"disksMapping\": [\n      {\n        \"nameInBackup\": \"nostrud cillum\",\n        \"mountedDiskName\": \"officia sunt sit\",\n        \"registeredFcdName\": \"et\"\n      },\n      {\n        \"nameInBackup\": \"sed\",\n        \"mountedDiskName\": \"non aliquip\",\n        \"registeredFcdName\": \"\"\n      }\n    ],\n    \"writeCache\": {\n      \"redirectIsEnabled\": false,\n      \"cacheDatastore\": {\n        \"name\": \"sunt\",\n        \"type\": \"Category\",\n        \"hostName\": \"incididunt ea\",\n        \"objectId\": \"Lorem\"\n      },\n      \"storagePolicy\": {\n        \"name\": \"ullamco nisi sit proident laboris\",\n        \"type\": \"Host\",\n        \"hostName\": \"elit adipisicing consectetur\",\n        \"objectId\": \"sit cupidatat\"\n      }\n    }\n  },\n  \"errorMessage\": \"pariatur in\",\n  \"mountedDisks\": [\n    {\n      \"nameInBackup\": \"am\",\n      \"mountedDiskName\": \"incididunt\",\n      \"registeredFcdName\": \"dolore minim ut labore aute\",\n      \"objectId\": \"par\"\n    },\n    {\n      \"nameInBackup\": \"proident ut ad ipsum veniam\",\n      \"mountedDiskName\": \"r\",\n      \"registeredFcdName\": \"enim officia sint dolore\",\n      \"objectId\": \"ut deserunt commodo Lorem\"\n    }\n  ]\n}"
												},
												{
													"name": "Unauthorized. The authorization header has been expected but not found (or found but is expired).",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v1/restore/instantRecovery/vmware/fcd/:mountId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"restore",
																"instantRecovery",
																"vmware",
																"fcd",
																":mountId"
															],
															"variable": [
																{
																	"key": "mountId",
																	"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																	"description": "(Required) Mount ID."
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												},
												{
													"name": "Forbidden. The user sending the request does not have adequate privileges to access one or more objects specified in the request.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v1/restore/instantRecovery/vmware/fcd/:mountId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"restore",
																"instantRecovery",
																"vmware",
																"fcd",
																":mountId"
															],
															"variable": [
																{
																	"key": "mountId",
																	"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																	"description": "(Required) Mount ID."
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												},
												{
													"name": "Not found. No object was found with the path parameter specified in the request.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v1/restore/instantRecovery/vmware/fcd/:mountId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"restore",
																"instantRecovery",
																"vmware",
																"fcd",
																":mountId"
															],
															"variable": [
																{
																	"key": "mountId",
																	"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																	"description": "(Required) Mount ID."
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												},
												{
													"name": "Internal server error. The request has been received but could not be completed because of an internal error at the server side.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v1/restore/instantRecovery/vmware/fcd/:mountId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"restore",
																"instantRecovery",
																"vmware",
																"fcd",
																":mountId"
															],
															"variable": [
																{
																	"key": "mountId",
																	"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																	"description": "(Required) Mount ID."
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												}
											]
										},
										{
											"name": "Stop FCD Publishing",
											"request": {
												"method": "POST",
												"header": [
													{
														"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
														"key": "x-api-version",
														"value": "1.0-rev1"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v1/restore/instantRecovery/vmware/fcd/:mountId/dismount",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"restore",
														"instantRecovery",
														"vmware",
														"fcd",
														":mountId",
														"dismount"
													],
													"variable": [
														{
															"key": "mountId",
															"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
															"description": "(Required) Mount ID."
														}
													]
												},
												"description": "The HTTP POST request to the `/api/v1/restore/instantRecovery/vmware/fcd/{mountId}/dismount` path allows you to stop publishing the recovered FCDs and remove the disks from the datastore."
											},
											"response": [
												{
													"name": "Disks has been unmounted.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v1/restore/instantRecovery/vmware/fcd/:mountId/dismount",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"restore",
																"instantRecovery",
																"vmware",
																"fcd",
																":mountId",
																"dismount"
															],
															"variable": [
																{
																	"key": "mountId",
																	"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																	"description": "(Required) Mount ID."
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"urn:uuid:0ef2569d-d74c-6851-5ea7-054e463f6341\",\n  \"sessionId\": \"ad41160b-efff-ec77-b29f-40895848a3f4\",\n  \"state\": \"Dismounting\",\n  \"spec\": {\n    \"objectRestorePointId\": \"2c804fd0-0146-c688-20e3-6db7a001e40b\",\n    \"destinationCluster\": {\n      \"name\": \"sint c\",\n      \"type\": \"Cluster\",\n      \"hostName\": \"occaecat non sed aliqua voluptate\",\n      \"objectId\": \"esse labore nisi ipsum\"\n    },\n    \"disksMapping\": [\n      {\n        \"nameInBackup\": \"nostrud cillum\",\n        \"mountedDiskName\": \"officia sunt sit\",\n        \"registeredFcdName\": \"et\"\n      },\n      {\n        \"nameInBackup\": \"sed\",\n        \"mountedDiskName\": \"non aliquip\",\n        \"registeredFcdName\": \"\"\n      }\n    ],\n    \"writeCache\": {\n      \"redirectIsEnabled\": false,\n      \"cacheDatastore\": {\n        \"name\": \"sunt\",\n        \"type\": \"Category\",\n        \"hostName\": \"incididunt ea\",\n        \"objectId\": \"Lorem\"\n      },\n      \"storagePolicy\": {\n        \"name\": \"ullamco nisi sit proident laboris\",\n        \"type\": \"Host\",\n        \"hostName\": \"elit adipisicing consectetur\",\n        \"objectId\": \"sit cupidatat\"\n      }\n    }\n  },\n  \"errorMessage\": \"pariatur in\",\n  \"mountedDisks\": [\n    {\n      \"nameInBackup\": \"am\",\n      \"mountedDiskName\": \"incididunt\",\n      \"registeredFcdName\": \"dolore minim ut labore aute\",\n      \"objectId\": \"par\"\n    },\n    {\n      \"nameInBackup\": \"proident ut ad ipsum veniam\",\n      \"mountedDiskName\": \"r\",\n      \"registeredFcdName\": \"enim officia sint dolore\",\n      \"objectId\": \"ut deserunt commodo Lorem\"\n    }\n  ]\n}"
												},
												{
													"name": "Bad request. This error is related to POST/PUT requests. The request body is malformed, incomplete or otherwise invalid.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v1/restore/instantRecovery/vmware/fcd/:mountId/dismount",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"restore",
																"instantRecovery",
																"vmware",
																"fcd",
																":mountId",
																"dismount"
															],
															"variable": [
																{
																	"key": "mountId",
																	"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																	"description": "(Required) Mount ID."
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												},
												{
													"name": "Unauthorized. The authorization header has been expected but not found (or found but is expired).",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v1/restore/instantRecovery/vmware/fcd/:mountId/dismount",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"restore",
																"instantRecovery",
																"vmware",
																"fcd",
																":mountId",
																"dismount"
															],
															"variable": [
																{
																	"key": "mountId",
																	"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																	"description": "(Required) Mount ID."
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												},
												{
													"name": "Forbidden. The user sending the request does not have adequate privileges to access one or more objects specified in the request.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v1/restore/instantRecovery/vmware/fcd/:mountId/dismount",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"restore",
																"instantRecovery",
																"vmware",
																"fcd",
																":mountId",
																"dismount"
															],
															"variable": [
																{
																	"key": "mountId",
																	"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																	"description": "(Required) Mount ID."
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												},
												{
													"name": "Not found. No object was found with the path parameter specified in the request.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v1/restore/instantRecovery/vmware/fcd/:mountId/dismount",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"restore",
																"instantRecovery",
																"vmware",
																"fcd",
																":mountId",
																"dismount"
															],
															"variable": [
																{
																	"key": "mountId",
																	"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																	"description": "(Required) Mount ID."
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												},
												{
													"name": "Internal server error. The request has been received but could not be completed because of an internal error at the server side.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v1/restore/instantRecovery/vmware/fcd/:mountId/dismount",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"restore",
																"instantRecovery",
																"vmware",
																"fcd",
																":mountId",
																"dismount"
															],
															"variable": [
																{
																	"key": "mountId",
																	"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																	"description": "(Required) Mount ID."
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												}
											]
										},
										{
											"name": "Start FCD Migration",
											"request": {
												"method": "POST",
												"header": [
													{
														"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
														"key": "x-api-version",
														"value": "1.0-rev1"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"targetDatastore\": {\n    \"name\": \"consequat ullamco et\",\n    \"type\": \"VirtualApp\",\n    \"hostName\": \"amet\",\n    \"objectId\": \"voluptate cupidatat commodo dolor\"\n  },\n  \"mountedDiskNames\": [\n    \"pariatur labore amet et\",\n    \"in adipisicing veniam velit\"\n  ],\n  \"storagePolicy\": {\n    \"name\": \"sit dolor\",\n    \"type\": \"Datacenter\",\n    \"hostName\": \"deserunt minim sit ut\",\n    \"objectId\": \"nisi\"\n  }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/v1/restore/instantRecovery/vmware/fcd/:mountId/migrate",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"restore",
														"instantRecovery",
														"vmware",
														"fcd",
														":mountId",
														"migrate"
													],
													"variable": [
														{
															"key": "mountId",
															"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
															"description": "(Required) Mount ID."
														}
													]
												},
												"description": "The HTTP POST request to the `/api/v1/restore/instantRecovery/vmware/fcd/{mountId}/migrate` path allows you to start migration of FCDs from the specified mount."
											},
											"response": [
												{
													"name": "FCD Migration has been started.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"targetDatastore\": {\n    \"name\": \"cupidatat culpa\",\n    \"type\": \"Tag\",\n    \"hostName\": \"esse Ut\",\n    \"objectId\": \"eiusmod tempor\"\n  },\n  \"mountedDiskNames\": [\n    \"labore magna commodo incididunt\",\n    \"ut quis anim\"\n  ],\n  \"storagePolicy\": {\n    \"name\": \"dolor\",\n    \"type\": \"Tag\",\n    \"hostName\": \"Ut anim sed\",\n    \"objectId\": \"qui dolore\"\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/v1/restore/instantRecovery/vmware/fcd/:mountId/migrate",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"restore",
																"instantRecovery",
																"vmware",
																"fcd",
																":mountId",
																"migrate"
															],
															"variable": [
																{
																	"key": "mountId",
																	"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																	"description": "(Required) Mount ID."
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": \"urn:uuid:0ef2569d-d74c-6851-5ea7-054e463f6341\",\n  \"sessionId\": \"ad41160b-efff-ec77-b29f-40895848a3f4\",\n  \"state\": \"Dismounting\",\n  \"spec\": {\n    \"objectRestorePointId\": \"2c804fd0-0146-c688-20e3-6db7a001e40b\",\n    \"destinationCluster\": {\n      \"name\": \"sint c\",\n      \"type\": \"Cluster\",\n      \"hostName\": \"occaecat non sed aliqua voluptate\",\n      \"objectId\": \"esse labore nisi ipsum\"\n    },\n    \"disksMapping\": [\n      {\n        \"nameInBackup\": \"nostrud cillum\",\n        \"mountedDiskName\": \"officia sunt sit\",\n        \"registeredFcdName\": \"et\"\n      },\n      {\n        \"nameInBackup\": \"sed\",\n        \"mountedDiskName\": \"non aliquip\",\n        \"registeredFcdName\": \"\"\n      }\n    ],\n    \"writeCache\": {\n      \"redirectIsEnabled\": false,\n      \"cacheDatastore\": {\n        \"name\": \"sunt\",\n        \"type\": \"Category\",\n        \"hostName\": \"incididunt ea\",\n        \"objectId\": \"Lorem\"\n      },\n      \"storagePolicy\": {\n        \"name\": \"ullamco nisi sit proident laboris\",\n        \"type\": \"Host\",\n        \"hostName\": \"elit adipisicing consectetur\",\n        \"objectId\": \"sit cupidatat\"\n      }\n    }\n  },\n  \"errorMessage\": \"pariatur in\",\n  \"mountedDisks\": [\n    {\n      \"nameInBackup\": \"am\",\n      \"mountedDiskName\": \"incididunt\",\n      \"registeredFcdName\": \"dolore minim ut labore aute\",\n      \"objectId\": \"par\"\n    },\n    {\n      \"nameInBackup\": \"proident ut ad ipsum veniam\",\n      \"mountedDiskName\": \"r\",\n      \"registeredFcdName\": \"enim officia sint dolore\",\n      \"objectId\": \"ut deserunt commodo Lorem\"\n    }\n  ]\n}"
												},
												{
													"name": "Bad request. This error is related to POST/PUT requests. The request body is malformed, incomplete or otherwise invalid.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"targetDatastore\": {\n    \"name\": \"cupidatat culpa\",\n    \"type\": \"Tag\",\n    \"hostName\": \"esse Ut\",\n    \"objectId\": \"eiusmod tempor\"\n  },\n  \"mountedDiskNames\": [\n    \"labore magna commodo incididunt\",\n    \"ut quis anim\"\n  ],\n  \"storagePolicy\": {\n    \"name\": \"dolor\",\n    \"type\": \"Tag\",\n    \"hostName\": \"Ut anim sed\",\n    \"objectId\": \"qui dolore\"\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/v1/restore/instantRecovery/vmware/fcd/:mountId/migrate",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"restore",
																"instantRecovery",
																"vmware",
																"fcd",
																":mountId",
																"migrate"
															],
															"variable": [
																{
																	"key": "mountId",
																	"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																	"description": "(Required) Mount ID."
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												},
												{
													"name": "Unauthorized. The authorization header has been expected but not found (or found but is expired).",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"targetDatastore\": {\n    \"name\": \"cupidatat culpa\",\n    \"type\": \"Tag\",\n    \"hostName\": \"esse Ut\",\n    \"objectId\": \"eiusmod tempor\"\n  },\n  \"mountedDiskNames\": [\n    \"labore magna commodo incididunt\",\n    \"ut quis anim\"\n  ],\n  \"storagePolicy\": {\n    \"name\": \"dolor\",\n    \"type\": \"Tag\",\n    \"hostName\": \"Ut anim sed\",\n    \"objectId\": \"qui dolore\"\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/v1/restore/instantRecovery/vmware/fcd/:mountId/migrate",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"restore",
																"instantRecovery",
																"vmware",
																"fcd",
																":mountId",
																"migrate"
															],
															"variable": [
																{
																	"key": "mountId",
																	"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																	"description": "(Required) Mount ID."
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												},
												{
													"name": "Forbidden. The user sending the request does not have adequate privileges to access one or more objects specified in the request.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"targetDatastore\": {\n    \"name\": \"cupidatat culpa\",\n    \"type\": \"Tag\",\n    \"hostName\": \"esse Ut\",\n    \"objectId\": \"eiusmod tempor\"\n  },\n  \"mountedDiskNames\": [\n    \"labore magna commodo incididunt\",\n    \"ut quis anim\"\n  ],\n  \"storagePolicy\": {\n    \"name\": \"dolor\",\n    \"type\": \"Tag\",\n    \"hostName\": \"Ut anim sed\",\n    \"objectId\": \"qui dolore\"\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/v1/restore/instantRecovery/vmware/fcd/:mountId/migrate",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"restore",
																"instantRecovery",
																"vmware",
																"fcd",
																":mountId",
																"migrate"
															],
															"variable": [
																{
																	"key": "mountId",
																	"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																	"description": "(Required) Mount ID."
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												},
												{
													"name": "Not found. No object was found with the path parameter specified in the request.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"targetDatastore\": {\n    \"name\": \"cupidatat culpa\",\n    \"type\": \"Tag\",\n    \"hostName\": \"esse Ut\",\n    \"objectId\": \"eiusmod tempor\"\n  },\n  \"mountedDiskNames\": [\n    \"labore magna commodo incididunt\",\n    \"ut quis anim\"\n  ],\n  \"storagePolicy\": {\n    \"name\": \"dolor\",\n    \"type\": \"Tag\",\n    \"hostName\": \"Ut anim sed\",\n    \"objectId\": \"qui dolore\"\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/v1/restore/instantRecovery/vmware/fcd/:mountId/migrate",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"restore",
																"instantRecovery",
																"vmware",
																"fcd",
																":mountId",
																"migrate"
															],
															"variable": [
																{
																	"key": "mountId",
																	"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																	"description": "(Required) Mount ID."
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												},
												{
													"name": "Internal server error. The request has been received but could not be completed because of an internal error at the server side.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"targetDatastore\": {\n    \"name\": \"cupidatat culpa\",\n    \"type\": \"Tag\",\n    \"hostName\": \"esse Ut\",\n    \"objectId\": \"eiusmod tempor\"\n  },\n  \"mountedDiskNames\": [\n    \"labore magna commodo incididunt\",\n    \"ut quis anim\"\n  ],\n  \"storagePolicy\": {\n    \"name\": \"dolor\",\n    \"type\": \"Tag\",\n    \"hostName\": \"Ut anim sed\",\n    \"objectId\": \"qui dolore\"\n  }\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/api/v1/restore/instantRecovery/vmware/fcd/:mountId/migrate",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"restore",
																"instantRecovery",
																"vmware",
																"fcd",
																":mountId",
																"migrate"
															],
															"variable": [
																{
																	"key": "mountId",
																	"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																	"description": "(Required) Mount ID."
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												}
											]
										}
									]
								},
								{
									"name": "Start Instant FCD Recovery",
									"request": {
										"method": "POST",
										"header": [
											{
												"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
												"key": "x-api-version",
												"value": "1.0-rev1"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"objectRestorePointId\": \"urn:uuid:77dcfb21-7bc3-ecbd-d226-3c2a47bab05f\",\n  \"destinationCluster\": {\n    \"name\": \"officia culpa aliquip laboris\",\n    \"type\": \"Unknown\",\n    \"hostName\": \"eu in\",\n    \"objectId\": \"in Excepteur in aliqu\"\n  },\n  \"disksMapping\": [\n    {\n      \"nameInBackup\": \"dolor aliqua irure Lorem\",\n      \"mountedDiskName\": \"dolore velit exercitation culpa consequat\",\n      \"registeredFcdName\": \"sunt tempor anim commodo\"\n    },\n    {\n      \"nameInBackup\": \"in culpa labore amet cupidatat\",\n      \"mountedDiskName\": \"occaecat id pariatur sed\",\n      \"registeredFcdName\": \"qui\"\n    }\n  ],\n  \"writeCache\": {\n    \"redirectIsEnabled\": false,\n    \"cacheDatastore\": {\n      \"name\": \"dolore anim mollit\",\n      \"type\": \"VirtualApp\",\n      \"hostName\": \"nisi\",\n      \"objectId\": \"dolor Lorem\"\n    },\n    \"storagePolicy\": {\n      \"name\": \"ullamco proident ea\",\n      \"type\": \"vCenterServer\",\n      \"hostName\": \"exercitation incididunt\",\n      \"objectId\": \"elit\"\n    }\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{baseUrl}}/api/v1/restore/instantRecovery/vmware/fcd/",
										"description": "The HTTP POST request to the `/api/v1/restore/instantRecovery/vmware/fcd/` path allows you to start Instant FCD Recovery from the specified restore point to the specified cluster. For details on how to get a cluster model, see [Get VMware vSphere Server Objects](#operation/GetVmwareHostObject)."
									},
									"response": [
										{
											"name": "Instant FCD Recovery has been started.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													},
													{
														"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
														"key": "x-api-version",
														"value": "1.0-rev1"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"objectRestorePointId\": \"urn:uuid:f3c00501-0e0d-0fa1-ca7a-e47cfa9e5b09\",\n  \"destinationCluster\": {\n    \"name\": \"dolore ex incididunt tempor\",\n    \"type\": \"VirtualMachine\",\n    \"hostName\": \"pariatur ullamco\",\n    \"objectId\": \"Excepteur esse laborum proident ipsum\"\n  },\n  \"disksMapping\": [\n    {\n      \"nameInBackup\": \"id Duis laboris eu\",\n      \"mountedDiskName\": \"nostrud ullamco dolor\",\n      \"registeredFcdName\": \"eu nisi qui\"\n    },\n    {\n      \"nameInBackup\": \"esse labore dolor id quis\",\n      \"mountedDiskName\": \"dolore aute\",\n      \"registeredFcdName\": \"in dolor culpa id\"\n    }\n  ],\n  \"writeCache\": {\n    \"redirectIsEnabled\": true,\n    \"cacheDatastore\": {\n      \"name\": \"non laboris esse\",\n      \"type\": \"DatastoreCluster\",\n      \"hostName\": \"cu\",\n      \"objectId\": \"et\"\n    },\n    \"storagePolicy\": {\n      \"name\": \"amet nisi et\",\n      \"type\": \"Datacenter\",\n      \"hostName\": \"reprehenderit incididunt sint dolore\",\n      \"objectId\": \"officia\"\n    }\n  }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{baseUrl}}/api/v1/restore/instantRecovery/vmware/fcd/"
											},
											"status": "Created",
											"code": 201,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"id\": \"urn:uuid:71784279-f45d-c231-1aab-b4ee9142999f\",\n  \"sessionId\": \"urn:uuid:0e4dcb7b-8c26-fd2a-5c0b-818d8d83ab81\",\n  \"state\": \"Mounted\",\n  \"spec\": {\n    \"objectRestorePointId\": \"urn:uuid:db61dcc3-3732-5220-c8cc-60842f4e9cd9\",\n    \"destinationCluster\": {\n      \"name\": \"cillum incididunt\",\n      \"type\": \"StoragePolicy\",\n      \"hostName\": \"mollit proident Lorem sit nisi\",\n      \"objectId\": \"velit cupidatat ad nostrud ea\"\n    },\n    \"disksMapping\": [\n      {\n        \"nameInBackup\": \"sed dolor consequat\",\n        \"mountedDiskName\": \"sit nostrud\",\n        \"registeredFcdName\": \"non\"\n      },\n      {\n        \"nameInBackup\": \"amet enim tempor\",\n        \"mountedDiskName\": \"in officia ut\",\n        \"registeredFcdName\": \"cupidatat commodo\"\n      }\n    ],\n    \"writeCache\": {\n      \"redirectIsEnabled\": false,\n      \"cacheDatastore\": {\n        \"name\": \"eu incididunt nisi Duis velit\",\n        \"type\": \"Unknown\",\n        \"hostName\": \"nostrud pariatur\",\n        \"objectId\": \"in adipisicing esse\"\n      },\n      \"storagePolicy\": {\n        \"name\": \"ex non id\",\n        \"type\": \"ComputeResource\",\n        \"hostName\": \"Duis quis Lorem\",\n        \"objectId\": \"ut\"\n      }\n    }\n  },\n  \"errorMessage\": \"aliquip incididunt\",\n  \"mountedDisks\": [\n    {\n      \"nameInBackup\": \"eiusmod cupidata\",\n      \"mountedDiskName\": \"sunt minim\",\n      \"registeredFcdName\": \"irure do nisi\",\n      \"objectId\": \"in ea\"\n    },\n    {\n      \"nameInBackup\": \"deserunt fugiat\",\n      \"mountedDiskName\": \"id ad esse\",\n      \"registeredFcdName\": \"Duis consequat reprehenderit occaecat enim\",\n      \"objectId\": \"reprehenderit dolor nulla velit\"\n    }\n  ]\n}"
										},
										{
											"name": "Bad request. This error is related to POST/PUT requests. The request body is malformed, incomplete or otherwise invalid.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													},
													{
														"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
														"key": "x-api-version",
														"value": "1.0-rev1"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"objectRestorePointId\": \"urn:uuid:f3c00501-0e0d-0fa1-ca7a-e47cfa9e5b09\",\n  \"destinationCluster\": {\n    \"name\": \"dolore ex incididunt tempor\",\n    \"type\": \"VirtualMachine\",\n    \"hostName\": \"pariatur ullamco\",\n    \"objectId\": \"Excepteur esse laborum proident ipsum\"\n  },\n  \"disksMapping\": [\n    {\n      \"nameInBackup\": \"id Duis laboris eu\",\n      \"mountedDiskName\": \"nostrud ullamco dolor\",\n      \"registeredFcdName\": \"eu nisi qui\"\n    },\n    {\n      \"nameInBackup\": \"esse labore dolor id quis\",\n      \"mountedDiskName\": \"dolore aute\",\n      \"registeredFcdName\": \"in dolor culpa id\"\n    }\n  ],\n  \"writeCache\": {\n    \"redirectIsEnabled\": true,\n    \"cacheDatastore\": {\n      \"name\": \"non laboris esse\",\n      \"type\": \"DatastoreCluster\",\n      \"hostName\": \"cu\",\n      \"objectId\": \"et\"\n    },\n    \"storagePolicy\": {\n      \"name\": \"amet nisi et\",\n      \"type\": \"Datacenter\",\n      \"hostName\": \"reprehenderit incididunt sint dolore\",\n      \"objectId\": \"officia\"\n    }\n  }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{baseUrl}}/api/v1/restore/instantRecovery/vmware/fcd/"
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
										},
										{
											"name": "Unauthorized. The authorization header has been expected but not found (or found but is expired).",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													},
													{
														"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
														"key": "x-api-version",
														"value": "1.0-rev1"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"objectRestorePointId\": \"urn:uuid:f3c00501-0e0d-0fa1-ca7a-e47cfa9e5b09\",\n  \"destinationCluster\": {\n    \"name\": \"dolore ex incididunt tempor\",\n    \"type\": \"VirtualMachine\",\n    \"hostName\": \"pariatur ullamco\",\n    \"objectId\": \"Excepteur esse laborum proident ipsum\"\n  },\n  \"disksMapping\": [\n    {\n      \"nameInBackup\": \"id Duis laboris eu\",\n      \"mountedDiskName\": \"nostrud ullamco dolor\",\n      \"registeredFcdName\": \"eu nisi qui\"\n    },\n    {\n      \"nameInBackup\": \"esse labore dolor id quis\",\n      \"mountedDiskName\": \"dolore aute\",\n      \"registeredFcdName\": \"in dolor culpa id\"\n    }\n  ],\n  \"writeCache\": {\n    \"redirectIsEnabled\": true,\n    \"cacheDatastore\": {\n      \"name\": \"non laboris esse\",\n      \"type\": \"DatastoreCluster\",\n      \"hostName\": \"cu\",\n      \"objectId\": \"et\"\n    },\n    \"storagePolicy\": {\n      \"name\": \"amet nisi et\",\n      \"type\": \"Datacenter\",\n      \"hostName\": \"reprehenderit incididunt sint dolore\",\n      \"objectId\": \"officia\"\n    }\n  }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{baseUrl}}/api/v1/restore/instantRecovery/vmware/fcd/"
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
										},
										{
											"name": "Forbidden. The user sending the request does not have adequate privileges to access one or more objects specified in the request.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													},
													{
														"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
														"key": "x-api-version",
														"value": "1.0-rev1"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"objectRestorePointId\": \"urn:uuid:f3c00501-0e0d-0fa1-ca7a-e47cfa9e5b09\",\n  \"destinationCluster\": {\n    \"name\": \"dolore ex incididunt tempor\",\n    \"type\": \"VirtualMachine\",\n    \"hostName\": \"pariatur ullamco\",\n    \"objectId\": \"Excepteur esse laborum proident ipsum\"\n  },\n  \"disksMapping\": [\n    {\n      \"nameInBackup\": \"id Duis laboris eu\",\n      \"mountedDiskName\": \"nostrud ullamco dolor\",\n      \"registeredFcdName\": \"eu nisi qui\"\n    },\n    {\n      \"nameInBackup\": \"esse labore dolor id quis\",\n      \"mountedDiskName\": \"dolore aute\",\n      \"registeredFcdName\": \"in dolor culpa id\"\n    }\n  ],\n  \"writeCache\": {\n    \"redirectIsEnabled\": true,\n    \"cacheDatastore\": {\n      \"name\": \"non laboris esse\",\n      \"type\": \"DatastoreCluster\",\n      \"hostName\": \"cu\",\n      \"objectId\": \"et\"\n    },\n    \"storagePolicy\": {\n      \"name\": \"amet nisi et\",\n      \"type\": \"Datacenter\",\n      \"hostName\": \"reprehenderit incididunt sint dolore\",\n      \"objectId\": \"officia\"\n    }\n  }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{baseUrl}}/api/v1/restore/instantRecovery/vmware/fcd/"
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
										},
										{
											"name": "Not found. No object was found with the path parameter specified in the request.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													},
													{
														"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
														"key": "x-api-version",
														"value": "1.0-rev1"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"objectRestorePointId\": \"urn:uuid:f3c00501-0e0d-0fa1-ca7a-e47cfa9e5b09\",\n  \"destinationCluster\": {\n    \"name\": \"dolore ex incididunt tempor\",\n    \"type\": \"VirtualMachine\",\n    \"hostName\": \"pariatur ullamco\",\n    \"objectId\": \"Excepteur esse laborum proident ipsum\"\n  },\n  \"disksMapping\": [\n    {\n      \"nameInBackup\": \"id Duis laboris eu\",\n      \"mountedDiskName\": \"nostrud ullamco dolor\",\n      \"registeredFcdName\": \"eu nisi qui\"\n    },\n    {\n      \"nameInBackup\": \"esse labore dolor id quis\",\n      \"mountedDiskName\": \"dolore aute\",\n      \"registeredFcdName\": \"in dolor culpa id\"\n    }\n  ],\n  \"writeCache\": {\n    \"redirectIsEnabled\": true,\n    \"cacheDatastore\": {\n      \"name\": \"non laboris esse\",\n      \"type\": \"DatastoreCluster\",\n      \"hostName\": \"cu\",\n      \"objectId\": \"et\"\n    },\n    \"storagePolicy\": {\n      \"name\": \"amet nisi et\",\n      \"type\": \"Datacenter\",\n      \"hostName\": \"reprehenderit incididunt sint dolore\",\n      \"objectId\": \"officia\"\n    }\n  }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{baseUrl}}/api/v1/restore/instantRecovery/vmware/fcd/"
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
										},
										{
											"name": "Internal server error. The request has been received but could not be completed because of an internal error at the server side.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: apikey",
														"key": "Authorization",
														"value": "<API Key>"
													},
													{
														"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
														"key": "x-api-version",
														"value": "1.0-rev1"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"objectRestorePointId\": \"urn:uuid:f3c00501-0e0d-0fa1-ca7a-e47cfa9e5b09\",\n  \"destinationCluster\": {\n    \"name\": \"dolore ex incididunt tempor\",\n    \"type\": \"VirtualMachine\",\n    \"hostName\": \"pariatur ullamco\",\n    \"objectId\": \"Excepteur esse laborum proident ipsum\"\n  },\n  \"disksMapping\": [\n    {\n      \"nameInBackup\": \"id Duis laboris eu\",\n      \"mountedDiskName\": \"nostrud ullamco dolor\",\n      \"registeredFcdName\": \"eu nisi qui\"\n    },\n    {\n      \"nameInBackup\": \"esse labore dolor id quis\",\n      \"mountedDiskName\": \"dolore aute\",\n      \"registeredFcdName\": \"in dolor culpa id\"\n    }\n  ],\n  \"writeCache\": {\n    \"redirectIsEnabled\": true,\n    \"cacheDatastore\": {\n      \"name\": \"non laboris esse\",\n      \"type\": \"DatastoreCluster\",\n      \"hostName\": \"cu\",\n      \"objectId\": \"et\"\n    },\n    \"storagePolicy\": {\n      \"name\": \"amet nisi et\",\n      \"type\": \"Datacenter\",\n      \"hostName\": \"reprehenderit incididunt sint dolore\",\n      \"objectId\": \"officia\"\n    }\n  }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{baseUrl}}/api/v1/restore/instantRecovery/vmware/fcd/"
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
										}
									]
								}
							]
						},
						{
							"name": "automation",
							"item": [
								{
									"name": "jobs",
									"item": [
										{
											"name": "Import Jobs",
											"request": {
												"method": "POST",
												"header": [
													{
														"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
														"key": "x-api-version",
														"value": "1.0-rev1"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"jobs\": [\n    {\n      \"description\": \"veniam voluptate Excepteur\",\n      \"guestProcessing\": {\n        \"applicationAwareProcessing\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"guestFileSystemIndexing\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"guestInteractionProxies\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"guestCredentials\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"isHighPriority\": false,\n      \"name\": \"e\",\n      \"schedule\": {\n        \"runAutomatically\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"daily\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"monthly\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"periodically\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"continuously\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"afterThisJob\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"retry\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"backupWindow\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"storage\": {\n        \"backupProxies\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"backupRepository\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"retentionPolicy\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"gfsPolicy\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"advancedSettings\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"type\": \"Backup\",\n      \"virtualMachines\": {\n        \"includes\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"excludes\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      }\n    },\n    {\n      \"description\": \"eu quis in nostrud\",\n      \"guestProcessing\": {\n        \"applicationAwareProcessing\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"guestFileSystemIndexing\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"guestInteractionProxies\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"guestCredentials\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"isHighPriority\": true,\n      \"name\": \"Duis anim\",\n      \"schedule\": {\n        \"runAutomatically\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"daily\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"monthly\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"periodically\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"continuously\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"afterThisJob\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"retry\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"backupWindow\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"storage\": {\n        \"backupProxies\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"backupRepository\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"retentionPolicy\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"gfsPolicy\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"advancedSettings\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"type\": \"Backup\",\n      \"virtualMachines\": {\n        \"includes\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"excludes\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      }\n    }\n  ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{baseUrl}}/api/v1/automation/jobs/import",
												"description": "The HTTP POST request to the `/api/v1/automation/jobs/import` path allows you to import jobs to Veeam Backup & Replication."
											},
											"response": [
												{
													"name": "Automation session has been created to import the jobs. To check the progress, track the session `state`.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"jobs\": [\n    {\n      \"description\": \"cupidatat enim pariatur\",\n      \"guestProcessing\": {\n        \"applicationAwareProcessing\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"guestFileSystemIndexing\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"guestInteractionProxies\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"guestCredentials\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"isHighPriority\": true,\n      \"name\": \"consectetur Duis\",\n      \"schedule\": {\n        \"runAutomatically\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"daily\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"monthly\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"periodically\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"continuously\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"afterThisJob\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"retry\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"backupWindow\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"storage\": {\n        \"backupProxies\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"backupRepository\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"retentionPolicy\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"gfsPolicy\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"advancedSettings\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"type\": \"Backup\",\n      \"virtualMachines\": {\n        \"includes\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"excludes\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      }\n    },\n    {\n      \"description\": \"est cupidatat culpa\",\n      \"guestProcessing\": {\n        \"applicationAwareProcessing\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"guestFileSystemIndexing\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"guestInteractionProxies\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"guestCredentials\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"isHighPriority\": false,\n      \"name\": \"cillum sed Lorem pariatur\",\n      \"schedule\": {\n        \"runAutomatically\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"daily\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"monthly\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"periodically\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"continuously\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"afterThisJob\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"retry\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"backupWindow\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"storage\": {\n        \"backupProxies\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"backupRepository\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"retentionPolicy\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"gfsPolicy\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"advancedSettings\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"type\": \"Backup\",\n      \"virtualMachines\": {\n        \"includes\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"excludes\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      }\n    }\n  ]\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": "{{baseUrl}}/api/v1/automation/jobs/import"
													},
													"status": "Created",
													"code": 201,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"activityId\": \"urn:uuid:ff04bc79-41c7-abe9-79b9-32b72d0d8ebe\",\n  \"creationTime\": \"1976-08-31T07:10:18.372Z\",\n  \"id\": \"6b97bae8-5d34-c1c8-6373-25234a7b2678\",\n  \"name\": \"Ut pariatur do commodo\",\n  \"sessionType\": \"Automation\",\n  \"state\": \"Starting\",\n  \"usn\": -68197960,\n  \"endTime\": \"1998-06-07T18:50:39.738Z\",\n  \"progressPercent\": -52750286,\n  \"result\": {\n    \"result\": \"None\",\n    \"message\": \"deserunt commodo eu\",\n    \"isCanceled\": true\n  },\n  \"resourceId\": \"af28d036-9436-ab07-5749-6bc82423562b\",\n  \"resourceReference\": \"Ut\",\n  \"parentSessionId\": \"urn:uuid:017adbc7-e2d7-b332-dd71-9fa6701d99bb\"\n}"
												},
												{
													"name": "Bad request. This error is related to POST/PUT requests. The request body is malformed, incomplete or otherwise invalid.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"jobs\": [\n    {\n      \"description\": \"cupidatat enim pariatur\",\n      \"guestProcessing\": {\n        \"applicationAwareProcessing\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"guestFileSystemIndexing\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"guestInteractionProxies\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"guestCredentials\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"isHighPriority\": true,\n      \"name\": \"consectetur Duis\",\n      \"schedule\": {\n        \"runAutomatically\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"daily\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"monthly\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"periodically\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"continuously\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"afterThisJob\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"retry\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"backupWindow\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"storage\": {\n        \"backupProxies\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"backupRepository\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"retentionPolicy\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"gfsPolicy\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"advancedSettings\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"type\": \"Backup\",\n      \"virtualMachines\": {\n        \"includes\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"excludes\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      }\n    },\n    {\n      \"description\": \"est cupidatat culpa\",\n      \"guestProcessing\": {\n        \"applicationAwareProcessing\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"guestFileSystemIndexing\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"guestInteractionProxies\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"guestCredentials\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"isHighPriority\": false,\n      \"name\": \"cillum sed Lorem pariatur\",\n      \"schedule\": {\n        \"runAutomatically\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"daily\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"monthly\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"periodically\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"continuously\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"afterThisJob\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"retry\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"backupWindow\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"storage\": {\n        \"backupProxies\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"backupRepository\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"retentionPolicy\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"gfsPolicy\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"advancedSettings\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"type\": \"Backup\",\n      \"virtualMachines\": {\n        \"includes\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"excludes\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      }\n    }\n  ]\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": "{{baseUrl}}/api/v1/automation/jobs/import"
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												},
												{
													"name": "Unauthorized. The authorization header has been expected but not found (or found but is expired).",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"jobs\": [\n    {\n      \"description\": \"cupidatat enim pariatur\",\n      \"guestProcessing\": {\n        \"applicationAwareProcessing\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"guestFileSystemIndexing\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"guestInteractionProxies\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"guestCredentials\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"isHighPriority\": true,\n      \"name\": \"consectetur Duis\",\n      \"schedule\": {\n        \"runAutomatically\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"daily\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"monthly\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"periodically\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"continuously\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"afterThisJob\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"retry\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"backupWindow\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"storage\": {\n        \"backupProxies\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"backupRepository\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"retentionPolicy\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"gfsPolicy\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"advancedSettings\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"type\": \"Backup\",\n      \"virtualMachines\": {\n        \"includes\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"excludes\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      }\n    },\n    {\n      \"description\": \"est cupidatat culpa\",\n      \"guestProcessing\": {\n        \"applicationAwareProcessing\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"guestFileSystemIndexing\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"guestInteractionProxies\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"guestCredentials\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"isHighPriority\": false,\n      \"name\": \"cillum sed Lorem pariatur\",\n      \"schedule\": {\n        \"runAutomatically\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"daily\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"monthly\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"periodically\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"continuously\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"afterThisJob\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"retry\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"backupWindow\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"storage\": {\n        \"backupProxies\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"backupRepository\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"retentionPolicy\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"gfsPolicy\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"advancedSettings\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"type\": \"Backup\",\n      \"virtualMachines\": {\n        \"includes\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"excludes\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      }\n    }\n  ]\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": "{{baseUrl}}/api/v1/automation/jobs/import"
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												},
												{
													"name": "Forbidden. The user sending the request does not have adequate privileges to access one or more objects specified in the request.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"jobs\": [\n    {\n      \"description\": \"cupidatat enim pariatur\",\n      \"guestProcessing\": {\n        \"applicationAwareProcessing\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"guestFileSystemIndexing\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"guestInteractionProxies\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"guestCredentials\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"isHighPriority\": true,\n      \"name\": \"consectetur Duis\",\n      \"schedule\": {\n        \"runAutomatically\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"daily\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"monthly\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"periodically\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"continuously\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"afterThisJob\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"retry\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"backupWindow\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"storage\": {\n        \"backupProxies\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"backupRepository\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"retentionPolicy\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"gfsPolicy\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"advancedSettings\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"type\": \"Backup\",\n      \"virtualMachines\": {\n        \"includes\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"excludes\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      }\n    },\n    {\n      \"description\": \"est cupidatat culpa\",\n      \"guestProcessing\": {\n        \"applicationAwareProcessing\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"guestFileSystemIndexing\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"guestInteractionProxies\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"guestCredentials\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"isHighPriority\": false,\n      \"name\": \"cillum sed Lorem pariatur\",\n      \"schedule\": {\n        \"runAutomatically\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"daily\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"monthly\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"periodically\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"continuously\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"afterThisJob\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"retry\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"backupWindow\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"storage\": {\n        \"backupProxies\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"backupRepository\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"retentionPolicy\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"gfsPolicy\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"advancedSettings\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"type\": \"Backup\",\n      \"virtualMachines\": {\n        \"includes\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"excludes\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      }\n    }\n  ]\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": "{{baseUrl}}/api/v1/automation/jobs/import"
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												},
												{
													"name": "Internal server error. The request has been received but could not be completed because of an internal error at the server side.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"jobs\": [\n    {\n      \"description\": \"cupidatat enim pariatur\",\n      \"guestProcessing\": {\n        \"applicationAwareProcessing\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"guestFileSystemIndexing\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"guestInteractionProxies\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"guestCredentials\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"isHighPriority\": true,\n      \"name\": \"consectetur Duis\",\n      \"schedule\": {\n        \"runAutomatically\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"daily\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"monthly\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"periodically\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"continuously\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"afterThisJob\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"retry\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"backupWindow\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"storage\": {\n        \"backupProxies\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"backupRepository\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"retentionPolicy\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"gfsPolicy\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"advancedSettings\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"type\": \"Backup\",\n      \"virtualMachines\": {\n        \"includes\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"excludes\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      }\n    },\n    {\n      \"description\": \"est cupidatat culpa\",\n      \"guestProcessing\": {\n        \"applicationAwareProcessing\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"guestFileSystemIndexing\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"guestInteractionProxies\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"guestCredentials\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"isHighPriority\": false,\n      \"name\": \"cillum sed Lorem pariatur\",\n      \"schedule\": {\n        \"runAutomatically\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"daily\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"monthly\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"periodically\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"continuously\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"afterThisJob\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"retry\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"backupWindow\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"storage\": {\n        \"backupProxies\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"backupRepository\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"retentionPolicy\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"gfsPolicy\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"advancedSettings\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"type\": \"Backup\",\n      \"virtualMachines\": {\n        \"includes\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"excludes\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      }\n    }\n  ]\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": "{{baseUrl}}/api/v1/automation/jobs/import"
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												}
											]
										},
										{
											"name": "Export Jobs",
											"request": {
												"method": "POST",
												"header": [
													{
														"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
														"key": "x-api-version",
														"value": "1.0-rev1"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"ids\": [\n    \"cd298f4a-a54f-35d1-6d69-0c9683cbe86f\",\n    \"urn:uuid:e82ad506-ced7-2194-918f-4b1e779d6c6f\"\n  ],\n  \"types\": [\n    \"esse ullamco\",\n    \"amet irure ea proident\"\n  ],\n  \"names\": [\n    \"occaecat\",\n    \"nostrud aliqua ullamco sit\"\n  ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{baseUrl}}/api/v1/automation/jobs/export",
												"description": "The HTTP POST request to the `/api/v1/automation/jobs/export` path allows you to export jobs from Veeam Backup & Replication."
											},
											"response": [
												{
													"name": "OK",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"ids\": [\n    \"urn:uuid:02e6b648-ddf5-10af-5c71-c42f3d83293f\",\n    \"6628c075-d69a-22c3-28a6-f3e3ac046b07\"\n  ],\n  \"types\": [\n    \"quis\",\n    \"in sed consectetur\"\n  ],\n  \"names\": [\n    \"do laborum sit ut\",\n    \"Lorem voluptate sunt esse ex\"\n  ]\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": "{{baseUrl}}/api/v1/automation/jobs/export"
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"jobs\": [\n    {\n      \"description\": \"cupidatat enim pariatur\",\n      \"guestProcessing\": {\n        \"applicationAwareProcessing\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"guestFileSystemIndexing\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"guestInteractionProxies\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"guestCredentials\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"isHighPriority\": true,\n      \"name\": \"consectetur Duis\",\n      \"schedule\": {\n        \"runAutomatically\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"daily\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"monthly\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"periodically\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"continuously\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"afterThisJob\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"retry\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"backupWindow\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"storage\": {\n        \"backupProxies\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"backupRepository\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"retentionPolicy\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"gfsPolicy\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"advancedSettings\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"type\": \"Backup\",\n      \"virtualMachines\": {\n        \"includes\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"excludes\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      }\n    },\n    {\n      \"description\": \"est cupidatat culpa\",\n      \"guestProcessing\": {\n        \"applicationAwareProcessing\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"guestFileSystemIndexing\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"guestInteractionProxies\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"guestCredentials\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"isHighPriority\": false,\n      \"name\": \"cillum sed Lorem pariatur\",\n      \"schedule\": {\n        \"runAutomatically\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"daily\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"monthly\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"periodically\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"continuously\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"afterThisJob\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"retry\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"backupWindow\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"storage\": {\n        \"backupProxies\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"backupRepository\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"retentionPolicy\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"gfsPolicy\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"advancedSettings\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"type\": \"Backup\",\n      \"virtualMachines\": {\n        \"includes\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"excludes\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      }\n    }\n  ]\n}"
												},
												{
													"name": "Bad request. This error is related to POST/PUT requests. The request body is malformed, incomplete or otherwise invalid.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"ids\": [\n    \"urn:uuid:02e6b648-ddf5-10af-5c71-c42f3d83293f\",\n    \"6628c075-d69a-22c3-28a6-f3e3ac046b07\"\n  ],\n  \"types\": [\n    \"quis\",\n    \"in sed consectetur\"\n  ],\n  \"names\": [\n    \"do laborum sit ut\",\n    \"Lorem voluptate sunt esse ex\"\n  ]\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": "{{baseUrl}}/api/v1/automation/jobs/export"
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												},
												{
													"name": "Unauthorized. The authorization header has been expected but not found (or found but is expired).",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"ids\": [\n    \"urn:uuid:02e6b648-ddf5-10af-5c71-c42f3d83293f\",\n    \"6628c075-d69a-22c3-28a6-f3e3ac046b07\"\n  ],\n  \"types\": [\n    \"quis\",\n    \"in sed consectetur\"\n  ],\n  \"names\": [\n    \"do laborum sit ut\",\n    \"Lorem voluptate sunt esse ex\"\n  ]\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": "{{baseUrl}}/api/v1/automation/jobs/export"
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												},
												{
													"name": "Forbidden. The user sending the request does not have adequate privileges to access one or more objects specified in the request.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"ids\": [\n    \"urn:uuid:02e6b648-ddf5-10af-5c71-c42f3d83293f\",\n    \"6628c075-d69a-22c3-28a6-f3e3ac046b07\"\n  ],\n  \"types\": [\n    \"quis\",\n    \"in sed consectetur\"\n  ],\n  \"names\": [\n    \"do laborum sit ut\",\n    \"Lorem voluptate sunt esse ex\"\n  ]\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": "{{baseUrl}}/api/v1/automation/jobs/export"
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												},
												{
													"name": "Internal server error. The request has been received but could not be completed because of an internal error at the server side.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"ids\": [\n    \"urn:uuid:02e6b648-ddf5-10af-5c71-c42f3d83293f\",\n    \"6628c075-d69a-22c3-28a6-f3e3ac046b07\"\n  ],\n  \"types\": [\n    \"quis\",\n    \"in sed consectetur\"\n  ],\n  \"names\": [\n    \"do laborum sit ut\",\n    \"Lorem voluptate sunt esse ex\"\n  ]\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": "{{baseUrl}}/api/v1/automation/jobs/export"
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												}
											]
										}
									]
								},
								{
									"name": "credentials",
									"item": [
										{
											"name": "Import Credentials",
											"request": {
												"method": "POST",
												"header": [
													{
														"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
														"key": "x-api-version",
														"value": "1.0-rev1"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"credentials\": [\n    {\n      \"tag\": \"dolore incididunt\",\n      \"type\": \"Standard\",\n      \"username\": \"com\",\n      \"password\": \"in minim voluptate occaecat eiusmod\",\n      \"description\": \"magna\",\n      \"linuxAdditionalSettings\": {\n        \"SSHPort\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"autoElevated\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"addToSudoers\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"useSu\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"privateKey\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"passphrase\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"rootPassword\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      }\n    },\n    {\n      \"tag\": \"magna esse nulla\",\n      \"type\": \"Standard\",\n      \"username\": \"eiusmod est\",\n      \"password\": \"Ut proident Duis ipsum\",\n      \"description\": \"pariatur exercitation\",\n      \"linuxAdditionalSettings\": {\n        \"SSHPort\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"autoElevated\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"addToSudoers\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"useSu\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"privateKey\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"passphrase\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"rootPassword\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      }\n    }\n  ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{baseUrl}}/api/v1/automation/credentials/import",
												"description": "The HTTP POST request to the `/api/v1/automation/credentials/import` path allows you to import credentials to Veeam Backup & Replication."
											},
											"response": [
												{
													"name": "Automation session has been created to import the credentials. To check the progress, track the session `state`.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"credentials\": [\n    {\n      \"tag\": \"dolor ea\",\n      \"type\": \"Linux\",\n      \"username\": \"aute non in\",\n      \"password\": \"elit minim\",\n      \"description\": \"dolore sint anim cillum Excepteur\",\n      \"linuxAdditionalSettings\": {\n        \"SSHPort\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"autoElevated\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"addToSudoers\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"useSu\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"privateKey\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"passphrase\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"rootPassword\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      }\n    },\n    {\n      \"tag\": \"veniam sunt irure\",\n      \"type\": \"Standard\",\n      \"username\": \"elit ad adipisicing\",\n      \"password\": \"est consequat sit\",\n      \"description\": \"aliqua elit dolore\",\n      \"linuxAdditionalSettings\": {\n        \"SSHPort\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"autoElevated\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"addToSudoers\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"useSu\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"privateKey\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"passphrase\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"rootPassword\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      }\n    }\n  ]\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": "{{baseUrl}}/api/v1/automation/credentials/import"
													},
													"status": "Created",
													"code": 201,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"activityId\": \"urn:uuid:ff04bc79-41c7-abe9-79b9-32b72d0d8ebe\",\n  \"creationTime\": \"1976-08-31T07:10:18.372Z\",\n  \"id\": \"6b97bae8-5d34-c1c8-6373-25234a7b2678\",\n  \"name\": \"Ut pariatur do commodo\",\n  \"sessionType\": \"Automation\",\n  \"state\": \"Starting\",\n  \"usn\": -68197960,\n  \"endTime\": \"1998-06-07T18:50:39.738Z\",\n  \"progressPercent\": -52750286,\n  \"result\": {\n    \"result\": \"None\",\n    \"message\": \"deserunt commodo eu\",\n    \"isCanceled\": true\n  },\n  \"resourceId\": \"af28d036-9436-ab07-5749-6bc82423562b\",\n  \"resourceReference\": \"Ut\",\n  \"parentSessionId\": \"urn:uuid:017adbc7-e2d7-b332-dd71-9fa6701d99bb\"\n}"
												},
												{
													"name": "Bad request. This error is related to POST/PUT requests. The request body is malformed, incomplete or otherwise invalid.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"credentials\": [\n    {\n      \"tag\": \"dolor ea\",\n      \"type\": \"Linux\",\n      \"username\": \"aute non in\",\n      \"password\": \"elit minim\",\n      \"description\": \"dolore sint anim cillum Excepteur\",\n      \"linuxAdditionalSettings\": {\n        \"SSHPort\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"autoElevated\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"addToSudoers\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"useSu\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"privateKey\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"passphrase\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"rootPassword\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      }\n    },\n    {\n      \"tag\": \"veniam sunt irure\",\n      \"type\": \"Standard\",\n      \"username\": \"elit ad adipisicing\",\n      \"password\": \"est consequat sit\",\n      \"description\": \"aliqua elit dolore\",\n      \"linuxAdditionalSettings\": {\n        \"SSHPort\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"autoElevated\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"addToSudoers\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"useSu\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"privateKey\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"passphrase\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"rootPassword\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      }\n    }\n  ]\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": "{{baseUrl}}/api/v1/automation/credentials/import"
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												},
												{
													"name": "Unauthorized. The authorization header has been expected but not found (or found but is expired).",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"credentials\": [\n    {\n      \"tag\": \"dolor ea\",\n      \"type\": \"Linux\",\n      \"username\": \"aute non in\",\n      \"password\": \"elit minim\",\n      \"description\": \"dolore sint anim cillum Excepteur\",\n      \"linuxAdditionalSettings\": {\n        \"SSHPort\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"autoElevated\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"addToSudoers\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"useSu\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"privateKey\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"passphrase\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"rootPassword\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      }\n    },\n    {\n      \"tag\": \"veniam sunt irure\",\n      \"type\": \"Standard\",\n      \"username\": \"elit ad adipisicing\",\n      \"password\": \"est consequat sit\",\n      \"description\": \"aliqua elit dolore\",\n      \"linuxAdditionalSettings\": {\n        \"SSHPort\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"autoElevated\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"addToSudoers\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"useSu\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"privateKey\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"passphrase\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"rootPassword\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      }\n    }\n  ]\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": "{{baseUrl}}/api/v1/automation/credentials/import"
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												},
												{
													"name": "Forbidden. The user sending the request does not have adequate privileges to access one or more objects specified in the request.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"credentials\": [\n    {\n      \"tag\": \"dolor ea\",\n      \"type\": \"Linux\",\n      \"username\": \"aute non in\",\n      \"password\": \"elit minim\",\n      \"description\": \"dolore sint anim cillum Excepteur\",\n      \"linuxAdditionalSettings\": {\n        \"SSHPort\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"autoElevated\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"addToSudoers\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"useSu\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"privateKey\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"passphrase\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"rootPassword\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      }\n    },\n    {\n      \"tag\": \"veniam sunt irure\",\n      \"type\": \"Standard\",\n      \"username\": \"elit ad adipisicing\",\n      \"password\": \"est consequat sit\",\n      \"description\": \"aliqua elit dolore\",\n      \"linuxAdditionalSettings\": {\n        \"SSHPort\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"autoElevated\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"addToSudoers\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"useSu\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"privateKey\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"passphrase\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"rootPassword\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      }\n    }\n  ]\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": "{{baseUrl}}/api/v1/automation/credentials/import"
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												},
												{
													"name": "Internal server error. The request has been received but could not be completed because of an internal error at the server side.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"credentials\": [\n    {\n      \"tag\": \"dolor ea\",\n      \"type\": \"Linux\",\n      \"username\": \"aute non in\",\n      \"password\": \"elit minim\",\n      \"description\": \"dolore sint anim cillum Excepteur\",\n      \"linuxAdditionalSettings\": {\n        \"SSHPort\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"autoElevated\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"addToSudoers\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"useSu\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"privateKey\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"passphrase\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"rootPassword\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      }\n    },\n    {\n      \"tag\": \"veniam sunt irure\",\n      \"type\": \"Standard\",\n      \"username\": \"elit ad adipisicing\",\n      \"password\": \"est consequat sit\",\n      \"description\": \"aliqua elit dolore\",\n      \"linuxAdditionalSettings\": {\n        \"SSHPort\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"autoElevated\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"addToSudoers\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"useSu\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"privateKey\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"passphrase\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"rootPassword\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      }\n    }\n  ]\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": "{{baseUrl}}/api/v1/automation/credentials/import"
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												}
											]
										},
										{
											"name": "Export Credentials",
											"request": {
												"method": "POST",
												"header": [
													{
														"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
														"key": "x-api-version",
														"value": "1.0-rev1"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"showHiddenCreds\": false,\n  \"ids\": [\n    \"51162b0e-4f67-5f5d-3198-8b976c0035fb\",\n    \"urn:uuid:44a0141a-cb62-2097-8e4a-7040f46ab295\"\n  ],\n  \"types\": [\n    \"Linux\",\n    \"Standard\"\n  ],\n  \"names\": [\n    \"l\",\n    \"dolor deserunt\"\n  ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{baseUrl}}/api/v1/automation/credentials/export",
												"description": "The HTTP POST request to the `/api/v1/automation/credentials/export` path allows you to export credentials from Veeam Backup & Replication."
											},
											"response": [
												{
													"name": "OK",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"showHiddenCreds\": false,\n  \"ids\": [\n    \"aac77cea-0e5e-70d9-1a6e-891337b233ef\",\n    \"urn:uuid:9c93d9f5-5c52-354d-6adc-f7b5cfb1e1a8\"\n  ],\n  \"types\": [\n    \"Standard\",\n    \"Linux\"\n  ],\n  \"names\": [\n    \"sit commodo Duis officia\",\n    \"aute nisi labore\"\n  ]\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": "{{baseUrl}}/api/v1/automation/credentials/export"
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"credentials\": [\n    {\n      \"tag\": \"dolor ea\",\n      \"type\": \"Linux\",\n      \"username\": \"aute non in\",\n      \"password\": \"elit minim\",\n      \"description\": \"dolore sint anim cillum Excepteur\",\n      \"linuxAdditionalSettings\": {\n        \"SSHPort\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"autoElevated\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"addToSudoers\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"useSu\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"privateKey\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"passphrase\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"rootPassword\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      }\n    },\n    {\n      \"tag\": \"veniam sunt irure\",\n      \"type\": \"Standard\",\n      \"username\": \"elit ad adipisicing\",\n      \"password\": \"est consequat sit\",\n      \"description\": \"aliqua elit dolore\",\n      \"linuxAdditionalSettings\": {\n        \"SSHPort\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"autoElevated\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"addToSudoers\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"useSu\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"privateKey\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"passphrase\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"rootPassword\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      }\n    }\n  ]\n}"
												},
												{
													"name": "Bad request. This error is related to POST/PUT requests. The request body is malformed, incomplete or otherwise invalid.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"showHiddenCreds\": false,\n  \"ids\": [\n    \"aac77cea-0e5e-70d9-1a6e-891337b233ef\",\n    \"urn:uuid:9c93d9f5-5c52-354d-6adc-f7b5cfb1e1a8\"\n  ],\n  \"types\": [\n    \"Standard\",\n    \"Linux\"\n  ],\n  \"names\": [\n    \"sit commodo Duis officia\",\n    \"aute nisi labore\"\n  ]\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": "{{baseUrl}}/api/v1/automation/credentials/export"
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												},
												{
													"name": "Unauthorized. The authorization header has been expected but not found (or found but is expired).",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"showHiddenCreds\": false,\n  \"ids\": [\n    \"aac77cea-0e5e-70d9-1a6e-891337b233ef\",\n    \"urn:uuid:9c93d9f5-5c52-354d-6adc-f7b5cfb1e1a8\"\n  ],\n  \"types\": [\n    \"Standard\",\n    \"Linux\"\n  ],\n  \"names\": [\n    \"sit commodo Duis officia\",\n    \"aute nisi labore\"\n  ]\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": "{{baseUrl}}/api/v1/automation/credentials/export"
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												},
												{
													"name": "Forbidden. The user sending the request does not have adequate privileges to access one or more objects specified in the request.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"showHiddenCreds\": false,\n  \"ids\": [\n    \"aac77cea-0e5e-70d9-1a6e-891337b233ef\",\n    \"urn:uuid:9c93d9f5-5c52-354d-6adc-f7b5cfb1e1a8\"\n  ],\n  \"types\": [\n    \"Standard\",\n    \"Linux\"\n  ],\n  \"names\": [\n    \"sit commodo Duis officia\",\n    \"aute nisi labore\"\n  ]\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": "{{baseUrl}}/api/v1/automation/credentials/export"
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												},
												{
													"name": "Internal server error. The request has been received but could not be completed because of an internal error at the server side.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"showHiddenCreds\": false,\n  \"ids\": [\n    \"aac77cea-0e5e-70d9-1a6e-891337b233ef\",\n    \"urn:uuid:9c93d9f5-5c52-354d-6adc-f7b5cfb1e1a8\"\n  ],\n  \"types\": [\n    \"Standard\",\n    \"Linux\"\n  ],\n  \"names\": [\n    \"sit commodo Duis officia\",\n    \"aute nisi labore\"\n  ]\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": "{{baseUrl}}/api/v1/automation/credentials/export"
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												}
											]
										}
									]
								},
								{
									"name": "proxies",
									"item": [
										{
											"name": "Import Proxies",
											"request": {
												"method": "POST",
												"header": [
													{
														"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
														"key": "x-api-version",
														"value": "1.0-rev1"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"proxies\": [\n    {\n      \"description\": \"culpa labore Lorem\",\n      \"server\": {\n        \"hostName\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"hostTag\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"transportMode\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"failoverToNetwork\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"hostToProxyEncryption\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"connectedDatastores\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"maxTaskCount\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"type\": \"ViProxy\"\n    },\n    {\n      \"description\": \"ullamco enim magna\",\n      \"server\": {\n        \"hostName\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"hostTag\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"transportMode\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"failoverToNetwork\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"hostToProxyEncryption\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"connectedDatastores\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"maxTaskCount\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"type\": \"ViProxy\"\n    }\n  ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{baseUrl}}/api/v1/automation/proxies/import",
												"description": "The HTTP POST request to the `/api/v1/automation/proxies/import` path allows you to import backup proxies to Veeam Backup & Replication."
											},
											"response": [
												{
													"name": "Automation session has been created to import the proxies. To check the progress, track the session `state`.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"proxies\": [\n    {\n      \"description\": \"Ut culpa Duis incididunt\",\n      \"server\": {\n        \"hostName\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"hostTag\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"transportMode\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"failoverToNetwork\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"hostToProxyEncryption\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"connectedDatastores\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"maxTaskCount\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"type\": \"ViProxy\"\n    },\n    {\n      \"description\": \"irure eu\",\n      \"server\": {\n        \"hostName\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"hostTag\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"transportMode\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"failoverToNetwork\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"hostToProxyEncryption\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"connectedDatastores\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"maxTaskCount\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"type\": \"ViProxy\"\n    }\n  ]\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": "{{baseUrl}}/api/v1/automation/proxies/import"
													},
													"status": "Created",
													"code": 201,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"activityId\": \"urn:uuid:ff04bc79-41c7-abe9-79b9-32b72d0d8ebe\",\n  \"creationTime\": \"1976-08-31T07:10:18.372Z\",\n  \"id\": \"6b97bae8-5d34-c1c8-6373-25234a7b2678\",\n  \"name\": \"Ut pariatur do commodo\",\n  \"sessionType\": \"Automation\",\n  \"state\": \"Starting\",\n  \"usn\": -68197960,\n  \"endTime\": \"1998-06-07T18:50:39.738Z\",\n  \"progressPercent\": -52750286,\n  \"result\": {\n    \"result\": \"None\",\n    \"message\": \"deserunt commodo eu\",\n    \"isCanceled\": true\n  },\n  \"resourceId\": \"af28d036-9436-ab07-5749-6bc82423562b\",\n  \"resourceReference\": \"Ut\",\n  \"parentSessionId\": \"urn:uuid:017adbc7-e2d7-b332-dd71-9fa6701d99bb\"\n}"
												},
												{
													"name": "Bad request. This error is related to POST/PUT requests. The request body is malformed, incomplete or otherwise invalid.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"proxies\": [\n    {\n      \"description\": \"Ut culpa Duis incididunt\",\n      \"server\": {\n        \"hostName\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"hostTag\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"transportMode\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"failoverToNetwork\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"hostToProxyEncryption\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"connectedDatastores\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"maxTaskCount\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"type\": \"ViProxy\"\n    },\n    {\n      \"description\": \"irure eu\",\n      \"server\": {\n        \"hostName\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"hostTag\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"transportMode\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"failoverToNetwork\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"hostToProxyEncryption\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"connectedDatastores\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"maxTaskCount\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"type\": \"ViProxy\"\n    }\n  ]\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": "{{baseUrl}}/api/v1/automation/proxies/import"
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												},
												{
													"name": "Unauthorized. The authorization header has been expected but not found (or found but is expired).",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"proxies\": [\n    {\n      \"description\": \"Ut culpa Duis incididunt\",\n      \"server\": {\n        \"hostName\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"hostTag\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"transportMode\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"failoverToNetwork\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"hostToProxyEncryption\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"connectedDatastores\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"maxTaskCount\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"type\": \"ViProxy\"\n    },\n    {\n      \"description\": \"irure eu\",\n      \"server\": {\n        \"hostName\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"hostTag\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"transportMode\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"failoverToNetwork\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"hostToProxyEncryption\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"connectedDatastores\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"maxTaskCount\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"type\": \"ViProxy\"\n    }\n  ]\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": "{{baseUrl}}/api/v1/automation/proxies/import"
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												},
												{
													"name": "Forbidden. The user sending the request does not have adequate privileges to access one or more objects specified in the request.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"proxies\": [\n    {\n      \"description\": \"Ut culpa Duis incididunt\",\n      \"server\": {\n        \"hostName\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"hostTag\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"transportMode\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"failoverToNetwork\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"hostToProxyEncryption\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"connectedDatastores\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"maxTaskCount\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"type\": \"ViProxy\"\n    },\n    {\n      \"description\": \"irure eu\",\n      \"server\": {\n        \"hostName\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"hostTag\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"transportMode\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"failoverToNetwork\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"hostToProxyEncryption\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"connectedDatastores\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"maxTaskCount\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"type\": \"ViProxy\"\n    }\n  ]\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": "{{baseUrl}}/api/v1/automation/proxies/import"
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												},
												{
													"name": "Internal server error. The request has been received but could not be completed because of an internal error at the server side.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"proxies\": [\n    {\n      \"description\": \"Ut culpa Duis incididunt\",\n      \"server\": {\n        \"hostName\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"hostTag\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"transportMode\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"failoverToNetwork\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"hostToProxyEncryption\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"connectedDatastores\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"maxTaskCount\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"type\": \"ViProxy\"\n    },\n    {\n      \"description\": \"irure eu\",\n      \"server\": {\n        \"hostName\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"hostTag\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"transportMode\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"failoverToNetwork\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"hostToProxyEncryption\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"connectedDatastores\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"maxTaskCount\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"type\": \"ViProxy\"\n    }\n  ]\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": "{{baseUrl}}/api/v1/automation/proxies/import"
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												}
											]
										},
										{
											"name": "Export Proxies",
											"request": {
												"method": "POST",
												"header": [
													{
														"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
														"key": "x-api-version",
														"value": "1.0-rev1"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"ids\": [\n    \"83887c61-6bbc-0594-f575-e0b4d5544062\",\n    \"b50e68c5-1743-2eba-76d1-128e2c4b9882\"\n  ],\n  \"types\": [\n    \"ViProxy\"\n  ],\n  \"names\": [\n    \"aliquip\",\n    \"non anim eu\"\n  ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{baseUrl}}/api/v1/automation/proxies/export",
												"description": "The HTTP POST request to the `/api/v1/automation/proxies/export` path allows you to export backup proxies from Veeam Backup & Replication."
											},
											"response": [
												{
													"name": "OK",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"ids\": [\n    \"e54633b7-45ea-4480-6a2e-bf9fc1759fd5\",\n    \"urn:uuid:a8869826-22ab-7bc4-53f5-c34f6e5c4914\"\n  ],\n  \"types\": [\n    \"ViProxy\"\n  ],\n  \"names\": [\n    \"veniam adipisicing\",\n    \"tempor ullamco sed\"\n  ]\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": "{{baseUrl}}/api/v1/automation/proxies/export"
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"proxies\": [\n    {\n      \"description\": \"Ut culpa Duis incididunt\",\n      \"server\": {\n        \"hostName\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"hostTag\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"transportMode\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"failoverToNetwork\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"hostToProxyEncryption\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"connectedDatastores\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"maxTaskCount\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"type\": \"ViProxy\"\n    },\n    {\n      \"description\": \"irure eu\",\n      \"server\": {\n        \"hostName\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"hostTag\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"transportMode\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"failoverToNetwork\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"hostToProxyEncryption\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"connectedDatastores\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"maxTaskCount\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"type\": \"ViProxy\"\n    }\n  ]\n}"
												},
												{
													"name": "Bad request. This error is related to POST/PUT requests. The request body is malformed, incomplete or otherwise invalid.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"ids\": [\n    \"e54633b7-45ea-4480-6a2e-bf9fc1759fd5\",\n    \"urn:uuid:a8869826-22ab-7bc4-53f5-c34f6e5c4914\"\n  ],\n  \"types\": [\n    \"ViProxy\"\n  ],\n  \"names\": [\n    \"veniam adipisicing\",\n    \"tempor ullamco sed\"\n  ]\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": "{{baseUrl}}/api/v1/automation/proxies/export"
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												},
												{
													"name": "Unauthorized. The authorization header has been expected but not found (or found but is expired).",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"ids\": [\n    \"e54633b7-45ea-4480-6a2e-bf9fc1759fd5\",\n    \"urn:uuid:a8869826-22ab-7bc4-53f5-c34f6e5c4914\"\n  ],\n  \"types\": [\n    \"ViProxy\"\n  ],\n  \"names\": [\n    \"veniam adipisicing\",\n    \"tempor ullamco sed\"\n  ]\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": "{{baseUrl}}/api/v1/automation/proxies/export"
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												},
												{
													"name": "Forbidden. The user sending the request does not have adequate privileges to access one or more objects specified in the request.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"ids\": [\n    \"e54633b7-45ea-4480-6a2e-bf9fc1759fd5\",\n    \"urn:uuid:a8869826-22ab-7bc4-53f5-c34f6e5c4914\"\n  ],\n  \"types\": [\n    \"ViProxy\"\n  ],\n  \"names\": [\n    \"veniam adipisicing\",\n    \"tempor ullamco sed\"\n  ]\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": "{{baseUrl}}/api/v1/automation/proxies/export"
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												},
												{
													"name": "Internal server error. The request has been received but could not be completed because of an internal error at the server side.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"ids\": [\n    \"e54633b7-45ea-4480-6a2e-bf9fc1759fd5\",\n    \"urn:uuid:a8869826-22ab-7bc4-53f5-c34f6e5c4914\"\n  ],\n  \"types\": [\n    \"ViProxy\"\n  ],\n  \"names\": [\n    \"veniam adipisicing\",\n    \"tempor ullamco sed\"\n  ]\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": "{{baseUrl}}/api/v1/automation/proxies/export"
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												}
											]
										}
									]
								},
								{
									"name": "managed Servers",
									"item": [
										{
											"name": "Import Servers",
											"request": {
												"method": "POST",
												"header": [
													{
														"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
														"key": "x-api-version",
														"value": "1.0-rev1"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"windowsHosts\": [\n    {\n      \"description\": \"officia quis et sit\",\n      \"name\": \"anim consectetur ex\",\n      \"type\": \"ViHost\",\n      \"credentials\": {\n        \"credentialsName\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"credentialsTag\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"networkSettings\": {\n        \"components\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"portRangeStart\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"portRangeEnd\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"serverThisSide\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      }\n    },\n    {\n      \"description\": \"aliquip \",\n      \"name\": \"anim est non in\",\n      \"type\": \"WindowsHost\",\n      \"credentials\": {\n        \"credentialsName\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"credentialsTag\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"networkSettings\": {\n        \"components\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"portRangeStart\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"portRangeEnd\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"serverThisSide\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      }\n    }\n  ],\n  \"linuxHosts\": [\n    {\n      \"credentials\": {\n        \"credentialsName\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"credentialsTag\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"description\": \"occaecat magna do deserunt\",\n      \"name\": \"do Ut dolore mollit\",\n      \"type\": \"WindowsHost\",\n      \"sshFingerprint\": \"reprehe\",\n      \"sshSettings\": {\n        \"sshTimeOutMs\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"portRangeStart\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"portRangeEnd\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"serverThisSide\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"managementPort\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      }\n    },\n    {\n      \"credentials\": {\n        \"credentialsName\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"credentialsTag\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"description\": \"qui ipsum cupidatat dolore\",\n      \"name\": \"pariatur consequat non\",\n      \"type\": \"WindowsHost\",\n      \"sshFingerprint\": \"velit ut enim ullamco ex\",\n      \"sshSettings\": {\n        \"sshTimeOutMs\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"portRangeStart\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"portRangeEnd\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"serverThisSide\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"managementPort\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      }\n    }\n  ],\n  \"viHosts\": [\n    {\n      \"credentials\": {\n        \"credentialsName\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"credentialsTag\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"description\": \"Duis ea proident\",\n      \"name\": \"sit ut reprehenderit\",\n      \"type\": \"ViHost\",\n      \"viHostType\": \"VC\",\n      \"port\": 79006621,\n      \"certificateThumbprint\": \"sunt esse ex\"\n    },\n    {\n      \"credentials\": {\n        \"credentialsName\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"credentialsTag\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"description\": \"commodo exercitation cupidatat do\",\n      \"name\": \"ut et\",\n      \"type\": \"WindowsHost\",\n      \"viHostType\": \"VC\",\n      \"port\": 91493081,\n      \"certificateThumbprint\": \"reprehenderit dolore do irure\"\n    }\n  ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{baseUrl}}/api/v1/automation/managedServers/import",
												"description": "The HTTP POST request to the `/api/v1/automation/managedServers/import` path allows you to import managed servers to Veeam Backup & Replication."
											},
											"response": [
												{
													"name": "Automation session has been created to import the servers. To check the progress, track the session `state`.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"windowsHosts\": [\n    {\n      \"description\": \"culpa dolor quis irure ex\",\n      \"name\": \"culpa occaecat deserunt ipsum\",\n      \"type\": \"ViHost\",\n      \"credentials\": {\n        \"credentialsName\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"credentialsTag\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"networkSettings\": {\n        \"components\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"portRangeStart\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"portRangeEnd\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"serverThisSide\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      }\n    },\n    {\n      \"description\": \"ut voluptate in pariatur aliquip\",\n      \"name\": \"aute\",\n      \"type\": \"WindowsHost\",\n      \"credentials\": {\n        \"credentialsName\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"credentialsTag\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"networkSettings\": {\n        \"components\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"portRangeStart\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"portRangeEnd\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"serverThisSide\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      }\n    }\n  ],\n  \"linuxHosts\": [\n    {\n      \"credentials\": {\n        \"credentialsName\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"credentialsTag\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"description\": \"Excepteur ex quis do voluptate\",\n      \"name\": \"et Lorem eiusmod est\",\n      \"type\": \"ViHost\",\n      \"sshFingerprint\": \"nostrud irure\",\n      \"sshSettings\": {\n        \"sshTimeOutMs\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"portRangeStart\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"portRangeEnd\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"serverThisSide\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"managementPort\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      }\n    },\n    {\n      \"credentials\": {\n        \"credentialsName\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"credentialsTag\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"description\": \"occaecat amet ex anim\",\n      \"name\": \"id dolore\",\n      \"type\": \"ViHost\",\n      \"sshFingerprint\": \"amet tempor\",\n      \"sshSettings\": {\n        \"sshTimeOutMs\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"portRangeStart\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"portRangeEnd\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"serverThisSide\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"managementPort\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      }\n    }\n  ],\n  \"viHosts\": [\n    {\n      \"credentials\": {\n        \"credentialsName\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"credentialsTag\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"description\": \"fugiat in magna\",\n      \"name\": \"irure Lorem eiusmod\",\n      \"type\": \"WindowsHost\",\n      \"viHostType\": \"ESX\",\n      \"port\": 63536647,\n      \"certificateThumbprint\": \"pariatur dolor velit ut\"\n    },\n    {\n      \"credentials\": {\n        \"credentialsName\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"credentialsTag\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"description\": \"non laborum sit\",\n      \"name\": \"ut\",\n      \"type\": \"ViHost\",\n      \"viHostType\": \"ESXi\",\n      \"port\": -2877026,\n      \"certificateThumbprint\": \"velit\"\n    }\n  ]\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": "{{baseUrl}}/api/v1/automation/managedServers/import"
													},
													"status": "Created",
													"code": 201,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"activityId\": \"urn:uuid:ff04bc79-41c7-abe9-79b9-32b72d0d8ebe\",\n  \"creationTime\": \"1976-08-31T07:10:18.372Z\",\n  \"id\": \"6b97bae8-5d34-c1c8-6373-25234a7b2678\",\n  \"name\": \"Ut pariatur do commodo\",\n  \"sessionType\": \"Automation\",\n  \"state\": \"Starting\",\n  \"usn\": -68197960,\n  \"endTime\": \"1998-06-07T18:50:39.738Z\",\n  \"progressPercent\": -52750286,\n  \"result\": {\n    \"result\": \"None\",\n    \"message\": \"deserunt commodo eu\",\n    \"isCanceled\": true\n  },\n  \"resourceId\": \"af28d036-9436-ab07-5749-6bc82423562b\",\n  \"resourceReference\": \"Ut\",\n  \"parentSessionId\": \"urn:uuid:017adbc7-e2d7-b332-dd71-9fa6701d99bb\"\n}"
												},
												{
													"name": "Bad request. This error is related to POST/PUT requests. The request body is malformed, incomplete or otherwise invalid.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"windowsHosts\": [\n    {\n      \"description\": \"culpa dolor quis irure ex\",\n      \"name\": \"culpa occaecat deserunt ipsum\",\n      \"type\": \"ViHost\",\n      \"credentials\": {\n        \"credentialsName\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"credentialsTag\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"networkSettings\": {\n        \"components\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"portRangeStart\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"portRangeEnd\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"serverThisSide\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      }\n    },\n    {\n      \"description\": \"ut voluptate in pariatur aliquip\",\n      \"name\": \"aute\",\n      \"type\": \"WindowsHost\",\n      \"credentials\": {\n        \"credentialsName\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"credentialsTag\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"networkSettings\": {\n        \"components\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"portRangeStart\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"portRangeEnd\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"serverThisSide\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      }\n    }\n  ],\n  \"linuxHosts\": [\n    {\n      \"credentials\": {\n        \"credentialsName\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"credentialsTag\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"description\": \"Excepteur ex quis do voluptate\",\n      \"name\": \"et Lorem eiusmod est\",\n      \"type\": \"ViHost\",\n      \"sshFingerprint\": \"nostrud irure\",\n      \"sshSettings\": {\n        \"sshTimeOutMs\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"portRangeStart\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"portRangeEnd\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"serverThisSide\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"managementPort\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      }\n    },\n    {\n      \"credentials\": {\n        \"credentialsName\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"credentialsTag\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"description\": \"occaecat amet ex anim\",\n      \"name\": \"id dolore\",\n      \"type\": \"ViHost\",\n      \"sshFingerprint\": \"amet tempor\",\n      \"sshSettings\": {\n        \"sshTimeOutMs\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"portRangeStart\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"portRangeEnd\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"serverThisSide\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"managementPort\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      }\n    }\n  ],\n  \"viHosts\": [\n    {\n      \"credentials\": {\n        \"credentialsName\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"credentialsTag\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"description\": \"fugiat in magna\",\n      \"name\": \"irure Lorem eiusmod\",\n      \"type\": \"WindowsHost\",\n      \"viHostType\": \"ESX\",\n      \"port\": 63536647,\n      \"certificateThumbprint\": \"pariatur dolor velit ut\"\n    },\n    {\n      \"credentials\": {\n        \"credentialsName\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"credentialsTag\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"description\": \"non laborum sit\",\n      \"name\": \"ut\",\n      \"type\": \"ViHost\",\n      \"viHostType\": \"ESXi\",\n      \"port\": -2877026,\n      \"certificateThumbprint\": \"velit\"\n    }\n  ]\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": "{{baseUrl}}/api/v1/automation/managedServers/import"
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												},
												{
													"name": "Unauthorized. The authorization header has been expected but not found (or found but is expired).",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"windowsHosts\": [\n    {\n      \"description\": \"culpa dolor quis irure ex\",\n      \"name\": \"culpa occaecat deserunt ipsum\",\n      \"type\": \"ViHost\",\n      \"credentials\": {\n        \"credentialsName\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"credentialsTag\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"networkSettings\": {\n        \"components\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"portRangeStart\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"portRangeEnd\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"serverThisSide\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      }\n    },\n    {\n      \"description\": \"ut voluptate in pariatur aliquip\",\n      \"name\": \"aute\",\n      \"type\": \"WindowsHost\",\n      \"credentials\": {\n        \"credentialsName\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"credentialsTag\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"networkSettings\": {\n        \"components\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"portRangeStart\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"portRangeEnd\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"serverThisSide\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      }\n    }\n  ],\n  \"linuxHosts\": [\n    {\n      \"credentials\": {\n        \"credentialsName\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"credentialsTag\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"description\": \"Excepteur ex quis do voluptate\",\n      \"name\": \"et Lorem eiusmod est\",\n      \"type\": \"ViHost\",\n      \"sshFingerprint\": \"nostrud irure\",\n      \"sshSettings\": {\n        \"sshTimeOutMs\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"portRangeStart\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"portRangeEnd\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"serverThisSide\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"managementPort\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      }\n    },\n    {\n      \"credentials\": {\n        \"credentialsName\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"credentialsTag\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"description\": \"occaecat amet ex anim\",\n      \"name\": \"id dolore\",\n      \"type\": \"ViHost\",\n      \"sshFingerprint\": \"amet tempor\",\n      \"sshSettings\": {\n        \"sshTimeOutMs\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"portRangeStart\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"portRangeEnd\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"serverThisSide\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"managementPort\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      }\n    }\n  ],\n  \"viHosts\": [\n    {\n      \"credentials\": {\n        \"credentialsName\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"credentialsTag\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"description\": \"fugiat in magna\",\n      \"name\": \"irure Lorem eiusmod\",\n      \"type\": \"WindowsHost\",\n      \"viHostType\": \"ESX\",\n      \"port\": 63536647,\n      \"certificateThumbprint\": \"pariatur dolor velit ut\"\n    },\n    {\n      \"credentials\": {\n        \"credentialsName\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"credentialsTag\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"description\": \"non laborum sit\",\n      \"name\": \"ut\",\n      \"type\": \"ViHost\",\n      \"viHostType\": \"ESXi\",\n      \"port\": -2877026,\n      \"certificateThumbprint\": \"velit\"\n    }\n  ]\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": "{{baseUrl}}/api/v1/automation/managedServers/import"
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												},
												{
													"name": "Forbidden. The user sending the request does not have adequate privileges to access one or more objects specified in the request.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"windowsHosts\": [\n    {\n      \"description\": \"culpa dolor quis irure ex\",\n      \"name\": \"culpa occaecat deserunt ipsum\",\n      \"type\": \"ViHost\",\n      \"credentials\": {\n        \"credentialsName\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"credentialsTag\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"networkSettings\": {\n        \"components\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"portRangeStart\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"portRangeEnd\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"serverThisSide\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      }\n    },\n    {\n      \"description\": \"ut voluptate in pariatur aliquip\",\n      \"name\": \"aute\",\n      \"type\": \"WindowsHost\",\n      \"credentials\": {\n        \"credentialsName\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"credentialsTag\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"networkSettings\": {\n        \"components\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"portRangeStart\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"portRangeEnd\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"serverThisSide\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      }\n    }\n  ],\n  \"linuxHosts\": [\n    {\n      \"credentials\": {\n        \"credentialsName\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"credentialsTag\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"description\": \"Excepteur ex quis do voluptate\",\n      \"name\": \"et Lorem eiusmod est\",\n      \"type\": \"ViHost\",\n      \"sshFingerprint\": \"nostrud irure\",\n      \"sshSettings\": {\n        \"sshTimeOutMs\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"portRangeStart\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"portRangeEnd\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"serverThisSide\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"managementPort\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      }\n    },\n    {\n      \"credentials\": {\n        \"credentialsName\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"credentialsTag\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"description\": \"occaecat amet ex anim\",\n      \"name\": \"id dolore\",\n      \"type\": \"ViHost\",\n      \"sshFingerprint\": \"amet tempor\",\n      \"sshSettings\": {\n        \"sshTimeOutMs\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"portRangeStart\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"portRangeEnd\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"serverThisSide\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"managementPort\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      }\n    }\n  ],\n  \"viHosts\": [\n    {\n      \"credentials\": {\n        \"credentialsName\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"credentialsTag\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"description\": \"fugiat in magna\",\n      \"name\": \"irure Lorem eiusmod\",\n      \"type\": \"WindowsHost\",\n      \"viHostType\": \"ESX\",\n      \"port\": 63536647,\n      \"certificateThumbprint\": \"pariatur dolor velit ut\"\n    },\n    {\n      \"credentials\": {\n        \"credentialsName\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"credentialsTag\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"description\": \"non laborum sit\",\n      \"name\": \"ut\",\n      \"type\": \"ViHost\",\n      \"viHostType\": \"ESXi\",\n      \"port\": -2877026,\n      \"certificateThumbprint\": \"velit\"\n    }\n  ]\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": "{{baseUrl}}/api/v1/automation/managedServers/import"
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												},
												{
													"name": "Internal server error. The request has been received but could not be completed because of an internal error at the server side.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"windowsHosts\": [\n    {\n      \"description\": \"culpa dolor quis irure ex\",\n      \"name\": \"culpa occaecat deserunt ipsum\",\n      \"type\": \"ViHost\",\n      \"credentials\": {\n        \"credentialsName\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"credentialsTag\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"networkSettings\": {\n        \"components\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"portRangeStart\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"portRangeEnd\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"serverThisSide\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      }\n    },\n    {\n      \"description\": \"ut voluptate in pariatur aliquip\",\n      \"name\": \"aute\",\n      \"type\": \"WindowsHost\",\n      \"credentials\": {\n        \"credentialsName\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"credentialsTag\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"networkSettings\": {\n        \"components\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"portRangeStart\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"portRangeEnd\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"serverThisSide\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      }\n    }\n  ],\n  \"linuxHosts\": [\n    {\n      \"credentials\": {\n        \"credentialsName\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"credentialsTag\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"description\": \"Excepteur ex quis do voluptate\",\n      \"name\": \"et Lorem eiusmod est\",\n      \"type\": \"ViHost\",\n      \"sshFingerprint\": \"nostrud irure\",\n      \"sshSettings\": {\n        \"sshTimeOutMs\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"portRangeStart\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"portRangeEnd\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"serverThisSide\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"managementPort\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      }\n    },\n    {\n      \"credentials\": {\n        \"credentialsName\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"credentialsTag\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"description\": \"occaecat amet ex anim\",\n      \"name\": \"id dolore\",\n      \"type\": \"ViHost\",\n      \"sshFingerprint\": \"amet tempor\",\n      \"sshSettings\": {\n        \"sshTimeOutMs\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"portRangeStart\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"portRangeEnd\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"serverThisSide\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"managementPort\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      }\n    }\n  ],\n  \"viHosts\": [\n    {\n      \"credentials\": {\n        \"credentialsName\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"credentialsTag\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"description\": \"fugiat in magna\",\n      \"name\": \"irure Lorem eiusmod\",\n      \"type\": \"WindowsHost\",\n      \"viHostType\": \"ESX\",\n      \"port\": 63536647,\n      \"certificateThumbprint\": \"pariatur dolor velit ut\"\n    },\n    {\n      \"credentials\": {\n        \"credentialsName\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"credentialsTag\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"description\": \"non laborum sit\",\n      \"name\": \"ut\",\n      \"type\": \"ViHost\",\n      \"viHostType\": \"ESXi\",\n      \"port\": -2877026,\n      \"certificateThumbprint\": \"velit\"\n    }\n  ]\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": "{{baseUrl}}/api/v1/automation/managedServers/import"
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												}
											]
										},
										{
											"name": "Export Servers",
											"request": {
												"method": "POST",
												"header": [
													{
														"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
														"key": "x-api-version",
														"value": "1.0-rev1"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"ids\": [\n    \"82ee8340-2df9-6e2d-afae-1a463d3f0d73\",\n    \"76fef6b2-6f5b-2b3f-2caf-dd474f398548\"\n  ],\n  \"types\": [\n    \"ViHost\",\n    \"LinuxHost\"\n  ],\n  \"names\": [\n    \"dolor in Ut\",\n    \"Ut laboris\"\n  ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{baseUrl}}/api/v1/automation/managedServers/export",
												"description": "The HTTP POST request to the `/api/v1/automation/managedServers/export` path allows you to export managed servers from Veeam Backup & Replication."
											},
											"response": [
												{
													"name": "OK",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"ids\": [\n    \"urn:uuid:7a62f880-edb7-1223-ccfe-527e01f0f058\",\n    \"9f8f574f-e550-1943-81be-0f9b1caac688\"\n  ],\n  \"types\": [\n    \"WindowsHost\",\n    \"ViHost\"\n  ],\n  \"names\": [\n    \"dolor sed\",\n    \"adipisicing laborum\"\n  ]\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": "{{baseUrl}}/api/v1/automation/managedServers/export"
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"windowsHosts\": [\n    {\n      \"description\": \"culpa dolor quis irure ex\",\n      \"name\": \"culpa occaecat deserunt ipsum\",\n      \"type\": \"ViHost\",\n      \"credentials\": {\n        \"credentialsName\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"credentialsTag\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"networkSettings\": {\n        \"components\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"portRangeStart\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"portRangeEnd\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"serverThisSide\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      }\n    },\n    {\n      \"description\": \"ut voluptate in pariatur aliquip\",\n      \"name\": \"aute\",\n      \"type\": \"WindowsHost\",\n      \"credentials\": {\n        \"credentialsName\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"credentialsTag\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"networkSettings\": {\n        \"components\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"portRangeStart\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"portRangeEnd\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"serverThisSide\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      }\n    }\n  ],\n  \"linuxHosts\": [\n    {\n      \"credentials\": {\n        \"credentialsName\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"credentialsTag\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"description\": \"Excepteur ex quis do voluptate\",\n      \"name\": \"et Lorem eiusmod est\",\n      \"type\": \"ViHost\",\n      \"sshFingerprint\": \"nostrud irure\",\n      \"sshSettings\": {\n        \"sshTimeOutMs\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"portRangeStart\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"portRangeEnd\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"serverThisSide\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"managementPort\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      }\n    },\n    {\n      \"credentials\": {\n        \"credentialsName\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"credentialsTag\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"description\": \"occaecat amet ex anim\",\n      \"name\": \"id dolore\",\n      \"type\": \"ViHost\",\n      \"sshFingerprint\": \"amet tempor\",\n      \"sshSettings\": {\n        \"sshTimeOutMs\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"portRangeStart\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"portRangeEnd\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"serverThisSide\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"managementPort\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      }\n    }\n  ],\n  \"viHosts\": [\n    {\n      \"credentials\": {\n        \"credentialsName\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"credentialsTag\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"description\": \"fugiat in magna\",\n      \"name\": \"irure Lorem eiusmod\",\n      \"type\": \"WindowsHost\",\n      \"viHostType\": \"ESX\",\n      \"port\": 63536647,\n      \"certificateThumbprint\": \"pariatur dolor velit ut\"\n    },\n    {\n      \"credentials\": {\n        \"credentialsName\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"credentialsTag\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"description\": \"non laborum sit\",\n      \"name\": \"ut\",\n      \"type\": \"ViHost\",\n      \"viHostType\": \"ESXi\",\n      \"port\": -2877026,\n      \"certificateThumbprint\": \"velit\"\n    }\n  ]\n}"
												},
												{
													"name": "Bad request. This error is related to POST/PUT requests. The request body is malformed, incomplete or otherwise invalid.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"ids\": [\n    \"urn:uuid:7a62f880-edb7-1223-ccfe-527e01f0f058\",\n    \"9f8f574f-e550-1943-81be-0f9b1caac688\"\n  ],\n  \"types\": [\n    \"WindowsHost\",\n    \"ViHost\"\n  ],\n  \"names\": [\n    \"dolor sed\",\n    \"adipisicing laborum\"\n  ]\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": "{{baseUrl}}/api/v1/automation/managedServers/export"
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												},
												{
													"name": "Unauthorized. The authorization header has been expected but not found (or found but is expired).",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"ids\": [\n    \"urn:uuid:7a62f880-edb7-1223-ccfe-527e01f0f058\",\n    \"9f8f574f-e550-1943-81be-0f9b1caac688\"\n  ],\n  \"types\": [\n    \"WindowsHost\",\n    \"ViHost\"\n  ],\n  \"names\": [\n    \"dolor sed\",\n    \"adipisicing laborum\"\n  ]\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": "{{baseUrl}}/api/v1/automation/managedServers/export"
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												},
												{
													"name": "Forbidden. The user sending the request does not have adequate privileges to access one or more objects specified in the request.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"ids\": [\n    \"urn:uuid:7a62f880-edb7-1223-ccfe-527e01f0f058\",\n    \"9f8f574f-e550-1943-81be-0f9b1caac688\"\n  ],\n  \"types\": [\n    \"WindowsHost\",\n    \"ViHost\"\n  ],\n  \"names\": [\n    \"dolor sed\",\n    \"adipisicing laborum\"\n  ]\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": "{{baseUrl}}/api/v1/automation/managedServers/export"
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												},
												{
													"name": "Internal server error. The request has been received but could not be completed because of an internal error at the server side.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"ids\": [\n    \"urn:uuid:7a62f880-edb7-1223-ccfe-527e01f0f058\",\n    \"9f8f574f-e550-1943-81be-0f9b1caac688\"\n  ],\n  \"types\": [\n    \"WindowsHost\",\n    \"ViHost\"\n  ],\n  \"names\": [\n    \"dolor sed\",\n    \"adipisicing laborum\"\n  ]\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": "{{baseUrl}}/api/v1/automation/managedServers/export"
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												}
											]
										}
									]
								},
								{
									"name": "repositories",
									"item": [
										{
											"name": "Import Repositories",
											"request": {
												"method": "POST",
												"header": [
													{
														"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
														"key": "x-api-version",
														"value": "1.0-rev1"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"WindowsLocalRepositories\": [\n    {\n      \"description\": \"elit dolore do cillum\",\n      \"hostName\": \"nulla Ut in\",\n      \"mountServer\": {\n        \"mountServerName\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"vPowerNFSEnabled\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"writeCacheFolder\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"vPowerNFSPortSettings\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"name\": \"laboris eiusmod eu\",\n      \"repository\": {\n        \"path\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"maxTaskCount\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"readWriteRate\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"advancedSettings\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"tag\": \"eiusmod laboris incididun\",\n      \"type\": \"GoogleCloud\",\n      \"kind\": \"officia sit\"\n    },\n    {\n      \"description\": \"aute conse\",\n      \"hostName\": \"consectetur in n\",\n      \"mountServer\": {\n        \"mountServerName\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"vPowerNFSEnabled\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"writeCacheFolder\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"vPowerNFSPortSettings\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"name\": \"sunt esse ut\",\n      \"repository\": {\n        \"path\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"maxTaskCount\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"readWriteRate\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"advancedSettings\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"tag\": \"sint sed reprehenderit\",\n      \"type\": \"AzureBlob\",\n      \"kind\": 71292266.51420787\n    }\n  ],\n  \"LinuxLocalRepositories\": [\n    {\n      \"description\": \"nostrud magna aliquip\",\n      \"hostName\": \"tempor sunt\",\n      \"mountServer\": {\n        \"mountServerName\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"vPowerNFSEnabled\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"writeCacheFolder\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"vPowerNFSPortSettings\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"name\": \"elit proident\",\n      \"repository\": {\n        \"path\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"maxTaskCount\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"readWriteRate\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"useFastCloningOnXFSVolumes\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"useImmutableBackups\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"makeRecentBackupsImmutableDays\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"advancedSettings\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"tag\": \"consequat nisi aute veniam\",\n      \"type\": \"AzureArchive\",\n      \"kind\": \"deserunt Duis veniam Excepteur\"\n    },\n    {\n      \"description\": \"id nulla velit sed\",\n      \"hostName\": \"Ut id\",\n      \"mountServer\": {\n        \"mountServerName\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"vPowerNFSEnabled\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"writeCacheFolder\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"vPowerNFSPortSettings\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"name\": \"ea cillum occaecat adipisicing\",\n      \"repository\": {\n        \"path\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"maxTaskCount\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"readWriteRate\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"useFastCloningOnXFSVolumes\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"useImmutableBackups\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"makeRecentBackupsImmutableDays\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"advancedSettings\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"tag\": \"nostrud exerc\",\n      \"type\": \"LinuxLocal\",\n      \"kind\": 15230045\n    }\n  ],\n  \"SmbRepositories\": [\n    {\n      \"description\": \"enim\",\n      \"mountServer\": {\n        \"mountServerName\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"vPowerNFSEnabled\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"writeCacheFolder\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"vPowerNFSPortSettings\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"name\": \"qui sed\",\n      \"repository\": {\n        \"maxTaskCount\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"readWriteRate\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"advancedSettings\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"share\": {\n        \"credentials\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"sharePath\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"gatewayServer\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"tag\": \"nisi\",\n      \"type\": \"WinLocal\",\n      \"kind\": -92997670\n    },\n    {\n      \"description\": \"eiusmod ea minim eu\",\n      \"mountServer\": {\n        \"mountServerName\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"vPowerNFSEnabled\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"writeCacheFolder\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"vPowerNFSPortSettings\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"name\": \"in quis aute aliquip\",\n      \"repository\": {\n        \"maxTaskCount\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"readWriteRate\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"advancedSettings\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"share\": {\n        \"credentials\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"sharePath\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"gatewayServer\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"tag\": \"velit laboris non quis\",\n      \"type\": \"LinuxLocal\",\n      \"kind\": \"do occaecat nostrud\"\n    }\n  ],\n  \"NfsRepositories\": [\n    {\n      \"description\": \"adipisicing nulla aute\",\n      \"mountServer\": {\n        \"mountServerName\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"vPowerNFSEnabled\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"writeCacheFolder\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"vPowerNFSPortSettings\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"name\": \"dolor\",\n      \"repository\": {\n        \"maxTaskCount\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"readWriteRate\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"advancedSettings\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"share\": {\n        \"sharePath\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"gatewayServer\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"tag\": \"cillum amet\",\n      \"type\": \"GoogleCloud\",\n      \"kind\": 43525627\n    },\n    {\n      \"description\": \"elit Lorem occaecat ad laborum\",\n      \"mountServer\": {\n        \"mountServerName\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"vPowerNFSEnabled\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"writeCacheFolder\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"vPowerNFSPortSettings\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"name\": \"ipsum\",\n      \"repository\": {\n        \"maxTaskCount\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"readWriteRate\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"advancedSettings\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"share\": {\n        \"sharePath\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"gatewayServer\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"tag\": \"qui ex\",\n      \"type\": \"AzureArchive\",\n      \"kind\": false\n    }\n  ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{baseUrl}}/api/v1/automation/repositories/import",
												"description": "The HTTP POST request to the `/api/v1/automation/repositories/import` path allows you to import backup repositories to Veeam Backup & Replication."
											},
											"response": [
												{
													"name": "Automation session has been created to import the repositories. To check the progress, track the session `state`.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"WindowsLocalRepositories\": [\n    {\n      \"description\": \"mollit ipsum\",\n      \"hostName\": \"elit consectetur aliqua\",\n      \"mountServer\": {\n        \"mountServerName\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"vPowerNFSEnabled\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"writeCacheFolder\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"vPowerNFSPortSettings\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"name\": \"laboris occaecat\",\n      \"repository\": {\n        \"path\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"maxTaskCount\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"readWriteRate\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"advancedSettings\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"tag\": \"cupidatat Duis aliquip\",\n      \"type\": \"AmazonS3Glacier\",\n      \"kind\": 10929540\n    },\n    {\n      \"description\": \"commodo Duis consectetur id magna\",\n      \"hostName\": \"aliquip do irure\",\n      \"mountServer\": {\n        \"mountServerName\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"vPowerNFSEnabled\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"writeCacheFolder\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"vPowerNFSPortSettings\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"name\": \"nisi\",\n      \"repository\": {\n        \"path\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"maxTaskCount\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"readWriteRate\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"advancedSettings\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"tag\": \"eu et pariatur labore\",\n      \"type\": \"AmazonS3\",\n      \"kind\": 48838309.026598334\n    }\n  ],\n  \"LinuxLocalRepositories\": [\n    {\n      \"description\": \"Excepteur eiusmod enim consequat\",\n      \"hostName\": \"in\",\n      \"mountServer\": {\n        \"mountServerName\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"vPowerNFSEnabled\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"writeCacheFolder\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"vPowerNFSPortSettings\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"name\": \"Ut nostrud\",\n      \"repository\": {\n        \"path\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"maxTaskCount\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"readWriteRate\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"useFastCloningOnXFSVolumes\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"useImmutableBackups\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"makeRecentBackupsImmutableDays\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"advancedSettings\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"tag\": \"minim aute\",\n      \"type\": \"LinuxLocal\",\n      \"kind\": -94213052\n    },\n    {\n      \"description\": \"dolor cupidatat Ut\",\n      \"hostName\": \"ut\",\n      \"mountServer\": {\n        \"mountServerName\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"vPowerNFSEnabled\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"writeCacheFolder\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"vPowerNFSPortSettings\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"name\": \"tempor commodo dolore aliqua dolor\",\n      \"repository\": {\n        \"path\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"maxTaskCount\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"readWriteRate\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"useFastCloningOnXFSVolumes\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"useImmutableBackups\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"makeRecentBackupsImmutableDays\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"advancedSettings\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"tag\": \"non ad ullamco aute\",\n      \"type\": \"AmazonS3Glacier\",\n      \"kind\": true\n    }\n  ],\n  \"SmbRepositories\": [\n    {\n      \"description\": \"esse nulla Duis\",\n      \"mountServer\": {\n        \"mountServerName\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"vPowerNFSEnabled\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"writeCacheFolder\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"vPowerNFSPortSettings\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"name\": \"elit commodo sit sed consequat\",\n      \"repository\": {\n        \"maxTaskCount\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"readWriteRate\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"advancedSettings\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"share\": {\n        \"credentials\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"sharePath\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"gatewayServer\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"tag\": \"tempor incididunt\",\n      \"type\": \"WinLocal\",\n      \"kind\": 34611225\n    },\n    {\n      \"description\": \"labore reprehenderit dolor\",\n      \"mountServer\": {\n        \"mountServerName\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"vPowerNFSEnabled\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"writeCacheFolder\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"vPowerNFSPortSettings\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"name\": \"ullamco enim Excepteur\",\n      \"repository\": {\n        \"maxTaskCount\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"readWriteRate\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"advancedSettings\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"share\": {\n        \"credentials\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"sharePath\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"gatewayServer\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"tag\": \"ullamco reprehenderit\",\n      \"type\": \"Smb\",\n      \"kind\": false\n    }\n  ],\n  \"NfsRepositories\": [\n    {\n      \"description\": \"ullamco dolor consectetur\",\n      \"mountServer\": {\n        \"mountServerName\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"vPowerNFSEnabled\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"writeCacheFolder\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"vPowerNFSPortSettings\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"name\": \"laboris ipsum consectetu\",\n      \"repository\": {\n        \"maxTaskCount\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"readWriteRate\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"advancedSettings\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"share\": {\n        \"sharePath\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"gatewayServer\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"tag\": \"exercitation sit non ipsum\",\n      \"type\": \"IBMCloud\",\n      \"kind\": -61015352.765295774\n    },\n    {\n      \"description\": \"aliqua ea co\",\n      \"mountServer\": {\n        \"mountServerName\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"vPowerNFSEnabled\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"writeCacheFolder\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"vPowerNFSPortSettings\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"name\": \"dolore laboris\",\n      \"repository\": {\n        \"maxTaskCount\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"readWriteRate\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"advancedSettings\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"share\": {\n        \"sharePath\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"gatewayServer\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"tag\": \"veniam ullamco aliqua occaecat\",\n      \"type\": \"Smb\",\n      \"kind\": 47904439\n    }\n  ]\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": "{{baseUrl}}/api/v1/automation/repositories/import"
													},
													"status": "Created",
													"code": 201,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"activityId\": \"urn:uuid:ff04bc79-41c7-abe9-79b9-32b72d0d8ebe\",\n  \"creationTime\": \"1976-08-31T07:10:18.372Z\",\n  \"id\": \"6b97bae8-5d34-c1c8-6373-25234a7b2678\",\n  \"name\": \"Ut pariatur do commodo\",\n  \"sessionType\": \"Automation\",\n  \"state\": \"Starting\",\n  \"usn\": -68197960,\n  \"endTime\": \"1998-06-07T18:50:39.738Z\",\n  \"progressPercent\": -52750286,\n  \"result\": {\n    \"result\": \"None\",\n    \"message\": \"deserunt commodo eu\",\n    \"isCanceled\": true\n  },\n  \"resourceId\": \"af28d036-9436-ab07-5749-6bc82423562b\",\n  \"resourceReference\": \"Ut\",\n  \"parentSessionId\": \"urn:uuid:017adbc7-e2d7-b332-dd71-9fa6701d99bb\"\n}"
												},
												{
													"name": "Bad request. This error is related to POST/PUT requests. The request body is malformed, incomplete or otherwise invalid.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"WindowsLocalRepositories\": [\n    {\n      \"description\": \"mollit ipsum\",\n      \"hostName\": \"elit consectetur aliqua\",\n      \"mountServer\": {\n        \"mountServerName\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"vPowerNFSEnabled\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"writeCacheFolder\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"vPowerNFSPortSettings\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"name\": \"laboris occaecat\",\n      \"repository\": {\n        \"path\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"maxTaskCount\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"readWriteRate\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"advancedSettings\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"tag\": \"cupidatat Duis aliquip\",\n      \"type\": \"AmazonS3Glacier\",\n      \"kind\": 10929540\n    },\n    {\n      \"description\": \"commodo Duis consectetur id magna\",\n      \"hostName\": \"aliquip do irure\",\n      \"mountServer\": {\n        \"mountServerName\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"vPowerNFSEnabled\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"writeCacheFolder\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"vPowerNFSPortSettings\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"name\": \"nisi\",\n      \"repository\": {\n        \"path\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"maxTaskCount\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"readWriteRate\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"advancedSettings\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"tag\": \"eu et pariatur labore\",\n      \"type\": \"AmazonS3\",\n      \"kind\": 48838309.026598334\n    }\n  ],\n  \"LinuxLocalRepositories\": [\n    {\n      \"description\": \"Excepteur eiusmod enim consequat\",\n      \"hostName\": \"in\",\n      \"mountServer\": {\n        \"mountServerName\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"vPowerNFSEnabled\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"writeCacheFolder\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"vPowerNFSPortSettings\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"name\": \"Ut nostrud\",\n      \"repository\": {\n        \"path\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"maxTaskCount\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"readWriteRate\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"useFastCloningOnXFSVolumes\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"useImmutableBackups\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"makeRecentBackupsImmutableDays\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"advancedSettings\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"tag\": \"minim aute\",\n      \"type\": \"LinuxLocal\",\n      \"kind\": -94213052\n    },\n    {\n      \"description\": \"dolor cupidatat Ut\",\n      \"hostName\": \"ut\",\n      \"mountServer\": {\n        \"mountServerName\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"vPowerNFSEnabled\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"writeCacheFolder\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"vPowerNFSPortSettings\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"name\": \"tempor commodo dolore aliqua dolor\",\n      \"repository\": {\n        \"path\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"maxTaskCount\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"readWriteRate\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"useFastCloningOnXFSVolumes\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"useImmutableBackups\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"makeRecentBackupsImmutableDays\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"advancedSettings\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"tag\": \"non ad ullamco aute\",\n      \"type\": \"AmazonS3Glacier\",\n      \"kind\": true\n    }\n  ],\n  \"SmbRepositories\": [\n    {\n      \"description\": \"esse nulla Duis\",\n      \"mountServer\": {\n        \"mountServerName\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"vPowerNFSEnabled\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"writeCacheFolder\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"vPowerNFSPortSettings\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"name\": \"elit commodo sit sed consequat\",\n      \"repository\": {\n        \"maxTaskCount\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"readWriteRate\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"advancedSettings\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"share\": {\n        \"credentials\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"sharePath\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"gatewayServer\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"tag\": \"tempor incididunt\",\n      \"type\": \"WinLocal\",\n      \"kind\": 34611225\n    },\n    {\n      \"description\": \"labore reprehenderit dolor\",\n      \"mountServer\": {\n        \"mountServerName\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"vPowerNFSEnabled\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"writeCacheFolder\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"vPowerNFSPortSettings\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"name\": \"ullamco enim Excepteur\",\n      \"repository\": {\n        \"maxTaskCount\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"readWriteRate\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"advancedSettings\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"share\": {\n        \"credentials\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"sharePath\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"gatewayServer\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"tag\": \"ullamco reprehenderit\",\n      \"type\": \"Smb\",\n      \"kind\": false\n    }\n  ],\n  \"NfsRepositories\": [\n    {\n      \"description\": \"ullamco dolor consectetur\",\n      \"mountServer\": {\n        \"mountServerName\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"vPowerNFSEnabled\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"writeCacheFolder\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"vPowerNFSPortSettings\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"name\": \"laboris ipsum consectetu\",\n      \"repository\": {\n        \"maxTaskCount\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"readWriteRate\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"advancedSettings\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"share\": {\n        \"sharePath\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"gatewayServer\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"tag\": \"exercitation sit non ipsum\",\n      \"type\": \"IBMCloud\",\n      \"kind\": -61015352.765295774\n    },\n    {\n      \"description\": \"aliqua ea co\",\n      \"mountServer\": {\n        \"mountServerName\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"vPowerNFSEnabled\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"writeCacheFolder\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"vPowerNFSPortSettings\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"name\": \"dolore laboris\",\n      \"repository\": {\n        \"maxTaskCount\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"readWriteRate\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"advancedSettings\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"share\": {\n        \"sharePath\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"gatewayServer\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"tag\": \"veniam ullamco aliqua occaecat\",\n      \"type\": \"Smb\",\n      \"kind\": 47904439\n    }\n  ]\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": "{{baseUrl}}/api/v1/automation/repositories/import"
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												},
												{
													"name": "Unauthorized. The authorization header has been expected but not found (or found but is expired).",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"WindowsLocalRepositories\": [\n    {\n      \"description\": \"mollit ipsum\",\n      \"hostName\": \"elit consectetur aliqua\",\n      \"mountServer\": {\n        \"mountServerName\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"vPowerNFSEnabled\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"writeCacheFolder\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"vPowerNFSPortSettings\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"name\": \"laboris occaecat\",\n      \"repository\": {\n        \"path\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"maxTaskCount\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"readWriteRate\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"advancedSettings\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"tag\": \"cupidatat Duis aliquip\",\n      \"type\": \"AmazonS3Glacier\",\n      \"kind\": 10929540\n    },\n    {\n      \"description\": \"commodo Duis consectetur id magna\",\n      \"hostName\": \"aliquip do irure\",\n      \"mountServer\": {\n        \"mountServerName\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"vPowerNFSEnabled\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"writeCacheFolder\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"vPowerNFSPortSettings\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"name\": \"nisi\",\n      \"repository\": {\n        \"path\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"maxTaskCount\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"readWriteRate\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"advancedSettings\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"tag\": \"eu et pariatur labore\",\n      \"type\": \"AmazonS3\",\n      \"kind\": 48838309.026598334\n    }\n  ],\n  \"LinuxLocalRepositories\": [\n    {\n      \"description\": \"Excepteur eiusmod enim consequat\",\n      \"hostName\": \"in\",\n      \"mountServer\": {\n        \"mountServerName\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"vPowerNFSEnabled\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"writeCacheFolder\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"vPowerNFSPortSettings\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"name\": \"Ut nostrud\",\n      \"repository\": {\n        \"path\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"maxTaskCount\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"readWriteRate\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"useFastCloningOnXFSVolumes\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"useImmutableBackups\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"makeRecentBackupsImmutableDays\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"advancedSettings\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"tag\": \"minim aute\",\n      \"type\": \"LinuxLocal\",\n      \"kind\": -94213052\n    },\n    {\n      \"description\": \"dolor cupidatat Ut\",\n      \"hostName\": \"ut\",\n      \"mountServer\": {\n        \"mountServerName\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"vPowerNFSEnabled\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"writeCacheFolder\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"vPowerNFSPortSettings\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"name\": \"tempor commodo dolore aliqua dolor\",\n      \"repository\": {\n        \"path\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"maxTaskCount\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"readWriteRate\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"useFastCloningOnXFSVolumes\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"useImmutableBackups\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"makeRecentBackupsImmutableDays\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"advancedSettings\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"tag\": \"non ad ullamco aute\",\n      \"type\": \"AmazonS3Glacier\",\n      \"kind\": true\n    }\n  ],\n  \"SmbRepositories\": [\n    {\n      \"description\": \"esse nulla Duis\",\n      \"mountServer\": {\n        \"mountServerName\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"vPowerNFSEnabled\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"writeCacheFolder\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"vPowerNFSPortSettings\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"name\": \"elit commodo sit sed consequat\",\n      \"repository\": {\n        \"maxTaskCount\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"readWriteRate\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"advancedSettings\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"share\": {\n        \"credentials\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"sharePath\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"gatewayServer\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"tag\": \"tempor incididunt\",\n      \"type\": \"WinLocal\",\n      \"kind\": 34611225\n    },\n    {\n      \"description\": \"labore reprehenderit dolor\",\n      \"mountServer\": {\n        \"mountServerName\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"vPowerNFSEnabled\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"writeCacheFolder\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"vPowerNFSPortSettings\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"name\": \"ullamco enim Excepteur\",\n      \"repository\": {\n        \"maxTaskCount\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"readWriteRate\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"advancedSettings\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"share\": {\n        \"credentials\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"sharePath\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"gatewayServer\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"tag\": \"ullamco reprehenderit\",\n      \"type\": \"Smb\",\n      \"kind\": false\n    }\n  ],\n  \"NfsRepositories\": [\n    {\n      \"description\": \"ullamco dolor consectetur\",\n      \"mountServer\": {\n        \"mountServerName\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"vPowerNFSEnabled\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"writeCacheFolder\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"vPowerNFSPortSettings\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"name\": \"laboris ipsum consectetu\",\n      \"repository\": {\n        \"maxTaskCount\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"readWriteRate\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"advancedSettings\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"share\": {\n        \"sharePath\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"gatewayServer\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"tag\": \"exercitation sit non ipsum\",\n      \"type\": \"IBMCloud\",\n      \"kind\": -61015352.765295774\n    },\n    {\n      \"description\": \"aliqua ea co\",\n      \"mountServer\": {\n        \"mountServerName\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"vPowerNFSEnabled\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"writeCacheFolder\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"vPowerNFSPortSettings\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"name\": \"dolore laboris\",\n      \"repository\": {\n        \"maxTaskCount\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"readWriteRate\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"advancedSettings\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"share\": {\n        \"sharePath\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"gatewayServer\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"tag\": \"veniam ullamco aliqua occaecat\",\n      \"type\": \"Smb\",\n      \"kind\": 47904439\n    }\n  ]\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": "{{baseUrl}}/api/v1/automation/repositories/import"
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												},
												{
													"name": "Forbidden. The user sending the request does not have adequate privileges to access one or more objects specified in the request.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"WindowsLocalRepositories\": [\n    {\n      \"description\": \"mollit ipsum\",\n      \"hostName\": \"elit consectetur aliqua\",\n      \"mountServer\": {\n        \"mountServerName\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"vPowerNFSEnabled\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"writeCacheFolder\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"vPowerNFSPortSettings\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"name\": \"laboris occaecat\",\n      \"repository\": {\n        \"path\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"maxTaskCount\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"readWriteRate\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"advancedSettings\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"tag\": \"cupidatat Duis aliquip\",\n      \"type\": \"AmazonS3Glacier\",\n      \"kind\": 10929540\n    },\n    {\n      \"description\": \"commodo Duis consectetur id magna\",\n      \"hostName\": \"aliquip do irure\",\n      \"mountServer\": {\n        \"mountServerName\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"vPowerNFSEnabled\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"writeCacheFolder\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"vPowerNFSPortSettings\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"name\": \"nisi\",\n      \"repository\": {\n        \"path\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"maxTaskCount\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"readWriteRate\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"advancedSettings\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"tag\": \"eu et pariatur labore\",\n      \"type\": \"AmazonS3\",\n      \"kind\": 48838309.026598334\n    }\n  ],\n  \"LinuxLocalRepositories\": [\n    {\n      \"description\": \"Excepteur eiusmod enim consequat\",\n      \"hostName\": \"in\",\n      \"mountServer\": {\n        \"mountServerName\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"vPowerNFSEnabled\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"writeCacheFolder\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"vPowerNFSPortSettings\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"name\": \"Ut nostrud\",\n      \"repository\": {\n        \"path\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"maxTaskCount\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"readWriteRate\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"useFastCloningOnXFSVolumes\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"useImmutableBackups\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"makeRecentBackupsImmutableDays\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"advancedSettings\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"tag\": \"minim aute\",\n      \"type\": \"LinuxLocal\",\n      \"kind\": -94213052\n    },\n    {\n      \"description\": \"dolor cupidatat Ut\",\n      \"hostName\": \"ut\",\n      \"mountServer\": {\n        \"mountServerName\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"vPowerNFSEnabled\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"writeCacheFolder\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"vPowerNFSPortSettings\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"name\": \"tempor commodo dolore aliqua dolor\",\n      \"repository\": {\n        \"path\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"maxTaskCount\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"readWriteRate\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"useFastCloningOnXFSVolumes\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"useImmutableBackups\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"makeRecentBackupsImmutableDays\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"advancedSettings\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"tag\": \"non ad ullamco aute\",\n      \"type\": \"AmazonS3Glacier\",\n      \"kind\": true\n    }\n  ],\n  \"SmbRepositories\": [\n    {\n      \"description\": \"esse nulla Duis\",\n      \"mountServer\": {\n        \"mountServerName\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"vPowerNFSEnabled\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"writeCacheFolder\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"vPowerNFSPortSettings\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"name\": \"elit commodo sit sed consequat\",\n      \"repository\": {\n        \"maxTaskCount\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"readWriteRate\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"advancedSettings\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"share\": {\n        \"credentials\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"sharePath\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"gatewayServer\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"tag\": \"tempor incididunt\",\n      \"type\": \"WinLocal\",\n      \"kind\": 34611225\n    },\n    {\n      \"description\": \"labore reprehenderit dolor\",\n      \"mountServer\": {\n        \"mountServerName\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"vPowerNFSEnabled\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"writeCacheFolder\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"vPowerNFSPortSettings\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"name\": \"ullamco enim Excepteur\",\n      \"repository\": {\n        \"maxTaskCount\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"readWriteRate\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"advancedSettings\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"share\": {\n        \"credentials\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"sharePath\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"gatewayServer\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"tag\": \"ullamco reprehenderit\",\n      \"type\": \"Smb\",\n      \"kind\": false\n    }\n  ],\n  \"NfsRepositories\": [\n    {\n      \"description\": \"ullamco dolor consectetur\",\n      \"mountServer\": {\n        \"mountServerName\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"vPowerNFSEnabled\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"writeCacheFolder\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"vPowerNFSPortSettings\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"name\": \"laboris ipsum consectetu\",\n      \"repository\": {\n        \"maxTaskCount\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"readWriteRate\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"advancedSettings\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"share\": {\n        \"sharePath\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"gatewayServer\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"tag\": \"exercitation sit non ipsum\",\n      \"type\": \"IBMCloud\",\n      \"kind\": -61015352.765295774\n    },\n    {\n      \"description\": \"aliqua ea co\",\n      \"mountServer\": {\n        \"mountServerName\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"vPowerNFSEnabled\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"writeCacheFolder\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"vPowerNFSPortSettings\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"name\": \"dolore laboris\",\n      \"repository\": {\n        \"maxTaskCount\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"readWriteRate\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"advancedSettings\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"share\": {\n        \"sharePath\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"gatewayServer\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"tag\": \"veniam ullamco aliqua occaecat\",\n      \"type\": \"Smb\",\n      \"kind\": 47904439\n    }\n  ]\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": "{{baseUrl}}/api/v1/automation/repositories/import"
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												},
												{
													"name": "Internal server error. The request has been received but could not be completed because of an internal error at the server side.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"WindowsLocalRepositories\": [\n    {\n      \"description\": \"mollit ipsum\",\n      \"hostName\": \"elit consectetur aliqua\",\n      \"mountServer\": {\n        \"mountServerName\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"vPowerNFSEnabled\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"writeCacheFolder\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"vPowerNFSPortSettings\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"name\": \"laboris occaecat\",\n      \"repository\": {\n        \"path\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"maxTaskCount\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"readWriteRate\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"advancedSettings\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"tag\": \"cupidatat Duis aliquip\",\n      \"type\": \"AmazonS3Glacier\",\n      \"kind\": 10929540\n    },\n    {\n      \"description\": \"commodo Duis consectetur id magna\",\n      \"hostName\": \"aliquip do irure\",\n      \"mountServer\": {\n        \"mountServerName\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"vPowerNFSEnabled\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"writeCacheFolder\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"vPowerNFSPortSettings\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"name\": \"nisi\",\n      \"repository\": {\n        \"path\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"maxTaskCount\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"readWriteRate\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"advancedSettings\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"tag\": \"eu et pariatur labore\",\n      \"type\": \"AmazonS3\",\n      \"kind\": 48838309.026598334\n    }\n  ],\n  \"LinuxLocalRepositories\": [\n    {\n      \"description\": \"Excepteur eiusmod enim consequat\",\n      \"hostName\": \"in\",\n      \"mountServer\": {\n        \"mountServerName\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"vPowerNFSEnabled\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"writeCacheFolder\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"vPowerNFSPortSettings\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"name\": \"Ut nostrud\",\n      \"repository\": {\n        \"path\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"maxTaskCount\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"readWriteRate\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"useFastCloningOnXFSVolumes\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"useImmutableBackups\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"makeRecentBackupsImmutableDays\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"advancedSettings\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"tag\": \"minim aute\",\n      \"type\": \"LinuxLocal\",\n      \"kind\": -94213052\n    },\n    {\n      \"description\": \"dolor cupidatat Ut\",\n      \"hostName\": \"ut\",\n      \"mountServer\": {\n        \"mountServerName\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"vPowerNFSEnabled\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"writeCacheFolder\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"vPowerNFSPortSettings\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"name\": \"tempor commodo dolore aliqua dolor\",\n      \"repository\": {\n        \"path\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"maxTaskCount\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"readWriteRate\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"useFastCloningOnXFSVolumes\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"useImmutableBackups\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"makeRecentBackupsImmutableDays\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"advancedSettings\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"tag\": \"non ad ullamco aute\",\n      \"type\": \"AmazonS3Glacier\",\n      \"kind\": true\n    }\n  ],\n  \"SmbRepositories\": [\n    {\n      \"description\": \"esse nulla Duis\",\n      \"mountServer\": {\n        \"mountServerName\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"vPowerNFSEnabled\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"writeCacheFolder\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"vPowerNFSPortSettings\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"name\": \"elit commodo sit sed consequat\",\n      \"repository\": {\n        \"maxTaskCount\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"readWriteRate\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"advancedSettings\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"share\": {\n        \"credentials\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"sharePath\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"gatewayServer\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"tag\": \"tempor incididunt\",\n      \"type\": \"WinLocal\",\n      \"kind\": 34611225\n    },\n    {\n      \"description\": \"labore reprehenderit dolor\",\n      \"mountServer\": {\n        \"mountServerName\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"vPowerNFSEnabled\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"writeCacheFolder\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"vPowerNFSPortSettings\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"name\": \"ullamco enim Excepteur\",\n      \"repository\": {\n        \"maxTaskCount\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"readWriteRate\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"advancedSettings\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"share\": {\n        \"credentials\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"sharePath\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"gatewayServer\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"tag\": \"ullamco reprehenderit\",\n      \"type\": \"Smb\",\n      \"kind\": false\n    }\n  ],\n  \"NfsRepositories\": [\n    {\n      \"description\": \"ullamco dolor consectetur\",\n      \"mountServer\": {\n        \"mountServerName\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"vPowerNFSEnabled\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"writeCacheFolder\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"vPowerNFSPortSettings\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"name\": \"laboris ipsum consectetu\",\n      \"repository\": {\n        \"maxTaskCount\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"readWriteRate\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"advancedSettings\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"share\": {\n        \"sharePath\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"gatewayServer\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"tag\": \"exercitation sit non ipsum\",\n      \"type\": \"IBMCloud\",\n      \"kind\": -61015352.765295774\n    },\n    {\n      \"description\": \"aliqua ea co\",\n      \"mountServer\": {\n        \"mountServerName\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"vPowerNFSEnabled\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"writeCacheFolder\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"vPowerNFSPortSettings\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"name\": \"dolore laboris\",\n      \"repository\": {\n        \"maxTaskCount\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"readWriteRate\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"advancedSettings\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"share\": {\n        \"sharePath\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"gatewayServer\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"tag\": \"veniam ullamco aliqua occaecat\",\n      \"type\": \"Smb\",\n      \"kind\": 47904439\n    }\n  ]\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": "{{baseUrl}}/api/v1/automation/repositories/import"
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												}
											]
										},
										{
											"name": "Export Repositories",
											"request": {
												"method": "POST",
												"header": [
													{
														"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
														"key": "x-api-version",
														"value": "1.0-rev1"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"ids\": [\n    \"urn:uuid:7ee2e876-29e5-f57c-02a9-594737efe56e\",\n    \"11d2c90d-cc4f-acf3-3f71-64b41a87051c\"\n  ],\n  \"types\": [\n    \"AmazonS3\",\n    \"GoogleCloud\"\n  ],\n  \"names\": [\n    \"laborum consectetur cillum do\",\n    \"ullamco et ut pariatur\"\n  ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{baseUrl}}/api/v1/automation/repositories/export",
												"description": "The HTTP POST request to the `/api/v1/automation/repositories/export` path allows you to export backup repositories from Veeam Backup & Replication."
											},
											"response": [
												{
													"name": "OK",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"ids\": [\n    \"eafbe3f3-9f99-3532-8804-f577a5691a73\",\n    \"urn:uuid:2f96680d-981a-21a9-60bb-53abe79894f0\"\n  ],\n  \"types\": [\n    \"LinuxLocal\",\n    \"Smb\"\n  ],\n  \"names\": [\n    \"ullamco cillum\",\n    \"laboris laborum reprehenderit incididunt\"\n  ]\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": "{{baseUrl}}/api/v1/automation/repositories/export"
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"WindowsLocalRepositories\": [\n    {\n      \"description\": \"mollit ipsum\",\n      \"hostName\": \"elit consectetur aliqua\",\n      \"mountServer\": {\n        \"mountServerName\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"vPowerNFSEnabled\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"writeCacheFolder\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"vPowerNFSPortSettings\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"name\": \"laboris occaecat\",\n      \"repository\": {\n        \"path\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"maxTaskCount\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"readWriteRate\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"advancedSettings\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"tag\": \"cupidatat Duis aliquip\",\n      \"type\": \"AmazonS3Glacier\",\n      \"kind\": 10929540\n    },\n    {\n      \"description\": \"commodo Duis consectetur id magna\",\n      \"hostName\": \"aliquip do irure\",\n      \"mountServer\": {\n        \"mountServerName\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"vPowerNFSEnabled\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"writeCacheFolder\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"vPowerNFSPortSettings\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"name\": \"nisi\",\n      \"repository\": {\n        \"path\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"maxTaskCount\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"readWriteRate\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"advancedSettings\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"tag\": \"eu et pariatur labore\",\n      \"type\": \"AmazonS3\",\n      \"kind\": 48838309.026598334\n    }\n  ],\n  \"LinuxLocalRepositories\": [\n    {\n      \"description\": \"Excepteur eiusmod enim consequat\",\n      \"hostName\": \"in\",\n      \"mountServer\": {\n        \"mountServerName\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"vPowerNFSEnabled\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"writeCacheFolder\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"vPowerNFSPortSettings\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"name\": \"Ut nostrud\",\n      \"repository\": {\n        \"path\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"maxTaskCount\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"readWriteRate\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"useFastCloningOnXFSVolumes\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"useImmutableBackups\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"makeRecentBackupsImmutableDays\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"advancedSettings\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"tag\": \"minim aute\",\n      \"type\": \"LinuxLocal\",\n      \"kind\": -94213052\n    },\n    {\n      \"description\": \"dolor cupidatat Ut\",\n      \"hostName\": \"ut\",\n      \"mountServer\": {\n        \"mountServerName\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"vPowerNFSEnabled\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"writeCacheFolder\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"vPowerNFSPortSettings\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"name\": \"tempor commodo dolore aliqua dolor\",\n      \"repository\": {\n        \"path\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"maxTaskCount\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"readWriteRate\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"useFastCloningOnXFSVolumes\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"useImmutableBackups\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"makeRecentBackupsImmutableDays\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"advancedSettings\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"tag\": \"non ad ullamco aute\",\n      \"type\": \"AmazonS3Glacier\",\n      \"kind\": true\n    }\n  ],\n  \"SmbRepositories\": [\n    {\n      \"description\": \"esse nulla Duis\",\n      \"mountServer\": {\n        \"mountServerName\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"vPowerNFSEnabled\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"writeCacheFolder\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"vPowerNFSPortSettings\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"name\": \"elit commodo sit sed consequat\",\n      \"repository\": {\n        \"maxTaskCount\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"readWriteRate\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"advancedSettings\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"share\": {\n        \"credentials\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"sharePath\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"gatewayServer\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"tag\": \"tempor incididunt\",\n      \"type\": \"WinLocal\",\n      \"kind\": 34611225\n    },\n    {\n      \"description\": \"labore reprehenderit dolor\",\n      \"mountServer\": {\n        \"mountServerName\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"vPowerNFSEnabled\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"writeCacheFolder\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"vPowerNFSPortSettings\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"name\": \"ullamco enim Excepteur\",\n      \"repository\": {\n        \"maxTaskCount\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"readWriteRate\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"advancedSettings\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"share\": {\n        \"credentials\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"sharePath\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"gatewayServer\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"tag\": \"ullamco reprehenderit\",\n      \"type\": \"Smb\",\n      \"kind\": false\n    }\n  ],\n  \"NfsRepositories\": [\n    {\n      \"description\": \"ullamco dolor consectetur\",\n      \"mountServer\": {\n        \"mountServerName\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"vPowerNFSEnabled\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"writeCacheFolder\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"vPowerNFSPortSettings\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"name\": \"laboris ipsum consectetu\",\n      \"repository\": {\n        \"maxTaskCount\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"readWriteRate\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"advancedSettings\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"share\": {\n        \"sharePath\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"gatewayServer\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"tag\": \"exercitation sit non ipsum\",\n      \"type\": \"IBMCloud\",\n      \"kind\": -61015352.765295774\n    },\n    {\n      \"description\": \"aliqua ea co\",\n      \"mountServer\": {\n        \"mountServerName\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"vPowerNFSEnabled\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"writeCacheFolder\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"vPowerNFSPortSettings\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"name\": \"dolore laboris\",\n      \"repository\": {\n        \"maxTaskCount\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"readWriteRate\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"advancedSettings\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"share\": {\n        \"sharePath\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        },\n        \"gatewayServer\": {\n          \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n        }\n      },\n      \"tag\": \"veniam ullamco aliqua occaecat\",\n      \"type\": \"Smb\",\n      \"kind\": 47904439\n    }\n  ]\n}"
												},
												{
													"name": "Bad request. This error is related to POST/PUT requests. The request body is malformed, incomplete or otherwise invalid.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"ids\": [\n    \"eafbe3f3-9f99-3532-8804-f577a5691a73\",\n    \"urn:uuid:2f96680d-981a-21a9-60bb-53abe79894f0\"\n  ],\n  \"types\": [\n    \"LinuxLocal\",\n    \"Smb\"\n  ],\n  \"names\": [\n    \"ullamco cillum\",\n    \"laboris laborum reprehenderit incididunt\"\n  ]\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": "{{baseUrl}}/api/v1/automation/repositories/export"
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												},
												{
													"name": "Unauthorized. The authorization header has been expected but not found (or found but is expired).",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"ids\": [\n    \"eafbe3f3-9f99-3532-8804-f577a5691a73\",\n    \"urn:uuid:2f96680d-981a-21a9-60bb-53abe79894f0\"\n  ],\n  \"types\": [\n    \"LinuxLocal\",\n    \"Smb\"\n  ],\n  \"names\": [\n    \"ullamco cillum\",\n    \"laboris laborum reprehenderit incididunt\"\n  ]\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": "{{baseUrl}}/api/v1/automation/repositories/export"
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												},
												{
													"name": "Forbidden. The user sending the request does not have adequate privileges to access one or more objects specified in the request.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"ids\": [\n    \"eafbe3f3-9f99-3532-8804-f577a5691a73\",\n    \"urn:uuid:2f96680d-981a-21a9-60bb-53abe79894f0\"\n  ],\n  \"types\": [\n    \"LinuxLocal\",\n    \"Smb\"\n  ],\n  \"names\": [\n    \"ullamco cillum\",\n    \"laboris laborum reprehenderit incididunt\"\n  ]\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": "{{baseUrl}}/api/v1/automation/repositories/export"
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												},
												{
													"name": "Internal server error. The request has been received but could not be completed because of an internal error at the server side.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"ids\": [\n    \"eafbe3f3-9f99-3532-8804-f577a5691a73\",\n    \"urn:uuid:2f96680d-981a-21a9-60bb-53abe79894f0\"\n  ],\n  \"types\": [\n    \"LinuxLocal\",\n    \"Smb\"\n  ],\n  \"names\": [\n    \"ullamco cillum\",\n    \"laboris laborum reprehenderit incididunt\"\n  ]\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": "{{baseUrl}}/api/v1/automation/repositories/export"
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												}
											]
										}
									]
								},
								{
									"name": "encryption Passwords",
									"item": [
										{
											"name": "Import Encryption Passwords",
											"request": {
												"method": "POST",
												"header": [
													{
														"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
														"key": "x-api-version",
														"value": "1.0-rev1"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"encryptionPasswords\": [\n    {\n      \"hint\": \"ex Lorem id est tempor\",\n      \"password\": \"ea\",\n      \"tag\": \"fugiat\"\n    },\n    {\n      \"hint\": \"est\",\n      \"password\": \"laboris cillum\",\n      \"tag\": \"do proident reprehenderit\"\n    }\n  ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{baseUrl}}/api/v1/automation/encryptionPasswords/import",
												"description": "The HTTP POST request to the `/api/v1/automation/encryptionPasswords/import` path allows you to import encryption passwords to Veeam Backup & Replication."
											},
											"response": [
												{
													"name": "Automation session has been created to import the passwords. To check the progress, track the session `state`.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"encryptionPasswords\": [\n    {\n      \"hint\": \"nisi consequat in\",\n      \"password\": \"consequat aliqua occaecat elit et\",\n      \"tag\": \"eu quis\"\n    },\n    {\n      \"hint\": \"reprehenderit ipsum voluptate\",\n      \"password\": \"nostrud aliqua dolor commodo\",\n      \"tag\": \"mollit com\"\n    }\n  ]\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": "{{baseUrl}}/api/v1/automation/encryptionPasswords/import"
													},
													"status": "Created",
													"code": 201,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"activityId\": \"urn:uuid:ff04bc79-41c7-abe9-79b9-32b72d0d8ebe\",\n  \"creationTime\": \"1976-08-31T07:10:18.372Z\",\n  \"id\": \"6b97bae8-5d34-c1c8-6373-25234a7b2678\",\n  \"name\": \"Ut pariatur do commodo\",\n  \"sessionType\": \"Automation\",\n  \"state\": \"Starting\",\n  \"usn\": -68197960,\n  \"endTime\": \"1998-06-07T18:50:39.738Z\",\n  \"progressPercent\": -52750286,\n  \"result\": {\n    \"result\": \"None\",\n    \"message\": \"deserunt commodo eu\",\n    \"isCanceled\": true\n  },\n  \"resourceId\": \"af28d036-9436-ab07-5749-6bc82423562b\",\n  \"resourceReference\": \"Ut\",\n  \"parentSessionId\": \"urn:uuid:017adbc7-e2d7-b332-dd71-9fa6701d99bb\"\n}"
												},
												{
													"name": "Bad request. This error is related to POST/PUT requests. The request body is malformed, incomplete or otherwise invalid.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"encryptionPasswords\": [\n    {\n      \"hint\": \"nisi consequat in\",\n      \"password\": \"consequat aliqua occaecat elit et\",\n      \"tag\": \"eu quis\"\n    },\n    {\n      \"hint\": \"reprehenderit ipsum voluptate\",\n      \"password\": \"nostrud aliqua dolor commodo\",\n      \"tag\": \"mollit com\"\n    }\n  ]\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": "{{baseUrl}}/api/v1/automation/encryptionPasswords/import"
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												},
												{
													"name": "Unauthorized. The authorization header has been expected but not found (or found but is expired).",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"encryptionPasswords\": [\n    {\n      \"hint\": \"nisi consequat in\",\n      \"password\": \"consequat aliqua occaecat elit et\",\n      \"tag\": \"eu quis\"\n    },\n    {\n      \"hint\": \"reprehenderit ipsum voluptate\",\n      \"password\": \"nostrud aliqua dolor commodo\",\n      \"tag\": \"mollit com\"\n    }\n  ]\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": "{{baseUrl}}/api/v1/automation/encryptionPasswords/import"
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												},
												{
													"name": "Forbidden. The user sending the request does not have adequate privileges to access one or more objects specified in the request.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"encryptionPasswords\": [\n    {\n      \"hint\": \"nisi consequat in\",\n      \"password\": \"consequat aliqua occaecat elit et\",\n      \"tag\": \"eu quis\"\n    },\n    {\n      \"hint\": \"reprehenderit ipsum voluptate\",\n      \"password\": \"nostrud aliqua dolor commodo\",\n      \"tag\": \"mollit com\"\n    }\n  ]\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": "{{baseUrl}}/api/v1/automation/encryptionPasswords/import"
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												},
												{
													"name": "Internal server error. The request has been received but could not be completed because of an internal error at the server side.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"encryptionPasswords\": [\n    {\n      \"hint\": \"nisi consequat in\",\n      \"password\": \"consequat aliqua occaecat elit et\",\n      \"tag\": \"eu quis\"\n    },\n    {\n      \"hint\": \"reprehenderit ipsum voluptate\",\n      \"password\": \"nostrud aliqua dolor commodo\",\n      \"tag\": \"mollit com\"\n    }\n  ]\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": "{{baseUrl}}/api/v1/automation/encryptionPasswords/import"
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												}
											]
										},
										{
											"name": "Export Encryption Passwords",
											"request": {
												"method": "POST",
												"header": [
													{
														"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
														"key": "x-api-version",
														"value": "1.0-rev1"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"modificationTimeFrom\": \"1953-06-11T08:23:13.388Z\",\n  \"ids\": [\n    \"d7b2cfa4-6026-61df-4e99-d5e7eb6436ad\",\n    \"urn:uuid:cf14b35f-59cb-2d5a-aa48-3391a2760f59\"\n  ],\n  \"hints\": [\n    \"anim do aute irure\",\n    \"nostrud\"\n  ],\n  \"tags\": [\n    \"elit consequat magna dolor\",\n    \"dolore \"\n  ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "{{baseUrl}}/api/v1/automation/encryptionPasswords/export",
												"description": "The HTTP POST request to the `/api/v1/automation/encryptionPasswords/export` path allows you to export encryption passwords from Veeam Backup & Replication."
											},
											"response": [
												{
													"name": "OK",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"modificationTimeFrom\": \"1948-02-28T13:33:51.131Z\",\n  \"ids\": [\n    \"9c389756-dd25-f21f-38fc-ffebc53f0087\",\n    \"7272a47c-a207-c250-e061-1297fad40093\"\n  ],\n  \"hints\": [\n    \"dolor Duis\",\n    \"culpa est veniam\"\n  ],\n  \"tags\": [\n    \"ut aliquip\",\n    \"laborum\"\n  ]\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": "{{baseUrl}}/api/v1/automation/encryptionPasswords/export"
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"encryptionPasswords\": [\n    {\n      \"hint\": \"nisi consequat in\",\n      \"password\": \"consequat aliqua occaecat elit et\",\n      \"tag\": \"eu quis\"\n    },\n    {\n      \"hint\": \"reprehenderit ipsum voluptate\",\n      \"password\": \"nostrud aliqua dolor commodo\",\n      \"tag\": \"mollit com\"\n    }\n  ]\n}"
												},
												{
													"name": "Bad request. This error is related to POST/PUT requests. The request body is malformed, incomplete or otherwise invalid.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"modificationTimeFrom\": \"1948-02-28T13:33:51.131Z\",\n  \"ids\": [\n    \"9c389756-dd25-f21f-38fc-ffebc53f0087\",\n    \"7272a47c-a207-c250-e061-1297fad40093\"\n  ],\n  \"hints\": [\n    \"dolor Duis\",\n    \"culpa est veniam\"\n  ],\n  \"tags\": [\n    \"ut aliquip\",\n    \"laborum\"\n  ]\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": "{{baseUrl}}/api/v1/automation/encryptionPasswords/export"
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												},
												{
													"name": "Unauthorized. The authorization header has been expected but not found (or found but is expired).",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"modificationTimeFrom\": \"1948-02-28T13:33:51.131Z\",\n  \"ids\": [\n    \"9c389756-dd25-f21f-38fc-ffebc53f0087\",\n    \"7272a47c-a207-c250-e061-1297fad40093\"\n  ],\n  \"hints\": [\n    \"dolor Duis\",\n    \"culpa est veniam\"\n  ],\n  \"tags\": [\n    \"ut aliquip\",\n    \"laborum\"\n  ]\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": "{{baseUrl}}/api/v1/automation/encryptionPasswords/export"
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												},
												{
													"name": "Forbidden. The user sending the request does not have adequate privileges to access one or more objects specified in the request.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"modificationTimeFrom\": \"1948-02-28T13:33:51.131Z\",\n  \"ids\": [\n    \"9c389756-dd25-f21f-38fc-ffebc53f0087\",\n    \"7272a47c-a207-c250-e061-1297fad40093\"\n  ],\n  \"hints\": [\n    \"dolor Duis\",\n    \"culpa est veniam\"\n  ],\n  \"tags\": [\n    \"ut aliquip\",\n    \"laborum\"\n  ]\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": "{{baseUrl}}/api/v1/automation/encryptionPasswords/export"
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												},
												{
													"name": "Internal server error. The request has been received but could not be completed because of an internal error at the server side.",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"modificationTimeFrom\": \"1948-02-28T13:33:51.131Z\",\n  \"ids\": [\n    \"9c389756-dd25-f21f-38fc-ffebc53f0087\",\n    \"7272a47c-a207-c250-e061-1297fad40093\"\n  ],\n  \"hints\": [\n    \"dolor Duis\",\n    \"culpa est veniam\"\n  ],\n  \"tags\": [\n    \"ut aliquip\",\n    \"laborum\"\n  ]\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": "{{baseUrl}}/api/v1/automation/encryptionPasswords/export"
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												}
											]
										}
									]
								},
								{
									"name": "sessions",
									"item": [
										{
											"name": "{id}",
											"item": [
												{
													"name": "Get Automation Session",
													"request": {
														"method": "GET",
														"header": [
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v1/automation/sessions/:id",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"automation",
																"sessions",
																":id"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																	"description": "(Required) ID of the session."
																}
															]
														},
														"description": "The HTTP GET request to the `/api/v1/automation/sessions/{id}` path allows you to get an automation session that has the specified `id`."
													},
													"response": [
														{
															"name": "OK",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"description": "Added as a part of security scheme: apikey",
																		"key": "Authorization",
																		"value": "<API Key>"
																	},
																	{
																		"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																		"key": "x-api-version",
																		"value": "1.0-rev1"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/v1/automation/sessions/:id",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v1",
																		"automation",
																		"sessions",
																		":id"
																	],
																	"variable": [
																		{
																			"key": "id",
																			"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																			"description": "(Required) ID of the session."
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"activityId\": \"urn:uuid:ff04bc79-41c7-abe9-79b9-32b72d0d8ebe\",\n  \"creationTime\": \"1976-08-31T07:10:18.372Z\",\n  \"id\": \"6b97bae8-5d34-c1c8-6373-25234a7b2678\",\n  \"name\": \"Ut pariatur do commodo\",\n  \"sessionType\": \"Automation\",\n  \"state\": \"Starting\",\n  \"usn\": -68197960,\n  \"endTime\": \"1998-06-07T18:50:39.738Z\",\n  \"progressPercent\": -52750286,\n  \"result\": {\n    \"result\": \"None\",\n    \"message\": \"deserunt commodo eu\",\n    \"isCanceled\": true\n  },\n  \"resourceId\": \"af28d036-9436-ab07-5749-6bc82423562b\",\n  \"resourceReference\": \"Ut\",\n  \"parentSessionId\": \"urn:uuid:017adbc7-e2d7-b332-dd71-9fa6701d99bb\"\n}"
														},
														{
															"name": "Unauthorized. The authorization header has been expected but not found (or found but is expired).",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"description": "Added as a part of security scheme: apikey",
																		"key": "Authorization",
																		"value": "<API Key>"
																	},
																	{
																		"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																		"key": "x-api-version",
																		"value": "1.0-rev1"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/v1/automation/sessions/:id",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v1",
																		"automation",
																		"sessions",
																		":id"
																	],
																	"variable": [
																		{
																			"key": "id",
																			"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																			"description": "(Required) ID of the session."
																		}
																	]
																}
															},
															"status": "Unauthorized",
															"code": 401,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
														},
														{
															"name": "Forbidden. The user sending the request does not have adequate privileges to access one or more objects specified in the request.",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"description": "Added as a part of security scheme: apikey",
																		"key": "Authorization",
																		"value": "<API Key>"
																	},
																	{
																		"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																		"key": "x-api-version",
																		"value": "1.0-rev1"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/v1/automation/sessions/:id",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v1",
																		"automation",
																		"sessions",
																		":id"
																	],
																	"variable": [
																		{
																			"key": "id",
																			"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																			"description": "(Required) ID of the session."
																		}
																	]
																}
															},
															"status": "Forbidden",
															"code": 403,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
														},
														{
															"name": "Not found. No object was found with the path parameter specified in the request.",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"description": "Added as a part of security scheme: apikey",
																		"key": "Authorization",
																		"value": "<API Key>"
																	},
																	{
																		"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																		"key": "x-api-version",
																		"value": "1.0-rev1"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/v1/automation/sessions/:id",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v1",
																		"automation",
																		"sessions",
																		":id"
																	],
																	"variable": [
																		{
																			"key": "id",
																			"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																			"description": "(Required) ID of the session."
																		}
																	]
																}
															},
															"status": "Not Found",
															"code": 404,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
														},
														{
															"name": "Internal server error. The request has been received but could not be completed because of an internal error at the server side.",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"description": "Added as a part of security scheme: apikey",
																		"key": "Authorization",
																		"value": "<API Key>"
																	},
																	{
																		"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																		"key": "x-api-version",
																		"value": "1.0-rev1"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/v1/automation/sessions/:id",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v1",
																		"automation",
																		"sessions",
																		":id"
																	],
																	"variable": [
																		{
																			"key": "id",
																			"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																			"description": "(Required) ID of the session."
																		}
																	]
																}
															},
															"status": "Internal Server Error",
															"code": 500,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
														}
													]
												},
												{
													"name": "Get Automation Session Logs",
													"request": {
														"method": "GET",
														"header": [
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v1/automation/sessions/:id/logs",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"automation",
																"sessions",
																":id",
																"logs"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																	"description": "(Required) ID of the session."
																}
															]
														},
														"description": "The HTTP GET request to the `/api/v1/automation/sessions/{id}/logs` path allows you to get an array of log records of an automation session that has the specified `id`."
													},
													"response": [
														{
															"name": "OK",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"description": "Added as a part of security scheme: apikey",
																		"key": "Authorization",
																		"value": "<API Key>"
																	},
																	{
																		"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																		"key": "x-api-version",
																		"value": "1.0-rev1"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/v1/automation/sessions/:id/logs",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v1",
																		"automation",
																		"sessions",
																		":id",
																		"logs"
																	],
																	"variable": [
																		{
																			"key": "id",
																			"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																			"description": "(Required) ID of the session."
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"totalRecords\": 40042829,\n  \"records\": [\n    {\n      \"id\": -62149640,\n      \"status\": \"Succeeded\",\n      \"startTime\": \"2009-08-26T12:22:27.610Z\",\n      \"updateTime\": \"1980-10-16T00:38:05.843Z\",\n      \"title\": \"adipisicing ad \",\n      \"description\": \"in ea quis\"\n    },\n    {\n      \"id\": -5589321,\n      \"status\": \"Succeeded\",\n      \"startTime\": \"2011-06-08T13:21:04.813Z\",\n      \"updateTime\": \"2004-10-31T22:58:00.041Z\",\n      \"title\": \"in\",\n      \"description\": \"commodo\"\n    }\n  ]\n}"
														},
														{
															"name": "Unauthorized. The authorization header has been expected but not found (or found but is expired).",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"description": "Added as a part of security scheme: apikey",
																		"key": "Authorization",
																		"value": "<API Key>"
																	},
																	{
																		"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																		"key": "x-api-version",
																		"value": "1.0-rev1"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/v1/automation/sessions/:id/logs",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v1",
																		"automation",
																		"sessions",
																		":id",
																		"logs"
																	],
																	"variable": [
																		{
																			"key": "id",
																			"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																			"description": "(Required) ID of the session."
																		}
																	]
																}
															},
															"status": "Unauthorized",
															"code": 401,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
														},
														{
															"name": "Forbidden. The user sending the request does not have adequate privileges to access one or more objects specified in the request.",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"description": "Added as a part of security scheme: apikey",
																		"key": "Authorization",
																		"value": "<API Key>"
																	},
																	{
																		"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																		"key": "x-api-version",
																		"value": "1.0-rev1"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/v1/automation/sessions/:id/logs",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v1",
																		"automation",
																		"sessions",
																		":id",
																		"logs"
																	],
																	"variable": [
																		{
																			"key": "id",
																			"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																			"description": "(Required) ID of the session."
																		}
																	]
																}
															},
															"status": "Forbidden",
															"code": 403,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
														},
														{
															"name": "Not found. No object was found with the path parameter specified in the request.",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"description": "Added as a part of security scheme: apikey",
																		"key": "Authorization",
																		"value": "<API Key>"
																	},
																	{
																		"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																		"key": "x-api-version",
																		"value": "1.0-rev1"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/v1/automation/sessions/:id/logs",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v1",
																		"automation",
																		"sessions",
																		":id",
																		"logs"
																	],
																	"variable": [
																		{
																			"key": "id",
																			"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																			"description": "(Required) ID of the session."
																		}
																	]
																}
															},
															"status": "Not Found",
															"code": 404,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
														},
														{
															"name": "Internal server error. The request has been received but could not be completed because of an internal error at the server side.",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"description": "Added as a part of security scheme: apikey",
																		"key": "Authorization",
																		"value": "<API Key>"
																	},
																	{
																		"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																		"key": "x-api-version",
																		"value": "1.0-rev1"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/v1/automation/sessions/:id/logs",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v1",
																		"automation",
																		"sessions",
																		":id",
																		"logs"
																	],
																	"variable": [
																		{
																			"key": "id",
																			"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																			"description": "(Required) ID of the session."
																		}
																	]
																}
															},
															"status": "Internal Server Error",
															"code": 500,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
														}
													]
												},
												{
													"name": "Stop Automation Session",
													"request": {
														"method": "POST",
														"header": [
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v1/automation/sessions/:id/stop",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"automation",
																"sessions",
																":id",
																"stop"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																	"description": "(Required) ID of the session."
																}
															]
														},
														"description": "The HTTP POST request to the `/api/v1/automation/sessions/{id}/stop` path allows you to stop an automation session that has the specified `id`."
													},
													"response": [
														{
															"name": "OK",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"description": "Added as a part of security scheme: apikey",
																		"key": "Authorization",
																		"value": "<API Key>"
																	},
																	{
																		"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																		"key": "x-api-version",
																		"value": "1.0-rev1"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/v1/automation/sessions/:id/stop",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v1",
																		"automation",
																		"sessions",
																		":id",
																		"stop"
																	],
																	"variable": [
																		{
																			"key": "id",
																			"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																			"description": "(Required) ID of the session."
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{}"
														},
														{
															"name": "Unauthorized. The authorization header has been expected but not found (or found but is expired).",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"description": "Added as a part of security scheme: apikey",
																		"key": "Authorization",
																		"value": "<API Key>"
																	},
																	{
																		"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																		"key": "x-api-version",
																		"value": "1.0-rev1"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/v1/automation/sessions/:id/stop",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v1",
																		"automation",
																		"sessions",
																		":id",
																		"stop"
																	],
																	"variable": [
																		{
																			"key": "id",
																			"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																			"description": "(Required) ID of the session."
																		}
																	]
																}
															},
															"status": "Unauthorized",
															"code": 401,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
														},
														{
															"name": "Forbidden. The user sending the request does not have adequate privileges to access one or more objects specified in the request.",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"description": "Added as a part of security scheme: apikey",
																		"key": "Authorization",
																		"value": "<API Key>"
																	},
																	{
																		"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																		"key": "x-api-version",
																		"value": "1.0-rev1"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/v1/automation/sessions/:id/stop",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v1",
																		"automation",
																		"sessions",
																		":id",
																		"stop"
																	],
																	"variable": [
																		{
																			"key": "id",
																			"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																			"description": "(Required) ID of the session."
																		}
																	]
																}
															},
															"status": "Forbidden",
															"code": 403,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
														},
														{
															"name": "Not found. No object was found with the path parameter specified in the request.",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"description": "Added as a part of security scheme: apikey",
																		"key": "Authorization",
																		"value": "<API Key>"
																	},
																	{
																		"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																		"key": "x-api-version",
																		"value": "1.0-rev1"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/v1/automation/sessions/:id/stop",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v1",
																		"automation",
																		"sessions",
																		":id",
																		"stop"
																	],
																	"variable": [
																		{
																			"key": "id",
																			"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																			"description": "(Required) ID of the session."
																		}
																	]
																}
															},
															"status": "Not Found",
															"code": 404,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
														},
														{
															"name": "Internal server error. The request has been received but could not be completed because of an internal error at the server side.",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"description": "Added as a part of security scheme: apikey",
																		"key": "Authorization",
																		"value": "<API Key>"
																	},
																	{
																		"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																		"key": "x-api-version",
																		"value": "1.0-rev1"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/api/v1/automation/sessions/:id/stop",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"api",
																		"v1",
																		"automation",
																		"sessions",
																		":id",
																		"stop"
																	],
																	"variable": [
																		{
																			"key": "id",
																			"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
																			"description": "(Required) ID of the session."
																		}
																	]
																}
															},
															"status": "Internal Server Error",
															"code": 500,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
														}
													]
												}
											]
										},
										{
											"name": "Get All Automation Sessions",
											"request": {
												"method": "GET",
												"header": [
													{
														"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
														"key": "x-api-version",
														"value": "1.0-rev1"
													},
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v1/automation/sessions?skip=-10937892&limit=-10937892&orderColumn=CreationTime&orderAsc=true&nameFilter=irure in officia laborum&createdAfterFilter=1949-09-09T09:22:16.570Z&createdBeforeFilter=1949-09-09T09:22:16.570Z&endedAfterFilter=1949-09-09T09:22:16.570Z&endedBeforeFilter=1949-09-09T09:22:16.570Z&typeFilter=ConfigurationBackup&stateFilter=Working&resultFilter=Warning&jobIdFilter=urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"automation",
														"sessions"
													],
													"query": [
														{
															"key": "skip",
															"value": "-10937892",
															"description": "Number of sessions to skip."
														},
														{
															"key": "limit",
															"value": "-10937892",
															"description": "Maximum number of sessions to return."
														},
														{
															"key": "orderColumn",
															"value": "CreationTime",
															"description": "Sorts sessions by one of the session parameters."
														},
														{
															"key": "orderAsc",
															"value": "true",
															"description": "Sorts sessions in the ascending order by the `orderColumn` parameter."
														},
														{
															"key": "nameFilter",
															"value": "irure in officia laborum",
															"description": "Filters sessions by the `nameFilter` pattern. The pattern can match any session parameter. To substitute one or more characters, use the asterisk (*) character at the beginning and/or at the end."
														},
														{
															"key": "createdAfterFilter",
															"value": "1949-09-09T09:22:16.570Z",
															"description": "Returns sessions that are created after the specified date and time."
														},
														{
															"key": "createdBeforeFilter",
															"value": "1949-09-09T09:22:16.570Z",
															"description": "Returns sessions that are created before the specified date and time."
														},
														{
															"key": "endedAfterFilter",
															"value": "1949-09-09T09:22:16.570Z",
															"description": "Returns sessions that are finished after the specified date and time."
														},
														{
															"key": "endedBeforeFilter",
															"value": "1949-09-09T09:22:16.570Z",
															"description": "Returns sessions that are finished before the specified date and time."
														},
														{
															"key": "typeFilter",
															"value": "ConfigurationBackup",
															"description": "Filters sessions by session type."
														},
														{
															"key": "stateFilter",
															"value": "Working",
															"description": "Filters sessions by session state."
														},
														{
															"key": "resultFilter",
															"value": "Warning",
															"description": "Filters sessions by session result."
														},
														{
															"key": "jobIdFilter",
															"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
															"description": "Filters sessions by job ID."
														}
													]
												},
												"description": "The HTTP GET request to the `/api/v1/automation/sessions` path allows you to get an array of all automation sessions performed on the backup server."
											},
											"response": [
												{
													"name": "OK",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v1/automation/sessions?skip=-10937892&limit=-10937892&orderColumn=CreationTime&orderAsc=true&nameFilter=irure in officia laborum&createdAfterFilter=1949-09-09T09:22:16.570Z&createdBeforeFilter=1949-09-09T09:22:16.570Z&endedAfterFilter=1949-09-09T09:22:16.570Z&endedBeforeFilter=1949-09-09T09:22:16.570Z&typeFilter=ConfigurationBackup&stateFilter=Working&resultFilter=Warning&jobIdFilter=urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"automation",
																"sessions"
															],
															"query": [
																{
																	"key": "skip",
																	"value": "-10937892"
																},
																{
																	"key": "limit",
																	"value": "-10937892"
																},
																{
																	"key": "orderColumn",
																	"value": "CreationTime"
																},
																{
																	"key": "orderAsc",
																	"value": "true"
																},
																{
																	"key": "nameFilter",
																	"value": "irure in officia laborum"
																},
																{
																	"key": "createdAfterFilter",
																	"value": "1949-09-09T09:22:16.570Z"
																},
																{
																	"key": "createdBeforeFilter",
																	"value": "1949-09-09T09:22:16.570Z"
																},
																{
																	"key": "endedAfterFilter",
																	"value": "1949-09-09T09:22:16.570Z"
																},
																{
																	"key": "endedBeforeFilter",
																	"value": "1949-09-09T09:22:16.570Z"
																},
																{
																	"key": "typeFilter",
																	"value": "ConfigurationBackup"
																},
																{
																	"key": "stateFilter",
																	"value": "Working"
																},
																{
																	"key": "resultFilter",
																	"value": "Warning"
																},
																{
																	"key": "jobIdFilter",
																	"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"data\": [\n    {\n      \"activityId\": \"urn:uuid:10f9234c-f372-bd2b-fb1f-49b1efde3246\",\n      \"creationTime\": \"1975-12-17T02:10:00.910Z\",\n      \"id\": \"urn:uuid:3dbe3cc4-1586-a1b4-76f2-8935f08d1e7e\",\n      \"name\": \"voluptate minim\",\n      \"sessionType\": \"Infrastructure\",\n      \"state\": \"Pausing\",\n      \"usn\": 39093940,\n      \"endTime\": \"1976-03-23T11:24:32.756Z\",\n      \"progressPercent\": 73249990,\n      \"result\": {\n        \"result\": \"Warning\",\n        \"message\": \"velit deserunt id\",\n        \"isCanceled\": true\n      },\n      \"resourceId\": \"urn:uuid:ef8565cd-fb77-897e-e10e-7a4ef748b521\",\n      \"resourceReference\": \"tempor quis ad\",\n      \"parentSessionId\": \"737d535d-fb6b-5793-ad29-e245879fa8ec\"\n    },\n    {\n      \"activityId\": \"89fad1f4-8ebd-b776-021d-ada57554e593\",\n      \"creationTime\": \"1983-12-20T23:47:35.946Z\",\n      \"id\": \"a0584818-b31e-9917-537b-563cc4664a84\",\n      \"name\": \"reprehenderit Lorem et\",\n      \"sessionType\": \"Infrastructure\",\n      \"state\": \"Idle\",\n      \"usn\": -78846243,\n      \"endTime\": \"1996-12-01T05:37:11.511Z\",\n      \"progressPercent\": -13491186,\n      \"result\": {\n        \"result\": \"Success\",\n        \"message\": \"aliqua\",\n        \"isCanceled\": true\n      },\n      \"resourceId\": \"a0431456-631e-e822-f3e5-57ddae9224c9\",\n      \"resourceReference\": \"mollit occaecat qui\",\n      \"parentSessionId\": \"urn:uuid:5892490f-d793-4aa9-2ab7-19a6d01a6f6b\"\n    }\n  ],\n  \"pagination\": {\n    \"total\": -37251290,\n    \"count\": 86044133,\n    \"skip\": -77451302,\n    \"limit\": 55159892\n  }\n}"
												},
												{
													"name": "Unauthorized. The authorization header has been expected but not found (or found but is expired).",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v1/automation/sessions?skip=-10937892&limit=-10937892&orderColumn=CreationTime&orderAsc=true&nameFilter=irure in officia laborum&createdAfterFilter=1949-09-09T09:22:16.570Z&createdBeforeFilter=1949-09-09T09:22:16.570Z&endedAfterFilter=1949-09-09T09:22:16.570Z&endedBeforeFilter=1949-09-09T09:22:16.570Z&typeFilter=ConfigurationBackup&stateFilter=Working&resultFilter=Warning&jobIdFilter=urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"automation",
																"sessions"
															],
															"query": [
																{
																	"key": "skip",
																	"value": "-10937892"
																},
																{
																	"key": "limit",
																	"value": "-10937892"
																},
																{
																	"key": "orderColumn",
																	"value": "CreationTime"
																},
																{
																	"key": "orderAsc",
																	"value": "true"
																},
																{
																	"key": "nameFilter",
																	"value": "irure in officia laborum"
																},
																{
																	"key": "createdAfterFilter",
																	"value": "1949-09-09T09:22:16.570Z"
																},
																{
																	"key": "createdBeforeFilter",
																	"value": "1949-09-09T09:22:16.570Z"
																},
																{
																	"key": "endedAfterFilter",
																	"value": "1949-09-09T09:22:16.570Z"
																},
																{
																	"key": "endedBeforeFilter",
																	"value": "1949-09-09T09:22:16.570Z"
																},
																{
																	"key": "typeFilter",
																	"value": "ConfigurationBackup"
																},
																{
																	"key": "stateFilter",
																	"value": "Working"
																},
																{
																	"key": "resultFilter",
																	"value": "Warning"
																},
																{
																	"key": "jobIdFilter",
																	"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167"
																}
															]
														}
													},
													"status": "Unauthorized",
													"code": 401,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												},
												{
													"name": "Forbidden. The user sending the request does not have adequate privileges to access one or more objects specified in the request.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v1/automation/sessions?skip=-10937892&limit=-10937892&orderColumn=CreationTime&orderAsc=true&nameFilter=irure in officia laborum&createdAfterFilter=1949-09-09T09:22:16.570Z&createdBeforeFilter=1949-09-09T09:22:16.570Z&endedAfterFilter=1949-09-09T09:22:16.570Z&endedBeforeFilter=1949-09-09T09:22:16.570Z&typeFilter=ConfigurationBackup&stateFilter=Working&resultFilter=Warning&jobIdFilter=urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"automation",
																"sessions"
															],
															"query": [
																{
																	"key": "skip",
																	"value": "-10937892"
																},
																{
																	"key": "limit",
																	"value": "-10937892"
																},
																{
																	"key": "orderColumn",
																	"value": "CreationTime"
																},
																{
																	"key": "orderAsc",
																	"value": "true"
																},
																{
																	"key": "nameFilter",
																	"value": "irure in officia laborum"
																},
																{
																	"key": "createdAfterFilter",
																	"value": "1949-09-09T09:22:16.570Z"
																},
																{
																	"key": "createdBeforeFilter",
																	"value": "1949-09-09T09:22:16.570Z"
																},
																{
																	"key": "endedAfterFilter",
																	"value": "1949-09-09T09:22:16.570Z"
																},
																{
																	"key": "endedBeforeFilter",
																	"value": "1949-09-09T09:22:16.570Z"
																},
																{
																	"key": "typeFilter",
																	"value": "ConfigurationBackup"
																},
																{
																	"key": "stateFilter",
																	"value": "Working"
																},
																{
																	"key": "resultFilter",
																	"value": "Warning"
																},
																{
																	"key": "jobIdFilter",
																	"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167"
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												},
												{
													"name": "Internal server error. The request has been received but could not be completed because of an internal error at the server side.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: apikey",
																"key": "Authorization",
																"value": "<API Key>"
															},
															{
																"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
																"key": "x-api-version",
																"value": "1.0-rev1"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v1/automation/sessions?skip=-10937892&limit=-10937892&orderColumn=CreationTime&orderAsc=true&nameFilter=irure in officia laborum&createdAfterFilter=1949-09-09T09:22:16.570Z&createdBeforeFilter=1949-09-09T09:22:16.570Z&endedAfterFilter=1949-09-09T09:22:16.570Z&endedBeforeFilter=1949-09-09T09:22:16.570Z&typeFilter=ConfigurationBackup&stateFilter=Working&resultFilter=Warning&jobIdFilter=urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"automation",
																"sessions"
															],
															"query": [
																{
																	"key": "skip",
																	"value": "-10937892"
																},
																{
																	"key": "limit",
																	"value": "-10937892"
																},
																{
																	"key": "orderColumn",
																	"value": "CreationTime"
																},
																{
																	"key": "orderAsc",
																	"value": "true"
																},
																{
																	"key": "nameFilter",
																	"value": "irure in officia laborum"
																},
																{
																	"key": "createdAfterFilter",
																	"value": "1949-09-09T09:22:16.570Z"
																},
																{
																	"key": "createdBeforeFilter",
																	"value": "1949-09-09T09:22:16.570Z"
																},
																{
																	"key": "endedAfterFilter",
																	"value": "1949-09-09T09:22:16.570Z"
																},
																{
																	"key": "endedBeforeFilter",
																	"value": "1949-09-09T09:22:16.570Z"
																},
																{
																	"key": "typeFilter",
																	"value": "ConfigurationBackup"
																},
																{
																	"key": "stateFilter",
																	"value": "Working"
																},
																{
																	"key": "resultFilter",
																	"value": "Warning"
																},
																{
																	"key": "jobIdFilter",
																	"value": "urn:uuid:20aeb715-cc3b-2138-17a9-bc403cb48167"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
												}
											]
										}
									]
								}
							]
						},
						{
							"name": "Get Server Time",
							"request": {
								"method": "GET",
								"header": [
									{
										"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
										"key": "x-api-version",
										"value": "1.0-rev1"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": "{{baseUrl}}/api/v1/serverTime",
								"description": "The HTTP GET request to the `/api/v1/serverTime` path allows you to get current date and time on the backup server."
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											},
											{
												"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
												"key": "x-api-version",
												"value": "1.0-rev1"
											}
										],
										"url": "{{baseUrl}}/api/v1/serverTime"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"serverTime\": \"1988-07-11T08:04:08.752Z\",\n  \"timeZone\": \"in\"\n}"
								},
								{
									"name": "Unauthorized. The authorization header has been expected but not found (or found but is expired).",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											},
											{
												"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
												"key": "x-api-version",
												"value": "1.0-rev1"
											}
										],
										"url": "{{baseUrl}}/api/v1/serverTime"
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
								},
								{
									"name": "Forbidden. The user sending the request does not have adequate privileges to access one or more objects specified in the request.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											},
											{
												"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
												"key": "x-api-version",
												"value": "1.0-rev1"
											}
										],
										"url": "{{baseUrl}}/api/v1/serverTime"
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
								},
								{
									"name": "Internal server error. The request has been received but could not be completed because of an internal error at the server side.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											},
											{
												"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
												"key": "x-api-version",
												"value": "1.0-rev1"
											}
										],
										"url": "{{baseUrl}}/api/v1/serverTime"
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
								}
							]
						},
						{
							"name": "Get Server Certificate",
							"request": {
								"method": "GET",
								"header": [
									{
										"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
										"key": "x-api-version",
										"value": "1.0-rev1"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": "{{baseUrl}}/api/v1/serverCertificate",
								"description": "The HTTP GET request to the `/api/v1/serverCertificate` path allows you to get a certificate of the backup server."
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											},
											{
												"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
												"key": "x-api-version",
												"value": "1.0-rev1"
											}
										],
										"url": "{{baseUrl}}/api/v1/serverCertificate"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"issuedBy\": \"consectetur dolore\",\n  \"issuedTo\": \"Duis nulla occaecat\",\n  \"keyAlgorithm\": \"Excepteur mollit dolore\",\n  \"keySize\": \"qui in do\",\n  \"serialNumber\": \"Lorem ea\",\n  \"subject\": \"sit\",\n  \"thumbprint\": \"consequat in fugiat ut sed\",\n  \"validBy\": \"1989-09-28T02:46:18.765Z\",\n  \"validFrom\": \"1958-02-14T13:36:23.434Z\"\n}"
								},
								{
									"name": "Unauthorized. The authorization header has been expected but not found (or found but is expired).",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											},
											{
												"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
												"key": "x-api-version",
												"value": "1.0-rev1"
											}
										],
										"url": "{{baseUrl}}/api/v1/serverCertificate"
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
								},
								{
									"name": "Forbidden. The user sending the request does not have adequate privileges to access one or more objects specified in the request.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											},
											{
												"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
												"key": "x-api-version",
												"value": "1.0-rev1"
											}
										],
										"url": "{{baseUrl}}/api/v1/serverCertificate"
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
								},
								{
									"name": "Internal server error. The request has been received but could not be completed because of an internal error at the server side.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											},
											{
												"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
												"key": "x-api-version",
												"value": "1.0-rev1"
											}
										],
										"url": "{{baseUrl}}/api/v1/serverCertificate"
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
								}
							]
						},
						{
							"name": "Get Associated Services",
							"request": {
								"method": "GET",
								"header": [
									{
										"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
										"key": "x-api-version",
										"value": "1.0-rev1"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v1/services?skip=-10937892&limit=-10937892&orderColumn=Port&orderAsc=false&nameFilter=irure in officia laborum",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"services"
									],
									"query": [
										{
											"key": "skip",
											"value": "-10937892",
											"description": "Number of services to skip."
										},
										{
											"key": "limit",
											"value": "-10937892",
											"description": "Maximum number of services to return."
										},
										{
											"key": "orderColumn",
											"value": "Port",
											"description": "Sorts services by one of the service parameters."
										},
										{
											"key": "orderAsc",
											"value": "false",
											"description": "Sorts services in the ascending order by the `orderColumn` parameter."
										},
										{
											"key": "nameFilter",
											"value": "irure in officia laborum",
											"description": "Filters services by the `nameFilter` pattern. The pattern can match any service parameter. To substitute one or more characters, use the asterisk (*) character at the beginning and/or at the end."
										}
									]
								},
								"description": "The HTTP GET request to the `/api/v1/services` path allows you to get associated services for integration with Veeam Backup & Replication."
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											},
											{
												"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
												"key": "x-api-version",
												"value": "1.0-rev1"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v1/services?skip=-10937892&limit=-10937892&orderColumn=Port&orderAsc=true&nameFilter=irure in officia laborum",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"services"
											],
											"query": [
												{
													"key": "skip",
													"value": "-10937892"
												},
												{
													"key": "limit",
													"value": "-10937892"
												},
												{
													"key": "orderColumn",
													"value": "Port"
												},
												{
													"key": "orderAsc",
													"value": "true"
												},
												{
													"key": "nameFilter",
													"value": "irure in officia laborum"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"data\": [\n    {\n      \"name\": \"cillum sunt tempor\",\n      \"port\": 25229019\n    },\n    {\n      \"name\": \"sed ut aute\",\n      \"port\": 31591101\n    }\n  ],\n  \"pagination\": {\n    \"total\": -31877948,\n    \"count\": -70259027,\n    \"skip\": -80215319,\n    \"limit\": 2202145\n  }\n}"
								},
								{
									"name": "Unauthorized. The authorization header has been expected but not found (or found but is expired).",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											},
											{
												"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
												"key": "x-api-version",
												"value": "1.0-rev1"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v1/services?skip=-10937892&limit=-10937892&orderColumn=Port&orderAsc=true&nameFilter=irure in officia laborum",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"services"
											],
											"query": [
												{
													"key": "skip",
													"value": "-10937892"
												},
												{
													"key": "limit",
													"value": "-10937892"
												},
												{
													"key": "orderColumn",
													"value": "Port"
												},
												{
													"key": "orderAsc",
													"value": "true"
												},
												{
													"key": "nameFilter",
													"value": "irure in officia laborum"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
								},
								{
									"name": "Forbidden. The user sending the request does not have adequate privileges to access one or more objects specified in the request.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											},
											{
												"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
												"key": "x-api-version",
												"value": "1.0-rev1"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v1/services?skip=-10937892&limit=-10937892&orderColumn=Port&orderAsc=true&nameFilter=irure in officia laborum",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"services"
											],
											"query": [
												{
													"key": "skip",
													"value": "-10937892"
												},
												{
													"key": "limit",
													"value": "-10937892"
												},
												{
													"key": "orderColumn",
													"value": "Port"
												},
												{
													"key": "orderAsc",
													"value": "true"
												},
												{
													"key": "nameFilter",
													"value": "irure in officia laborum"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
								},
								{
									"name": "Internal server error. The request has been received but could not be completed because of an internal error at the server side.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											},
											{
												"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
												"key": "x-api-version",
												"value": "1.0-rev1"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v1/services?skip=-10937892&limit=-10937892&orderColumn=Port&orderAsc=true&nameFilter=irure in officia laborum",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"services"
											],
											"query": [
												{
													"key": "skip",
													"value": "-10937892"
												},
												{
													"key": "limit",
													"value": "-10937892"
												},
												{
													"key": "orderColumn",
													"value": "Port"
												},
												{
													"key": "orderAsc",
													"value": "true"
												},
												{
													"key": "nameFilter",
													"value": "irure in officia laborum"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
								}
							]
						},
						{
							"name": "Request TLS Certificate or SSH Fingerprint",
							"request": {
								"method": "POST",
								"header": [
									{
										"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
										"key": "x-api-version",
										"value": "1.0-rev1"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"serverName\": \"cupidatat ullamco in qui\",\n  \"credentialsId\": \"6c592499-06fd-be4e-2653-79967fb20a3f\",\n  \"type\": \"ViHost\",\n  \"port\": -99277185\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl}}/api/v1/connectionCertificate",
								"description": "The HTTP POST request to the `/api/v1/connectionCertificate` path allows you to get a TLS certificate or SSH fingerprint of the specified host."
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											},
											{
												"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
												"key": "x-api-version",
												"value": "1.0-rev1"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"serverName\": \"cupidatat ullamco in qui\",\n  \"credentialsId\": \"6c592499-06fd-be4e-2653-79967fb20a3f\",\n  \"type\": \"ViHost\",\n  \"port\": -99277185\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{baseUrl}}/api/v1/connectionCertificate"
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"fingerprint\": \"fugiat dolor Lorem\",\n  \"certificate\": {\n    \"issuedBy\": \"se\",\n    \"issuedTo\": \"anim Lorem minim deserunt\",\n    \"keyAlgorithm\": \"exercitation in deserunt veniam\",\n    \"keySize\": \"fugiat mollit pariatur\",\n    \"serialNumber\": \"nostrud\",\n    \"subject\": \"dolore sunt id incidid\",\n    \"thumbprint\": \"qui\",\n    \"validBy\": \"2021-11-21T00:37:07.032Z\",\n    \"validFrom\": \"1997-03-20T16:17:14.054Z\"\n  }\n}"
								},
								{
									"name": "Bad request. This error is related to POST/PUT requests. The request body is malformed, incomplete or otherwise invalid.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											},
											{
												"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
												"key": "x-api-version",
												"value": "1.0-rev1"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"serverName\": \"cupidatat ullamco in qui\",\n  \"credentialsId\": \"6c592499-06fd-be4e-2653-79967fb20a3f\",\n  \"type\": \"ViHost\",\n  \"port\": -99277185\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{baseUrl}}/api/v1/connectionCertificate"
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
								},
								{
									"name": "Unauthorized. The authorization header has been expected but not found (or found but is expired).",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											},
											{
												"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
												"key": "x-api-version",
												"value": "1.0-rev1"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"serverName\": \"cupidatat ullamco in qui\",\n  \"credentialsId\": \"6c592499-06fd-be4e-2653-79967fb20a3f\",\n  \"type\": \"ViHost\",\n  \"port\": -99277185\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{baseUrl}}/api/v1/connectionCertificate"
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
								},
								{
									"name": "Forbidden. The user sending the request does not have adequate privileges to access one or more objects specified in the request.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											},
											{
												"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
												"key": "x-api-version",
												"value": "1.0-rev1"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"serverName\": \"cupidatat ullamco in qui\",\n  \"credentialsId\": \"6c592499-06fd-be4e-2653-79967fb20a3f\",\n  \"type\": \"ViHost\",\n  \"port\": -99277185\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{baseUrl}}/api/v1/connectionCertificate"
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
								},
								{
									"name": "Internal server error. The request has been received but could not be completed because of an internal error at the server side.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											},
											{
												"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
												"key": "x-api-version",
												"value": "1.0-rev1"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"serverName\": \"cupidatat ullamco in qui\",\n  \"credentialsId\": \"6c592499-06fd-be4e-2653-79967fb20a3f\",\n  \"type\": \"ViHost\",\n  \"port\": -99277185\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{baseUrl}}/api/v1/connectionCertificate"
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
								}
							]
						}
					]
				},
				{
					"name": "oauth2",
					"item": [
						{
							"name": "Get Access Token",
							"request": {
								"method": "POST",
								"header": [
									{
										"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
										"key": "x-api-version",
										"value": "1.0-rev1"
									},
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"description": "(Required) "
										},
										{
											"key": "username",
											"value": "te",
											"description": "User name. Required if the `grant_type` value is `password`."
										},
										{
											"key": "password",
											"value": "mollit deserunt officia",
											"description": "Password. Required if the `grant_type` value is `password`."
										},
										{
											"key": "refresh_token",
											"value": "ipsum minim sed labore",
											"description": "Refresh token. Required if the `grant_type` value is `refresh_token`."
										},
										{
											"key": "code",
											"value": "ex cupidatat culpa",
											"description": "Authorization code. Required if the `grant_type` value is `authorization_code`."
										},
										{
											"key": "use_short_term_refresh",
											"value": "false",
											"description": "If *true*, a short-term refresh token is used. Lifetime of the short-term refresh token is the access token lifetime plus 15 minutes."
										}
									]
								},
								"url": "{{baseUrl}}/api/oauth2/token",
								"description": "The HTTP POST request to the `/api/oauth2/token` path allows you to get an access token and a refresh token."
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											},
											{
												"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
												"key": "x-api-version",
												"value": "1.0-rev1"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"description": "(Required) "
												},
												{
													"key": "username",
													"value": "te",
													"description": "User name. Required if the `grant_type` value is `password`."
												},
												{
													"key": "password",
													"value": "mollit deserunt officia",
													"description": "Password. Required if the `grant_type` value is `password`."
												},
												{
													"key": "refresh_token",
													"value": "ipsum minim sed labore",
													"description": "Refresh token. Required if the `grant_type` value is `refresh_token`."
												},
												{
													"key": "code",
													"value": "ex cupidatat culpa",
													"description": "Authorization code. Required if the `grant_type` value is `authorization_code`."
												},
												{
													"key": "use_short_term_refresh",
													"value": "false",
													"description": "If *true*, a short-term refresh token is used. Lifetime of the short-term refresh token is the access token lifetime plus 15 minutes."
												}
											]
										},
										"url": "{{baseUrl}}/api/oauth2/token"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \".expires\": \"2009-09-26T21:47:38.638Z\",\n  \".issued\": \"2009-01-29T11:08:06.205Z\",\n  \"access_token\": \"consequat ut\",\n  \"expires_in\": 33522268,\n  \"refresh_token\": \"laboris\",\n  \"token_type\": \"incididunt c\"\n}"
								},
								{
									"name": "Bad request. This error is related to POST/PUT requests. The request body is malformed, incomplete or otherwise invalid.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											},
											{
												"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
												"key": "x-api-version",
												"value": "1.0-rev1"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"description": "(Required) "
												},
												{
													"key": "username",
													"value": "te",
													"description": "User name. Required if the `grant_type` value is `password`."
												},
												{
													"key": "password",
													"value": "mollit deserunt officia",
													"description": "Password. Required if the `grant_type` value is `password`."
												},
												{
													"key": "refresh_token",
													"value": "ipsum minim sed labore",
													"description": "Refresh token. Required if the `grant_type` value is `refresh_token`."
												},
												{
													"key": "code",
													"value": "ex cupidatat culpa",
													"description": "Authorization code. Required if the `grant_type` value is `authorization_code`."
												},
												{
													"key": "use_short_term_refresh",
													"value": "false",
													"description": "If *true*, a short-term refresh token is used. Lifetime of the short-term refresh token is the access token lifetime plus 15 minutes."
												}
											]
										},
										"url": "{{baseUrl}}/api/oauth2/token"
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
								},
								{
									"name": "Unauthorized. The authorization header has been expected but not found (or found but is expired).",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											},
											{
												"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
												"key": "x-api-version",
												"value": "1.0-rev1"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"description": "(Required) "
												},
												{
													"key": "username",
													"value": "te",
													"description": "User name. Required if the `grant_type` value is `password`."
												},
												{
													"key": "password",
													"value": "mollit deserunt officia",
													"description": "Password. Required if the `grant_type` value is `password`."
												},
												{
													"key": "refresh_token",
													"value": "ipsum minim sed labore",
													"description": "Refresh token. Required if the `grant_type` value is `refresh_token`."
												},
												{
													"key": "code",
													"value": "ex cupidatat culpa",
													"description": "Authorization code. Required if the `grant_type` value is `authorization_code`."
												},
												{
													"key": "use_short_term_refresh",
													"value": "false",
													"description": "If *true*, a short-term refresh token is used. Lifetime of the short-term refresh token is the access token lifetime plus 15 minutes."
												}
											]
										},
										"url": "{{baseUrl}}/api/oauth2/token"
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
								},
								{
									"name": "Forbidden. The user sending the request does not have adequate privileges to access one or more objects specified in the request.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											},
											{
												"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
												"key": "x-api-version",
												"value": "1.0-rev1"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"description": "(Required) "
												},
												{
													"key": "username",
													"value": "te",
													"description": "User name. Required if the `grant_type` value is `password`."
												},
												{
													"key": "password",
													"value": "mollit deserunt officia",
													"description": "Password. Required if the `grant_type` value is `password`."
												},
												{
													"key": "refresh_token",
													"value": "ipsum minim sed labore",
													"description": "Refresh token. Required if the `grant_type` value is `refresh_token`."
												},
												{
													"key": "code",
													"value": "ex cupidatat culpa",
													"description": "Authorization code. Required if the `grant_type` value is `authorization_code`."
												},
												{
													"key": "use_short_term_refresh",
													"value": "false",
													"description": "If *true*, a short-term refresh token is used. Lifetime of the short-term refresh token is the access token lifetime plus 15 minutes."
												}
											]
										},
										"url": "{{baseUrl}}/api/oauth2/token"
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
								},
								{
									"name": "Internal server error. The request has been received but could not be completed because of an internal error at the server side.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											},
											{
												"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
												"key": "x-api-version",
												"value": "1.0-rev1"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"description": "(Required) "
												},
												{
													"key": "username",
													"value": "te",
													"description": "User name. Required if the `grant_type` value is `password`."
												},
												{
													"key": "password",
													"value": "mollit deserunt officia",
													"description": "Password. Required if the `grant_type` value is `password`."
												},
												{
													"key": "refresh_token",
													"value": "ipsum minim sed labore",
													"description": "Refresh token. Required if the `grant_type` value is `refresh_token`."
												},
												{
													"key": "code",
													"value": "ex cupidatat culpa",
													"description": "Authorization code. Required if the `grant_type` value is `authorization_code`."
												},
												{
													"key": "use_short_term_refresh",
													"value": "false",
													"description": "If *true*, a short-term refresh token is used. Lifetime of the short-term refresh token is the access token lifetime plus 15 minutes."
												}
											]
										},
										"url": "{{baseUrl}}/api/oauth2/token"
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
								}
							]
						},
						{
							"name": "Get Authorization Code",
							"request": {
								"method": "POST",
								"header": [
									{
										"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
										"key": "x-api-version",
										"value": "1.0-rev1"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": "{{baseUrl}}/api/oauth2/authorization_code",
								"description": "The HTTP POST request to the `/api/oauth2/authorization_code` path allows you to get an authorization code that is used to obtain an access token. For more information on authorization process, see [Requesting Authorization](https://helpcenter.veeam.com/docs/backup/vbr_rest/requesting_authorization.html?ver=110)."
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											},
											{
												"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
												"key": "x-api-version",
												"value": "1.0-rev1"
											}
										],
										"url": "{{baseUrl}}/api/oauth2/authorization_code"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"code\": \"qui dolor ut\"\n}"
								},
								{
									"name": "Unauthorized. The authorization header has been expected but not found (or found but is expired).",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											},
											{
												"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
												"key": "x-api-version",
												"value": "1.0-rev1"
											}
										],
										"url": "{{baseUrl}}/api/oauth2/authorization_code"
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
								},
								{
									"name": "Forbidden. The user sending the request does not have adequate privileges to access one or more objects specified in the request.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											},
											{
												"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
												"key": "x-api-version",
												"value": "1.0-rev1"
											}
										],
										"url": "{{baseUrl}}/api/oauth2/authorization_code"
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
								},
								{
									"name": "Internal server error. The request has been received but could not be completed because of an internal error at the server side.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											},
											{
												"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
												"key": "x-api-version",
												"value": "1.0-rev1"
											}
										],
										"url": "{{baseUrl}}/api/oauth2/authorization_code"
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
								}
							]
						},
						{
							"name": "Log Out",
							"request": {
								"method": "POST",
								"header": [
									{
										"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
										"key": "x-api-version",
										"value": "1.0-rev1"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": "{{baseUrl}}/api/oauth2/logout",
								"description": "The HTTP POST request to the `/api/oauth2/logout` path allows you to perform the logout operation. After you log out, access and refresh tokens are expired.\n"
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											},
											{
												"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
												"key": "x-api-version",
												"value": "1.0-rev1"
											}
										],
										"url": "{{baseUrl}}/api/oauth2/logout"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{}"
								},
								{
									"name": "Unauthorized. The authorization header has been expected but not found (or found but is expired).",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											},
											{
												"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
												"key": "x-api-version",
												"value": "1.0-rev1"
											}
										],
										"url": "{{baseUrl}}/api/oauth2/logout"
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
								},
								{
									"name": "Forbidden. The user sending the request does not have adequate privileges to access one or more objects specified in the request.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											},
											{
												"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
												"key": "x-api-version",
												"value": "1.0-rev1"
											}
										],
										"url": "{{baseUrl}}/api/oauth2/logout"
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
								},
								{
									"name": "Internal server error. The request has been received but could not be completed because of an internal error at the server side.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: apikey",
												"key": "Authorization",
												"value": "<API Key>"
											},
											{
												"description": "(Required) Version and revision of the client REST API. Must be in the following\nformat: *\\<version\\>-\\<revision\\>*.\n",
												"key": "x-api-version",
												"value": "1.0-rev1"
											}
										],
										"url": "{{baseUrl}}/api/oauth2/logout"
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"errorCode\": \"MethodNotAllowed\",\n  \"message\": \"non proident culpa nostrud laboris\",\n  \"resourceId\": \"dolor aliquip Ut\"\n}"
								}
							]
						}
					]
				}
			]
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": {
			"key": "Authorization",
			"value": "<API Key>",
			"in": "header"
		}
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://your-address:9194",
			"type": "string"
		}
	]
}